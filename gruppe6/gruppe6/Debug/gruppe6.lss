
gruppe6.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000009a  00800100  00001172  00001206  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00001172  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          0000000f  0080019a  0080019a  000012a0  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  000012a0  2**0
                  CONTENTS, READONLY
  4 .debug_aranges 00000280  00000000  00000000  000012d0  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00002721  00000000  00000000  00001550  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000dc9  00000000  00000000  00003c71  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00000c33  00000000  00000000  00004a3a  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000604  00000000  00000000  00005670  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    0000074c  00000000  00000000  00005c74  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    0000128f  00000000  00000000  000063c0  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000258  00000000  00000000  0000764f  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 f6 00 	jmp	0x1ec	; 0x1ec <__ctors_end>
       4:	0c 94 13 01 	jmp	0x226	; 0x226 <__bad_interrupt>
       8:	0c 94 13 01 	jmp	0x226	; 0x226 <__bad_interrupt>
       c:	0c 94 13 01 	jmp	0x226	; 0x226 <__bad_interrupt>
      10:	0c 94 13 01 	jmp	0x226	; 0x226 <__bad_interrupt>
      14:	0c 94 13 01 	jmp	0x226	; 0x226 <__bad_interrupt>
      18:	0c 94 13 01 	jmp	0x226	; 0x226 <__bad_interrupt>
      1c:	0c 94 13 01 	jmp	0x226	; 0x226 <__bad_interrupt>
      20:	0c 94 13 01 	jmp	0x226	; 0x226 <__bad_interrupt>
      24:	0c 94 13 01 	jmp	0x226	; 0x226 <__bad_interrupt>
      28:	0c 94 13 01 	jmp	0x226	; 0x226 <__bad_interrupt>
      2c:	0c 94 13 01 	jmp	0x226	; 0x226 <__bad_interrupt>
      30:	0c 94 13 01 	jmp	0x226	; 0x226 <__bad_interrupt>
      34:	0c 94 13 01 	jmp	0x226	; 0x226 <__bad_interrupt>
      38:	0c 94 13 01 	jmp	0x226	; 0x226 <__bad_interrupt>
      3c:	0c 94 13 01 	jmp	0x226	; 0x226 <__bad_interrupt>
      40:	0c 94 13 01 	jmp	0x226	; 0x226 <__bad_interrupt>
      44:	0c 94 13 01 	jmp	0x226	; 0x226 <__bad_interrupt>
      48:	0c 94 13 01 	jmp	0x226	; 0x226 <__bad_interrupt>
      4c:	0c 94 13 01 	jmp	0x226	; 0x226 <__bad_interrupt>
      50:	0c 94 13 01 	jmp	0x226	; 0x226 <__bad_interrupt>
      54:	0c 94 13 01 	jmp	0x226	; 0x226 <__bad_interrupt>
      58:	0c 94 13 01 	jmp	0x226	; 0x226 <__bad_interrupt>
      5c:	0c 94 13 01 	jmp	0x226	; 0x226 <__bad_interrupt>
      60:	0c 94 13 01 	jmp	0x226	; 0x226 <__bad_interrupt>
      64:	0c 94 13 01 	jmp	0x226	; 0x226 <__bad_interrupt>
      68:	0c 94 13 01 	jmp	0x226	; 0x226 <__bad_interrupt>
      6c:	0c 94 13 01 	jmp	0x226	; 0x226 <__bad_interrupt>

00000070 <__trampolines_end>:
      70:	00 00       	nop
      72:	00 00       	nop
      74:	00 5c       	subi	r16, 0xC0	; 192
      76:	00 00       	nop
      78:	0c 00       	.word	0x000c	; ????
      7a:	0c 00       	.word	0x000c	; ????
      7c:	7c 28       	or	r7, r12
      7e:	7c 28       	or	r7, r12
      80:	58 dc       	rcall	.-1872   	; 0xfffff932 <__eeprom_end+0xff7ef932>
      82:	68 00       	.word	0x0068	; ????
      84:	24 10       	cpse	r2, r4
      86:	48 00       	.word	0x0048	; ????
      88:	28 54       	subi	r18, 0x48	; 72
      8a:	28 40       	sbci	r18, 0x08	; 8
      8c:	00 0c       	add	r0, r0
      8e:	00 00       	nop
      90:	00 78       	andi	r16, 0x80	; 128
      92:	84 00       	.word	0x0084	; ????
      94:	84 78       	andi	r24, 0x84	; 132
      96:	00 00       	nop
      98:	54 38       	cpi	r21, 0x84	; 132
      9a:	54 00       	.word	0x0054	; ????
      9c:	10 7c       	andi	r17, 0xC0	; 192
      9e:	10 00       	.word	0x0010	; ????
      a0:	80 40       	sbci	r24, 0x00	; 0
      a2:	00 00       	nop
      a4:	10 10       	cpse	r1, r0
      a6:	10 00       	.word	0x0010	; ????
      a8:	00 40       	sbci	r16, 0x00	; 0
      aa:	00 00       	nop
      ac:	60 10       	cpse	r6, r0
      ae:	0c 00       	.word	0x000c	; ????
      b0:	38 54       	subi	r19, 0x48	; 72
      b2:	38 00       	.word	0x0038	; ????
      b4:	48 7c       	andi	r20, 0xC8	; 200
      b6:	40 00       	.word	0x0040	; ????
      b8:	48 64       	ori	r20, 0x48	; 72
      ba:	58 00       	.word	0x0058	; ????
      bc:	44 54       	subi	r20, 0x44	; 68
      be:	2c 00       	.word	0x002c	; ????
      c0:	1c 10       	cpse	r1, r12
      c2:	7c 00       	.word	0x007c	; ????
      c4:	5c 54       	subi	r21, 0x4C	; 76
      c6:	24 00       	.word	0x0024	; ????
      c8:	38 54       	subi	r19, 0x48	; 72
      ca:	24 00       	.word	0x0024	; ????
      cc:	64 14       	cp	r6, r4
      ce:	0c 00       	.word	0x000c	; ????
      d0:	68 54       	subi	r22, 0x48	; 72
      d2:	2c 00       	.word	0x002c	; ????
      d4:	48 54       	subi	r20, 0x48	; 72
      d6:	38 00       	.word	0x0038	; ????
      d8:	00 48       	sbci	r16, 0x80	; 128
      da:	00 00       	nop
      dc:	80 48       	sbci	r24, 0x80	; 128
      de:	00 00       	nop
      e0:	10 28       	or	r1, r0
      e2:	44 00       	.word	0x0044	; ????
      e4:	28 28       	or	r2, r8
      e6:	28 00       	.word	0x0028	; ????
      e8:	44 28       	or	r4, r4
      ea:	10 00       	.word	0x0010	; ????
      ec:	04 54       	subi	r16, 0x44	; 68
      ee:	08 00       	.word	0x0008	; ????
      f0:	38 44       	sbci	r19, 0x48	; 72
      f2:	5c 00       	.word	0x005c	; ????
      f4:	78 14       	cp	r7, r8
      f6:	78 00       	.word	0x0078	; ????
      f8:	7c 54       	subi	r23, 0x4C	; 76
      fa:	28 00       	.word	0x0028	; ????
      fc:	38 44       	sbci	r19, 0x48	; 72
      fe:	28 00       	.word	0x0028	; ????
     100:	7c 44       	sbci	r23, 0x4C	; 76
     102:	38 00       	.word	0x0038	; ????
     104:	7c 54       	subi	r23, 0x4C	; 76
     106:	44 00       	.word	0x0044	; ????
     108:	7c 14       	cp	r7, r12
     10a:	04 00       	.word	0x0004	; ????
     10c:	38 44       	sbci	r19, 0x48	; 72
     10e:	74 00       	.word	0x0074	; ????
     110:	7c 10       	cpse	r7, r12
     112:	7c 00       	.word	0x007c	; ????
     114:	44 7c       	andi	r20, 0xC4	; 196
     116:	44 00       	.word	0x0044	; ????
     118:	20 40       	sbci	r18, 0x00	; 0
     11a:	3c 00       	.word	0x003c	; ????
     11c:	7c 10       	cpse	r7, r12
     11e:	6c 00       	.word	0x006c	; ????
     120:	7c 40       	sbci	r23, 0x0C	; 12
     122:	40 00       	.word	0x0040	; ????
     124:	7c 18       	sub	r7, r12
     126:	7c 00       	.word	0x007c	; ????
     128:	78 10       	cpse	r7, r8
     12a:	3c 00       	.word	0x003c	; ????
     12c:	38 44       	sbci	r19, 0x48	; 72
     12e:	38 00       	.word	0x0038	; ????
     130:	7c 14       	cp	r7, r12
     132:	08 00       	.word	0x0008	; ????
     134:	38 44       	sbci	r19, 0x48	; 72
     136:	b8 00       	.word	0x00b8	; ????
     138:	7c 14       	cp	r7, r12
     13a:	68 00       	.word	0x0068	; ????
     13c:	48 54       	subi	r20, 0x48	; 72
     13e:	24 00       	.word	0x0024	; ????
     140:	04 7c       	andi	r16, 0xC4	; 196
     142:	04 00       	.word	0x0004	; ????
     144:	7c 40       	sbci	r23, 0x0C	; 12
     146:	7c 00       	.word	0x007c	; ????
     148:	3c 60       	ori	r19, 0x0C	; 12
     14a:	3c 00       	.word	0x003c	; ????
     14c:	7c 30       	cpi	r23, 0x0C	; 12
     14e:	7c 00       	.word	0x007c	; ????
     150:	6c 10       	cpse	r6, r12
     152:	6c 00       	.word	0x006c	; ????
     154:	0c 70       	andi	r16, 0x0C	; 12
     156:	0c 00       	.word	0x000c	; ????
     158:	64 54       	subi	r22, 0x44	; 68
     15a:	4c 00       	.word	0x004c	; ????
     15c:	00 7c       	andi	r16, 0xC0	; 192
     15e:	44 00       	.word	0x0044	; ????
     160:	0c 10       	cpse	r0, r12
     162:	60 00       	.word	0x0060	; ????
     164:	44 7c       	andi	r20, 0xC4	; 196
     166:	00 00       	nop
     168:	08 04       	cpc	r0, r8
     16a:	08 00       	.word	0x0008	; ????
     16c:	80 80       	ld	r8, Z
     16e:	80 00       	.word	0x0080	; ????
     170:	00 04       	cpc	r0, r0
     172:	08 00       	.word	0x0008	; ????
     174:	30 48       	sbci	r19, 0x80	; 128
     176:	78 00       	.word	0x0078	; ????
     178:	7c 48       	sbci	r23, 0x8C	; 140
     17a:	30 00       	.word	0x0030	; ????
     17c:	30 48       	sbci	r19, 0x80	; 128
     17e:	48 00       	.word	0x0048	; ????
     180:	30 48       	sbci	r19, 0x80	; 128
     182:	7c 00       	.word	0x007c	; ????
     184:	30 68       	ori	r19, 0x80	; 128
     186:	50 00       	.word	0x0050	; ????
     188:	10 78       	andi	r17, 0x80	; 128
     18a:	14 00       	.word	0x0014	; ????
     18c:	90 a8       	ldd	r9, Z+48	; 0x30
     18e:	78 00       	.word	0x0078	; ????
     190:	7c 08       	sbc	r7, r12
     192:	70 00       	.word	0x0070	; ????
     194:	50 74       	andi	r21, 0x40	; 64
     196:	40 00       	.word	0x0040	; ????
     198:	80 80       	ld	r8, Z
     19a:	74 00       	.word	0x0074	; ????
     19c:	7c 10       	cpse	r7, r12
     19e:	68 00       	.word	0x0068	; ????
     1a0:	44 7c       	andi	r20, 0xC4	; 196
     1a2:	40 00       	.word	0x0040	; ????
     1a4:	78 10       	cpse	r7, r8
     1a6:	78 00       	.word	0x0078	; ????
     1a8:	78 08       	sbc	r7, r8
     1aa:	70 00       	.word	0x0070	; ????
     1ac:	30 48       	sbci	r19, 0x80	; 128
     1ae:	30 00       	.word	0x0030	; ????
     1b0:	f8 28       	or	r15, r8
     1b2:	10 00       	.word	0x0010	; ????
     1b4:	30 48       	sbci	r19, 0x80	; 128
     1b6:	f8 00       	.word	0x00f8	; ????
     1b8:	78 10       	cpse	r7, r8
     1ba:	08 00       	.word	0x0008	; ????
     1bc:	50 58       	subi	r21, 0x80	; 128
     1be:	28 00       	.word	0x0028	; ????
     1c0:	08 3c       	cpi	r16, 0xC8	; 200
     1c2:	48 00       	.word	0x0048	; ????
     1c4:	38 40       	sbci	r19, 0x08	; 8
     1c6:	78 00       	.word	0x0078	; ????
     1c8:	38 40       	sbci	r19, 0x08	; 8
     1ca:	38 00       	.word	0x0038	; ????
     1cc:	78 20       	and	r7, r8
     1ce:	78 00       	.word	0x0078	; ????
     1d0:	48 30       	cpi	r20, 0x08	; 8
     1d2:	48 00       	.word	0x0048	; ????
     1d4:	98 a0       	ldd	r9, Y+32	; 0x20
     1d6:	78 00       	.word	0x0078	; ????
     1d8:	48 68       	ori	r20, 0x88	; 136
     1da:	58 00       	.word	0x0058	; ????
     1dc:	10 78       	andi	r17, 0x80	; 128
     1de:	84 00       	.word	0x0084	; ????
     1e0:	00 7c       	andi	r16, 0xC0	; 192
     1e2:	00 00       	nop
     1e4:	84 78       	andi	r24, 0x84	; 132
     1e6:	10 00       	.word	0x0010	; ????
     1e8:	08 04       	cpc	r0, r8
     1ea:	08 04       	cpc	r0, r8

000001ec <__ctors_end>:
     1ec:	11 24       	eor	r1, r1
     1ee:	1f be       	out	0x3f, r1	; 63
     1f0:	cf ef       	ldi	r28, 0xFF	; 255
     1f2:	d4 e0       	ldi	r29, 0x04	; 4
     1f4:	de bf       	out	0x3e, r29	; 62
     1f6:	cd bf       	out	0x3d, r28	; 61

000001f8 <__do_copy_data>:
     1f8:	11 e0       	ldi	r17, 0x01	; 1
     1fa:	a0 e0       	ldi	r26, 0x00	; 0
     1fc:	b1 e0       	ldi	r27, 0x01	; 1
     1fe:	e2 e7       	ldi	r30, 0x72	; 114
     200:	f1 e1       	ldi	r31, 0x11	; 17
     202:	02 c0       	rjmp	.+4      	; 0x208 <__do_copy_data+0x10>
     204:	05 90       	lpm	r0, Z+
     206:	0d 92       	st	X+, r0
     208:	aa 39       	cpi	r26, 0x9A	; 154
     20a:	b1 07       	cpc	r27, r17
     20c:	d9 f7       	brne	.-10     	; 0x204 <__do_copy_data+0xc>

0000020e <__do_clear_bss>:
     20e:	21 e0       	ldi	r18, 0x01	; 1
     210:	aa e9       	ldi	r26, 0x9A	; 154
     212:	b1 e0       	ldi	r27, 0x01	; 1
     214:	01 c0       	rjmp	.+2      	; 0x218 <.do_clear_bss_start>

00000216 <.do_clear_bss_loop>:
     216:	1d 92       	st	X+, r1

00000218 <.do_clear_bss_start>:
     218:	a9 3a       	cpi	r26, 0xA9	; 169
     21a:	b2 07       	cpc	r27, r18
     21c:	e1 f7       	brne	.-8      	; 0x216 <.do_clear_bss_loop>
     21e:	0e 94 78 06 	call	0xcf0	; 0xcf0 <main>
     222:	0c 94 b7 08 	jmp	0x116e	; 0x116e <_exit>

00000226 <__bad_interrupt>:
     226:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000022a <ADC_init>:
     22a:	85 b7       	in	r24, 0x35	; 53
     22c:	80 68       	ori	r24, 0x80	; 128
     22e:	85 bf       	out	0x35, r24	; 53
     230:	80 b7       	in	r24, 0x30	; 48
     232:	80 62       	ori	r24, 0x20	; 32
     234:	80 bf       	out	0x30, r24	; 48
     236:	bb 98       	cbi	0x17, 3	; 23
     238:	08 95       	ret

0000023a <ADC_read>:
     23a:	8c 5f       	subi	r24, 0xFC	; 252
     23c:	80 93 00 14 	sts	0x1400, r24
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     240:	80 e1       	ldi	r24, 0x10	; 16
     242:	8a 95       	dec	r24
     244:	f1 f7       	brne	.-4      	; 0x242 <ADC_read+0x8>
     246:	00 c0       	rjmp	.+0      	; 0x248 <ADC_read+0xe>
     248:	b3 99       	sbic	0x16, 3	; 22
     24a:	fe cf       	rjmp	.-4      	; 0x248 <ADC_read+0xe>
     24c:	80 91 00 14 	lds	r24, 0x1400
     250:	08 95       	ret

00000252 <can_init>:
     252:	cf 93       	push	r28
     254:	c8 2f       	mov	r28, r24
     256:	0e 94 66 06 	call	0xccc	; 0xccc <SPI_init>
     25a:	0e 94 68 02 	call	0x4d0	; 0x4d0 <MCP2515_reset>
     25e:	4c 2f       	mov	r20, r28
     260:	60 ee       	ldi	r22, 0xE0	; 224
     262:	8f e0       	ldi	r24, 0x0F	; 15
     264:	0e 94 4e 02 	call	0x49c	; 0x49c <MCP2515_bit_modify>
     268:	40 e6       	ldi	r20, 0x60	; 96
     26a:	60 e6       	ldi	r22, 0x60	; 96
     26c:	80 e6       	ldi	r24, 0x60	; 96
     26e:	0e 94 4e 02 	call	0x49c	; 0x49c <MCP2515_bit_modify>
     272:	40 e0       	ldi	r20, 0x00	; 0
     274:	64 e0       	ldi	r22, 0x04	; 4
     276:	80 e6       	ldi	r24, 0x60	; 96
     278:	0e 94 4e 02 	call	0x49c	; 0x49c <MCP2515_bit_modify>
     27c:	40 e0       	ldi	r20, 0x00	; 0
     27e:	6f ef       	ldi	r22, 0xFF	; 255
     280:	8b e2       	ldi	r24, 0x2B	; 43
     282:	0e 94 4e 02 	call	0x49c	; 0x49c <MCP2515_bit_modify>
     286:	cf 91       	pop	r28
     288:	08 95       	ret

0000028a <can_transmit>:
     28a:	cf 92       	push	r12
     28c:	df 92       	push	r13
     28e:	ef 92       	push	r14
     290:	ff 92       	push	r15
     292:	0f 93       	push	r16
     294:	1f 93       	push	r17
     296:	cf 93       	push	r28
     298:	df 93       	push	r29
     29a:	cd b7       	in	r28, 0x3d	; 61
     29c:	de b7       	in	r29, 0x3e	; 62
     29e:	2a 97       	sbiw	r28, 0x0a	; 10
     2a0:	0f b6       	in	r0, 0x3f	; 63
     2a2:	f8 94       	cli
     2a4:	de bf       	out	0x3e, r29	; 62
     2a6:	0f be       	out	0x3f, r0	; 63
     2a8:	cd bf       	out	0x3d, r28	; 61
     2aa:	09 83       	std	Y+1, r16	; 0x01
     2ac:	c1 2e       	mov	r12, r17
     2ae:	1a 83       	std	Y+2, r17	; 0x02
     2b0:	2b 83       	std	Y+3, r18	; 0x03
     2b2:	3c 83       	std	Y+4, r19	; 0x04
     2b4:	4d 83       	std	Y+5, r20	; 0x05
     2b6:	5e 83       	std	Y+6, r21	; 0x06
     2b8:	6f 83       	std	Y+7, r22	; 0x07
     2ba:	78 87       	std	Y+8, r23	; 0x08
     2bc:	89 87       	std	Y+9, r24	; 0x09
     2be:	9a 87       	std	Y+10, r25	; 0x0a
     2c0:	80 e3       	ldi	r24, 0x30	; 48
     2c2:	0e 94 0f 02 	call	0x41e	; 0x41e <MCP2515_read>
     2c6:	83 fd       	sbrc	r24, 3
     2c8:	fb cf       	rjmp	.-10     	; 0x2c0 <can_transmit+0x36>
     2ca:	61 e3       	ldi	r22, 0x31	; 49
     2cc:	80 2f       	mov	r24, r16
     2ce:	86 95       	lsr	r24
     2d0:	86 95       	lsr	r24
     2d2:	86 95       	lsr	r24
     2d4:	0e 94 21 02 	call	0x442	; 0x442 <MCP2515_write>
     2d8:	62 e3       	ldi	r22, 0x32	; 50
     2da:	80 2f       	mov	r24, r16
     2dc:	82 95       	swap	r24
     2de:	88 0f       	add	r24, r24
     2e0:	80 7e       	andi	r24, 0xE0	; 224
     2e2:	0e 94 21 02 	call	0x442	; 0x442 <MCP2515_write>
     2e6:	65 e3       	ldi	r22, 0x35	; 53
     2e8:	8c 2d       	mov	r24, r12
     2ea:	0e 94 21 02 	call	0x442	; 0x442 <MCP2515_write>
     2ee:	d1 2c       	mov	r13, r1
     2f0:	1c 14       	cp	r1, r12
     2f2:	1d 04       	cpc	r1, r13
     2f4:	94 f4       	brge	.+36     	; 0x31a <can_transmit+0x90>
     2f6:	7e 01       	movw	r14, r28
     2f8:	83 e0       	ldi	r24, 0x03	; 3
     2fa:	e8 0e       	add	r14, r24
     2fc:	f1 1c       	adc	r15, r1
     2fe:	00 e0       	ldi	r16, 0x00	; 0
     300:	10 e0       	ldi	r17, 0x00	; 0
     302:	66 e3       	ldi	r22, 0x36	; 54
     304:	60 0f       	add	r22, r16
     306:	f7 01       	movw	r30, r14
     308:	81 91       	ld	r24, Z+
     30a:	7f 01       	movw	r14, r30
     30c:	0e 94 21 02 	call	0x442	; 0x442 <MCP2515_write>
     310:	0f 5f       	subi	r16, 0xFF	; 255
     312:	1f 4f       	sbci	r17, 0xFF	; 255
     314:	0c 15       	cp	r16, r12
     316:	1d 05       	cpc	r17, r13
     318:	a4 f3       	brlt	.-24     	; 0x302 <can_transmit+0x78>
     31a:	80 e0       	ldi	r24, 0x00	; 0
     31c:	0e 94 35 02 	call	0x46a	; 0x46a <MCP2515_rts>
     320:	2a 96       	adiw	r28, 0x0a	; 10
     322:	0f b6       	in	r0, 0x3f	; 63
     324:	f8 94       	cli
     326:	de bf       	out	0x3e, r29	; 62
     328:	0f be       	out	0x3f, r0	; 63
     32a:	cd bf       	out	0x3d, r28	; 61
     32c:	df 91       	pop	r29
     32e:	cf 91       	pop	r28
     330:	1f 91       	pop	r17
     332:	0f 91       	pop	r16
     334:	ff 90       	pop	r15
     336:	ef 90       	pop	r14
     338:	df 90       	pop	r13
     33a:	cf 90       	pop	r12
     33c:	08 95       	ret

0000033e <can_receive>:
     33e:	9f 92       	push	r9
     340:	af 92       	push	r10
     342:	bf 92       	push	r11
     344:	cf 92       	push	r12
     346:	df 92       	push	r13
     348:	ef 92       	push	r14
     34a:	ff 92       	push	r15
     34c:	0f 93       	push	r16
     34e:	1f 93       	push	r17
     350:	cf 93       	push	r28
     352:	df 93       	push	r29
     354:	cd b7       	in	r28, 0x3d	; 61
     356:	de b7       	in	r29, 0x3e	; 62
     358:	2a 97       	sbiw	r28, 0x0a	; 10
     35a:	0f b6       	in	r0, 0x3f	; 63
     35c:	f8 94       	cli
     35e:	de bf       	out	0x3e, r29	; 62
     360:	0f be       	out	0x3f, r0	; 63
     362:	cd bf       	out	0x3d, r28	; 61
     364:	6c 01       	movw	r12, r24
     366:	fe 01       	movw	r30, r28
     368:	31 96       	adiw	r30, 0x01	; 1
     36a:	8a e0       	ldi	r24, 0x0A	; 10
     36c:	df 01       	movw	r26, r30
     36e:	1d 92       	st	X+, r1
     370:	8a 95       	dec	r24
     372:	e9 f7       	brne	.-6      	; 0x36e <can_receive+0x30>
     374:	8c e2       	ldi	r24, 0x2C	; 44
     376:	0e 94 0f 02 	call	0x41e	; 0x41e <MCP2515_read>
     37a:	80 ff       	sbrs	r24, 0
     37c:	31 c0       	rjmp	.+98     	; 0x3e0 <can_receive+0xa2>
     37e:	82 e6       	ldi	r24, 0x62	; 98
     380:	0e 94 0f 02 	call	0x41e	; 0x41e <MCP2515_read>
     384:	18 2f       	mov	r17, r24
     386:	81 e6       	ldi	r24, 0x61	; 97
     388:	0e 94 0f 02 	call	0x41e	; 0x41e <MCP2515_read>
     38c:	88 0f       	add	r24, r24
     38e:	88 0f       	add	r24, r24
     390:	88 0f       	add	r24, r24
     392:	12 95       	swap	r17
     394:	16 95       	lsr	r17
     396:	17 70       	andi	r17, 0x07	; 7
     398:	98 2e       	mov	r9, r24
     39a:	91 0e       	add	r9, r17
     39c:	85 e6       	ldi	r24, 0x65	; 101
     39e:	0e 94 0f 02 	call	0x41e	; 0x41e <MCP2515_read>
     3a2:	8f 70       	andi	r24, 0x0F	; 15
     3a4:	a8 2e       	mov	r10, r24
     3a6:	a1 f0       	breq	.+40     	; 0x3d0 <can_receive+0x92>
     3a8:	8e 01       	movw	r16, r28
     3aa:	0d 5f       	subi	r16, 0xFD	; 253
     3ac:	1f 4f       	sbci	r17, 0xFF	; 255
     3ae:	78 01       	movw	r14, r16
     3b0:	e8 0e       	add	r14, r24
     3b2:	f1 1c       	adc	r15, r1
     3b4:	0f 2e       	mov	r0, r31
     3b6:	f6 e6       	ldi	r31, 0x66	; 102
     3b8:	bf 2e       	mov	r11, r31
     3ba:	f0 2d       	mov	r31, r0
     3bc:	8b 2d       	mov	r24, r11
     3be:	0e 94 0f 02 	call	0x41e	; 0x41e <MCP2515_read>
     3c2:	f8 01       	movw	r30, r16
     3c4:	81 93       	st	Z+, r24
     3c6:	8f 01       	movw	r16, r30
     3c8:	b3 94       	inc	r11
     3ca:	ee 15       	cp	r30, r14
     3cc:	ff 05       	cpc	r31, r15
     3ce:	b1 f7       	brne	.-20     	; 0x3bc <can_receive+0x7e>
     3d0:	10 92 9a 01 	sts	0x019A, r1
     3d4:	40 e0       	ldi	r20, 0x00	; 0
     3d6:	61 e0       	ldi	r22, 0x01	; 1
     3d8:	8c e2       	ldi	r24, 0x2C	; 44
     3da:	0e 94 4e 02 	call	0x49c	; 0x49c <MCP2515_bit_modify>
     3de:	02 c0       	rjmp	.+4      	; 0x3e4 <can_receive+0xa6>
     3e0:	a1 2c       	mov	r10, r1
     3e2:	91 2c       	mov	r9, r1
     3e4:	99 82       	std	Y+1, r9	; 0x01
     3e6:	aa 82       	std	Y+2, r10	; 0x02
     3e8:	8a e0       	ldi	r24, 0x0A	; 10
     3ea:	fe 01       	movw	r30, r28
     3ec:	31 96       	adiw	r30, 0x01	; 1
     3ee:	d6 01       	movw	r26, r12
     3f0:	01 90       	ld	r0, Z+
     3f2:	0d 92       	st	X+, r0
     3f4:	8a 95       	dec	r24
     3f6:	e1 f7       	brne	.-8      	; 0x3f0 <can_receive+0xb2>
     3f8:	c6 01       	movw	r24, r12
     3fa:	2a 96       	adiw	r28, 0x0a	; 10
     3fc:	0f b6       	in	r0, 0x3f	; 63
     3fe:	f8 94       	cli
     400:	de bf       	out	0x3e, r29	; 62
     402:	0f be       	out	0x3f, r0	; 63
     404:	cd bf       	out	0x3d, r28	; 61
     406:	df 91       	pop	r29
     408:	cf 91       	pop	r28
     40a:	1f 91       	pop	r17
     40c:	0f 91       	pop	r16
     40e:	ff 90       	pop	r15
     410:	ef 90       	pop	r14
     412:	df 90       	pop	r13
     414:	cf 90       	pop	r12
     416:	bf 90       	pop	r11
     418:	af 90       	pop	r10
     41a:	9f 90       	pop	r9
     41c:	08 95       	ret

0000041e <MCP2515_read>:
     41e:	cf 93       	push	r28
     420:	c8 2f       	mov	r28, r24
     422:	0e 94 74 06 	call	0xce8	; 0xce8 <SPI_enable>
     426:	83 e0       	ldi	r24, 0x03	; 3
     428:	0e 94 6b 06 	call	0xcd6	; 0xcd6 <SPI_transmit>
     42c:	8c 2f       	mov	r24, r28
     42e:	0e 94 6b 06 	call	0xcd6	; 0xcd6 <SPI_transmit>
     432:	0e 94 6f 06 	call	0xcde	; 0xcde <SPI_receive>
     436:	c8 2f       	mov	r28, r24
     438:	0e 94 76 06 	call	0xcec	; 0xcec <SPI_disable>
     43c:	8c 2f       	mov	r24, r28
     43e:	cf 91       	pop	r28
     440:	08 95       	ret

00000442 <MCP2515_write>:
     442:	cf 93       	push	r28
     444:	df 93       	push	r29
     446:	c8 2f       	mov	r28, r24
     448:	d6 2f       	mov	r29, r22
     44a:	0e 94 74 06 	call	0xce8	; 0xce8 <SPI_enable>
     44e:	82 e0       	ldi	r24, 0x02	; 2
     450:	0e 94 6b 06 	call	0xcd6	; 0xcd6 <SPI_transmit>
     454:	8d 2f       	mov	r24, r29
     456:	0e 94 6b 06 	call	0xcd6	; 0xcd6 <SPI_transmit>
     45a:	8c 2f       	mov	r24, r28
     45c:	0e 94 6b 06 	call	0xcd6	; 0xcd6 <SPI_transmit>
     460:	0e 94 76 06 	call	0xcec	; 0xcec <SPI_disable>
     464:	df 91       	pop	r29
     466:	cf 91       	pop	r28
     468:	08 95       	ret

0000046a <MCP2515_rts>:
     46a:	cf 93       	push	r28
     46c:	c8 2f       	mov	r28, r24
     46e:	0e 94 74 06 	call	0xce8	; 0xce8 <SPI_enable>
     472:	c1 30       	cpi	r28, 0x01	; 1
     474:	41 f0       	breq	.+16     	; 0x486 <MCP2515_rts+0x1c>
     476:	18 f0       	brcs	.+6      	; 0x47e <MCP2515_rts+0x14>
     478:	c2 30       	cpi	r28, 0x02	; 2
     47a:	49 f0       	breq	.+18     	; 0x48e <MCP2515_rts+0x24>
     47c:	0b c0       	rjmp	.+22     	; 0x494 <MCP2515_rts+0x2a>
     47e:	81 e8       	ldi	r24, 0x81	; 129
     480:	0e 94 6b 06 	call	0xcd6	; 0xcd6 <SPI_transmit>
     484:	07 c0       	rjmp	.+14     	; 0x494 <MCP2515_rts+0x2a>
     486:	82 e8       	ldi	r24, 0x82	; 130
     488:	0e 94 6b 06 	call	0xcd6	; 0xcd6 <SPI_transmit>
     48c:	03 c0       	rjmp	.+6      	; 0x494 <MCP2515_rts+0x2a>
     48e:	84 e8       	ldi	r24, 0x84	; 132
     490:	0e 94 6b 06 	call	0xcd6	; 0xcd6 <SPI_transmit>
     494:	0e 94 76 06 	call	0xcec	; 0xcec <SPI_disable>
     498:	cf 91       	pop	r28
     49a:	08 95       	ret

0000049c <MCP2515_bit_modify>:
     49c:	1f 93       	push	r17
     49e:	cf 93       	push	r28
     4a0:	df 93       	push	r29
     4a2:	18 2f       	mov	r17, r24
     4a4:	d6 2f       	mov	r29, r22
     4a6:	c4 2f       	mov	r28, r20
     4a8:	0e 94 74 06 	call	0xce8	; 0xce8 <SPI_enable>
     4ac:	85 e0       	ldi	r24, 0x05	; 5
     4ae:	0e 94 6b 06 	call	0xcd6	; 0xcd6 <SPI_transmit>
     4b2:	81 2f       	mov	r24, r17
     4b4:	0e 94 6b 06 	call	0xcd6	; 0xcd6 <SPI_transmit>
     4b8:	8d 2f       	mov	r24, r29
     4ba:	0e 94 6b 06 	call	0xcd6	; 0xcd6 <SPI_transmit>
     4be:	8c 2f       	mov	r24, r28
     4c0:	0e 94 6b 06 	call	0xcd6	; 0xcd6 <SPI_transmit>
     4c4:	0e 94 76 06 	call	0xcec	; 0xcec <SPI_disable>
     4c8:	df 91       	pop	r29
     4ca:	cf 91       	pop	r28
     4cc:	1f 91       	pop	r17
     4ce:	08 95       	ret

000004d0 <MCP2515_reset>:
     4d0:	0e 94 74 06 	call	0xce8	; 0xce8 <SPI_enable>
     4d4:	80 ec       	ldi	r24, 0xC0	; 192
     4d6:	0e 94 6b 06 	call	0xcd6	; 0xcd6 <SPI_transmit>
     4da:	0e 94 76 06 	call	0xcec	; 0xcec <SPI_disable>
     4de:	08 95       	ret

000004e0 <menu_control_select>:
	};
	can_transmit(msg_setup);
}

void menu_control_select(uint8_t choice, uint8_t *setup){
	setup[1] = choice;
     4e0:	fb 01       	movw	r30, r22
     4e2:	81 83       	std	Z+1, r24	; 0x01
     4e4:	08 95       	ret

000004e6 <menu_joystick_select>:
}

void menu_joystick_select(uint8_t choice, uint8_t *setup){
	setup[2] = choice;
     4e6:	fb 01       	movw	r30, r22
     4e8:	82 83       	std	Z+2, r24	; 0x02
     4ea:	08 95       	ret

000004ec <menu_player_select>:
	m->name = name;
	
	return m;
}

void menu_player_select(uint8_t choice, uint8_t *setup){
     4ec:	0f 93       	push	r16
     4ee:	1f 93       	push	r17
     4f0:	cf 93       	push	r28
     4f2:	df 93       	push	r29
     4f4:	cd b7       	in	r28, 0x3d	; 61
     4f6:	de b7       	in	r29, 0x3e	; 62
     4f8:	2a 97       	sbiw	r28, 0x0a	; 10
     4fa:	0f b6       	in	r0, 0x3f	; 63
     4fc:	f8 94       	cli
     4fe:	de bf       	out	0x3e, r29	; 62
     500:	0f be       	out	0x3f, r0	; 63
     502:	cd bf       	out	0x3d, r28	; 61
     504:	fb 01       	movw	r30, r22
	setup[0] = choice+1;
     506:	21 e0       	ldi	r18, 0x01	; 1
     508:	28 0f       	add	r18, r24
     50a:	20 83       	st	Z, r18
	can_message_t msg_setup = (can_message_t){
     50c:	ae 01       	movw	r20, r28
     50e:	4f 5f       	subi	r20, 0xFF	; 255
     510:	5f 4f       	sbci	r21, 0xFF	; 255
     512:	8a e0       	ldi	r24, 0x0A	; 10
     514:	da 01       	movw	r26, r20
     516:	1d 92       	st	X+, r1
     518:	8a 95       	dec	r24
     51a:	e9 f7       	brne	.-6      	; 0x516 <__stack+0x17>
     51c:	31 81       	ldd	r19, Z+1	; 0x01
     51e:	42 81       	ldd	r20, Z+2	; 0x02
		.data = {	setup[0],  //Players
					setup[1],	//Control type
					setup[2],	//Controller
		},
	};
	can_transmit(msg_setup);
     520:	02 e0       	ldi	r16, 0x02	; 2
     522:	13 e0       	ldi	r17, 0x03	; 3
     524:	5e 81       	ldd	r21, Y+6	; 0x06
     526:	6f 81       	ldd	r22, Y+7	; 0x07
     528:	78 85       	ldd	r23, Y+8	; 0x08
     52a:	89 85       	ldd	r24, Y+9	; 0x09
     52c:	9a 85       	ldd	r25, Y+10	; 0x0a
     52e:	0e 94 45 01 	call	0x28a	; 0x28a <can_transmit>
}
     532:	2a 96       	adiw	r28, 0x0a	; 10
     534:	0f b6       	in	r0, 0x3f	; 63
     536:	f8 94       	cli
     538:	de bf       	out	0x3e, r29	; 62
     53a:	0f be       	out	0x3f, r0	; 63
     53c:	cd bf       	out	0x3d, r28	; 61
     53e:	df 91       	pop	r29
     540:	cf 91       	pop	r28
     542:	1f 91       	pop	r17
     544:	0f 91       	pop	r16
     546:	08 95       	ret

00000548 <menu_arrow_index>:

#include "menu.h"

uint8_t menu_arrow_index(menuitem* m){
	for(uint8_t i = 0; i < m->submenus.number; i++){
     548:	dc 01       	movw	r26, r24
     54a:	13 96       	adiw	r26, 0x03	; 3
     54c:	2c 91       	ld	r18, X
     54e:	13 97       	sbiw	r26, 0x03	; 3
     550:	22 23       	and	r18, r18
     552:	b9 f0       	breq	.+46     	; 0x582 <menu_arrow_index+0x3a>
		if(m->submenus.entries[i]->arrow_flag){
     554:	14 96       	adiw	r26, 0x04	; 4
     556:	ed 91       	ld	r30, X+
     558:	fc 91       	ld	r31, X
     55a:	15 97       	sbiw	r26, 0x05	; 5
     55c:	a0 81       	ld	r26, Z
     55e:	b1 81       	ldd	r27, Z+1	; 0x01
     560:	12 96       	adiw	r26, 0x02	; 2
     562:	8c 91       	ld	r24, X
     564:	81 11       	cpse	r24, r1
     566:	0f c0       	rjmp	.+30     	; 0x586 <menu_arrow_index+0x3e>
     568:	32 96       	adiw	r30, 0x02	; 2
     56a:	06 c0       	rjmp	.+12     	; 0x578 <menu_arrow_index+0x30>
     56c:	a1 91       	ld	r26, Z+
     56e:	b1 91       	ld	r27, Z+
     570:	12 96       	adiw	r26, 0x02	; 2
     572:	9c 91       	ld	r25, X
     574:	91 11       	cpse	r25, r1
     576:	08 c0       	rjmp	.+16     	; 0x588 <menu_arrow_index+0x40>

#include "menu.h"

uint8_t menu_arrow_index(menuitem* m){
	for(uint8_t i = 0; i < m->submenus.number; i++){
     578:	8f 5f       	subi	r24, 0xFF	; 255
     57a:	82 13       	cpse	r24, r18
     57c:	f7 cf       	rjmp	.-18     	; 0x56c <menu_arrow_index+0x24>
		if(m->submenus.entries[i]->arrow_flag){
			return i;
		}
	}
	return 0;
     57e:	80 e0       	ldi	r24, 0x00	; 0
     580:	08 95       	ret
     582:	80 e0       	ldi	r24, 0x00	; 0
     584:	08 95       	ret

#include "menu.h"

uint8_t menu_arrow_index(menuitem* m){
	for(uint8_t i = 0; i < m->submenus.number; i++){
     586:	80 e0       	ldi	r24, 0x00	; 0
		if(m->submenus.entries[i]->arrow_flag){
			return i;
		}
	}
	return 0;
}
     588:	08 95       	ret

0000058a <menu_right>:

menuitem* menu_right(menuitem* m, uint8_t *setup){
     58a:	0f 93       	push	r16
     58c:	1f 93       	push	r17
     58e:	cf 93       	push	r28
     590:	df 93       	push	r29
     592:	ec 01       	movw	r28, r24
     594:	8b 01       	movw	r16, r22
	uint8_t arrow_index = menu_arrow_index(m);
     596:	0e 94 a4 02 	call	0x548	; 0x548 <menu_arrow_index>
	if(m->submenus.entries[arrow_index]->submenus.number != 0){
     59a:	e8 2f       	mov	r30, r24
     59c:	f0 e0       	ldi	r31, 0x00	; 0
     59e:	ee 0f       	add	r30, r30
     5a0:	ff 1f       	adc	r31, r31
     5a2:	2c 81       	ldd	r18, Y+4	; 0x04
     5a4:	3d 81       	ldd	r19, Y+5	; 0x05
     5a6:	e2 0f       	add	r30, r18
     5a8:	f3 1f       	adc	r31, r19
     5aa:	01 90       	ld	r0, Z+
     5ac:	f0 81       	ld	r31, Z
     5ae:	e0 2d       	mov	r30, r0
     5b0:	93 81       	ldd	r25, Z+3	; 0x03
     5b2:	91 11       	cpse	r25, r1
     5b4:	08 c0       	rjmp	.+16     	; 0x5c6 <menu_right+0x3c>
		return m->submenus.entries[arrow_index];
	} else {
		m->submenus.entries[arrow_index]->fn(arrow_index, setup);
     5b6:	00 84       	ldd	r0, Z+8	; 0x08
     5b8:	f1 85       	ldd	r31, Z+9	; 0x09
     5ba:	e0 2d       	mov	r30, r0
     5bc:	b8 01       	movw	r22, r16
     5be:	09 95       	icall
		return m->parent;
     5c0:	8e 81       	ldd	r24, Y+6	; 0x06
     5c2:	9f 81       	ldd	r25, Y+7	; 0x07
     5c4:	02 c0       	rjmp	.+4      	; 0x5ca <menu_right+0x40>
}

menuitem* menu_right(menuitem* m, uint8_t *setup){
	uint8_t arrow_index = menu_arrow_index(m);
	if(m->submenus.entries[arrow_index]->submenus.number != 0){
		return m->submenus.entries[arrow_index];
     5c6:	8e 2f       	mov	r24, r30
     5c8:	9f 2f       	mov	r25, r31
	} else {
		m->submenus.entries[arrow_index]->fn(arrow_index, setup);
		return m->parent;
	}
}
     5ca:	df 91       	pop	r29
     5cc:	cf 91       	pop	r28
     5ce:	1f 91       	pop	r17
     5d0:	0f 91       	pop	r16
     5d2:	08 95       	ret

000005d4 <menu_up>:
	} else {
		return m;
	}
}

void menu_up(menuitem* m){
     5d4:	cf 93       	push	r28
     5d6:	df 93       	push	r29
     5d8:	ec 01       	movw	r28, r24
	uint8_t arrow_index = menu_arrow_index(m);
     5da:	0e 94 a4 02 	call	0x548	; 0x548 <menu_arrow_index>
	if(arrow_index > 0){
     5de:	88 23       	and	r24, r24
     5e0:	b1 f0       	breq	.+44     	; 0x60e <menu_up+0x3a>
		m->submenus.entries[arrow_index]->arrow_flag = 0;
     5e2:	90 e0       	ldi	r25, 0x00	; 0
     5e4:	88 0f       	add	r24, r24
     5e6:	99 1f       	adc	r25, r25
     5e8:	ec 81       	ldd	r30, Y+4	; 0x04
     5ea:	fd 81       	ldd	r31, Y+5	; 0x05
     5ec:	e8 0f       	add	r30, r24
     5ee:	f9 1f       	adc	r31, r25
     5f0:	01 90       	ld	r0, Z+
     5f2:	f0 81       	ld	r31, Z
     5f4:	e0 2d       	mov	r30, r0
     5f6:	12 82       	std	Z+2, r1	; 0x02
		m->submenus.entries[arrow_index-1]->arrow_flag = 1;
     5f8:	ec 81       	ldd	r30, Y+4	; 0x04
     5fa:	fd 81       	ldd	r31, Y+5	; 0x05
     5fc:	8e 0f       	add	r24, r30
     5fe:	9f 1f       	adc	r25, r31
     600:	fc 01       	movw	r30, r24
     602:	32 97       	sbiw	r30, 0x02	; 2
     604:	01 90       	ld	r0, Z+
     606:	f0 81       	ld	r31, Z
     608:	e0 2d       	mov	r30, r0
     60a:	81 e0       	ldi	r24, 0x01	; 1
     60c:	82 83       	std	Z+2, r24	; 0x02
	}
}
     60e:	df 91       	pop	r29
     610:	cf 91       	pop	r28
     612:	08 95       	ret

00000614 <menu_down>:

void menu_down(menuitem* m){
     614:	cf 93       	push	r28
     616:	df 93       	push	r29
     618:	ec 01       	movw	r28, r24
	uint8_t arrow_index = menu_arrow_index(m);
     61a:	0e 94 a4 02 	call	0x548	; 0x548 <menu_arrow_index>
	if(arrow_index < m->submenus.number - 1){
     61e:	48 2f       	mov	r20, r24
     620:	50 e0       	ldi	r21, 0x00	; 0
     622:	2b 81       	ldd	r18, Y+3	; 0x03
     624:	30 e0       	ldi	r19, 0x00	; 0
     626:	21 50       	subi	r18, 0x01	; 1
     628:	31 09       	sbc	r19, r1
     62a:	42 17       	cp	r20, r18
     62c:	53 07       	cpc	r21, r19
     62e:	ac f4       	brge	.+42     	; 0x65a <menu_down+0x46>
		m->submenus.entries[arrow_index]->arrow_flag = 0;
     630:	ca 01       	movw	r24, r20
     632:	88 0f       	add	r24, r24
     634:	99 1f       	adc	r25, r25
     636:	ec 81       	ldd	r30, Y+4	; 0x04
     638:	fd 81       	ldd	r31, Y+5	; 0x05
     63a:	e8 0f       	add	r30, r24
     63c:	f9 1f       	adc	r31, r25
     63e:	01 90       	ld	r0, Z+
     640:	f0 81       	ld	r31, Z
     642:	e0 2d       	mov	r30, r0
     644:	12 82       	std	Z+2, r1	; 0x02
		m->submenus.entries[arrow_index+1]->arrow_flag = 1;
     646:	2c 81       	ldd	r18, Y+4	; 0x04
     648:	3d 81       	ldd	r19, Y+5	; 0x05
     64a:	f9 01       	movw	r30, r18
     64c:	e8 0f       	add	r30, r24
     64e:	f9 1f       	adc	r31, r25
     650:	02 80       	ldd	r0, Z+2	; 0x02
     652:	f3 81       	ldd	r31, Z+3	; 0x03
     654:	e0 2d       	mov	r30, r0
     656:	81 e0       	ldi	r24, 0x01	; 1
     658:	82 83       	std	Z+2, r24	; 0x02
	}
}
     65a:	df 91       	pop	r29
     65c:	cf 91       	pop	r28
     65e:	08 95       	ret

00000660 <menu_new>:

menuitem* menu_new(char* name, uint8_t numSubmenus, void fn(uint8_t, uint8_t *)){
     660:	df 92       	push	r13
     662:	ef 92       	push	r14
     664:	ff 92       	push	r15
     666:	0f 93       	push	r16
     668:	1f 93       	push	r17
     66a:	cf 93       	push	r28
     66c:	df 93       	push	r29
     66e:	8c 01       	movw	r16, r24
     670:	d6 2e       	mov	r13, r22
     672:	7a 01       	movw	r14, r20
	menuitem* m = malloc(sizeof(menuitem));
     674:	8a e0       	ldi	r24, 0x0A	; 10
     676:	90 e0       	ldi	r25, 0x00	; 0
     678:	0e 94 22 07 	call	0xe44	; 0xe44 <malloc>
     67c:	ec 01       	movw	r28, r24
	memset(m, 0, sizeof(menuitem));
     67e:	8a e0       	ldi	r24, 0x0A	; 10
     680:	fe 01       	movw	r30, r28
     682:	11 92       	st	Z+, r1
     684:	8a 95       	dec	r24
     686:	e9 f7       	brne	.-6      	; 0x682 <menu_new+0x22>
	
	m->submenus.entries = malloc(sizeof(menuitem*) * numSubmenus);
     688:	8d 2d       	mov	r24, r13
     68a:	90 e0       	ldi	r25, 0x00	; 0
     68c:	88 0f       	add	r24, r24
     68e:	99 1f       	adc	r25, r25
     690:	0e 94 22 07 	call	0xe44	; 0xe44 <malloc>
     694:	9d 83       	std	Y+5, r25	; 0x05
     696:	8c 83       	std	Y+4, r24	; 0x04
	m->submenus.number = numSubmenus;
     698:	db 82       	std	Y+3, r13	; 0x03
	m->fn = fn;
     69a:	f9 86       	std	Y+9, r15	; 0x09
     69c:	e8 86       	std	Y+8, r14	; 0x08
	m->name = name;
     69e:	19 83       	std	Y+1, r17	; 0x01
     6a0:	08 83       	st	Y, r16
	
	return m;
}
     6a2:	ce 01       	movw	r24, r28
     6a4:	df 91       	pop	r29
     6a6:	cf 91       	pop	r28
     6a8:	1f 91       	pop	r17
     6aa:	0f 91       	pop	r16
     6ac:	ff 90       	pop	r15
     6ae:	ef 90       	pop	r14
     6b0:	df 90       	pop	r13
     6b2:	08 95       	ret

000006b4 <menu_assign_parents_stdArrow>:

menuitem* menu2_init(){
	
}

void menu_assign_parents_stdArrow(menuitem* m){
     6b4:	0f 93       	push	r16
     6b6:	1f 93       	push	r17
     6b8:	cf 93       	push	r28
     6ba:	df 93       	push	r29
     6bc:	ec 01       	movw	r28, r24
	for(uint8_t idx = 0; idx < m->submenus.number; idx++){
     6be:	8b 81       	ldd	r24, Y+3	; 0x03
     6c0:	88 23       	and	r24, r24
     6c2:	39 f1       	breq	.+78     	; 0x712 <menu_assign_parents_stdArrow+0x5e>
     6c4:	10 e0       	ldi	r17, 0x00	; 0
		m->submenus.entries[idx]->parent = m;
		if (idx == 0){
			m->submenus.entries[0]->arrow_flag = 1;	
     6c6:	01 e0       	ldi	r16, 0x01	; 1
	
}

void menu_assign_parents_stdArrow(menuitem* m){
	for(uint8_t idx = 0; idx < m->submenus.number; idx++){
		m->submenus.entries[idx]->parent = m;
     6c8:	81 2f       	mov	r24, r17
     6ca:	90 e0       	ldi	r25, 0x00	; 0
     6cc:	88 0f       	add	r24, r24
     6ce:	99 1f       	adc	r25, r25
     6d0:	ec 81       	ldd	r30, Y+4	; 0x04
     6d2:	fd 81       	ldd	r31, Y+5	; 0x05
     6d4:	e8 0f       	add	r30, r24
     6d6:	f9 1f       	adc	r31, r25
     6d8:	01 90       	ld	r0, Z+
     6da:	f0 81       	ld	r31, Z
     6dc:	e0 2d       	mov	r30, r0
     6de:	d7 83       	std	Z+7, r29	; 0x07
     6e0:	c6 83       	std	Z+6, r28	; 0x06
		if (idx == 0){
     6e2:	11 11       	cpse	r17, r1
     6e4:	06 c0       	rjmp	.+12     	; 0x6f2 <menu_assign_parents_stdArrow+0x3e>
			m->submenus.entries[0]->arrow_flag = 1;	
     6e6:	ec 81       	ldd	r30, Y+4	; 0x04
     6e8:	fd 81       	ldd	r31, Y+5	; 0x05
     6ea:	01 90       	ld	r0, Z+
     6ec:	f0 81       	ld	r31, Z
     6ee:	e0 2d       	mov	r30, r0
     6f0:	02 83       	std	Z+2, r16	; 0x02
		}
		if(m->submenus.number > 0){
     6f2:	2b 81       	ldd	r18, Y+3	; 0x03
     6f4:	22 23       	and	r18, r18
     6f6:	69 f0       	breq	.+26     	; 0x712 <menu_assign_parents_stdArrow+0x5e>
			menu_assign_parents_stdArrow(m->submenus.entries[idx]);
     6f8:	2c 81       	ldd	r18, Y+4	; 0x04
     6fa:	3d 81       	ldd	r19, Y+5	; 0x05
     6fc:	f9 01       	movw	r30, r18
     6fe:	e8 0f       	add	r30, r24
     700:	f9 1f       	adc	r31, r25
     702:	80 81       	ld	r24, Z
     704:	91 81       	ldd	r25, Z+1	; 0x01
     706:	0e 94 5a 03 	call	0x6b4	; 0x6b4 <menu_assign_parents_stdArrow>
menuitem* menu2_init(){
	
}

void menu_assign_parents_stdArrow(menuitem* m){
	for(uint8_t idx = 0; idx < m->submenus.number; idx++){
     70a:	1f 5f       	subi	r17, 0xFF	; 255
     70c:	8b 81       	ldd	r24, Y+3	; 0x03
     70e:	18 17       	cp	r17, r24
     710:	d8 f2       	brcs	.-74     	; 0x6c8 <menu_assign_parents_stdArrow+0x14>
		}
		if(m->submenus.number > 0){
			menu_assign_parents_stdArrow(m->submenus.entries[idx]);
		}
	}
}
     712:	df 91       	pop	r29
     714:	cf 91       	pop	r28
     716:	1f 91       	pop	r17
     718:	0f 91       	pop	r16
     71a:	08 95       	ret

0000071c <menu_init>:

void menu_joystick_select(uint8_t choice, uint8_t *setup){
	setup[2] = choice;
}

menuitem* menu_init(){
     71c:	0f 93       	push	r16
     71e:	1f 93       	push	r17
     720:	cf 93       	push	r28
     722:	df 93       	push	r29

	menuitem* main_menu = menu_new("Main menu", 2, NULL);
     724:	40 e0       	ldi	r20, 0x00	; 0
     726:	50 e0       	ldi	r21, 0x00	; 0
     728:	62 e0       	ldi	r22, 0x02	; 2
     72a:	89 e0       	ldi	r24, 0x09	; 9
     72c:	91 e0       	ldi	r25, 0x01	; 1
     72e:	0e 94 30 03 	call	0x660	; 0x660 <menu_new>
     732:	ec 01       	movw	r28, r24
		main_menu->submenus.entries[0] = menu_new("New game", 2, NULL);
     734:	0c 81       	ldd	r16, Y+4	; 0x04
     736:	1d 81       	ldd	r17, Y+5	; 0x05
     738:	40 e0       	ldi	r20, 0x00	; 0
     73a:	50 e0       	ldi	r21, 0x00	; 0
     73c:	62 e0       	ldi	r22, 0x02	; 2
     73e:	83 e1       	ldi	r24, 0x13	; 19
     740:	91 e0       	ldi	r25, 0x01	; 1
     742:	0e 94 30 03 	call	0x660	; 0x660 <menu_new>
     746:	f8 01       	movw	r30, r16
     748:	91 83       	std	Z+1, r25	; 0x01
     74a:	80 83       	st	Z, r24
			main_menu->submenus.entries[0]->submenus.entries[0] = menu_new("Single player", 0, &menu_player_select); 
     74c:	ec 81       	ldd	r30, Y+4	; 0x04
     74e:	fd 81       	ldd	r31, Y+5	; 0x05
     750:	01 90       	ld	r0, Z+
     752:	f0 81       	ld	r31, Z
     754:	e0 2d       	mov	r30, r0
     756:	04 81       	ldd	r16, Z+4	; 0x04
     758:	15 81       	ldd	r17, Z+5	; 0x05
     75a:	46 e7       	ldi	r20, 0x76	; 118
     75c:	52 e0       	ldi	r21, 0x02	; 2
     75e:	60 e0       	ldi	r22, 0x00	; 0
     760:	8c e1       	ldi	r24, 0x1C	; 28
     762:	91 e0       	ldi	r25, 0x01	; 1
     764:	0e 94 30 03 	call	0x660	; 0x660 <menu_new>
     768:	f8 01       	movw	r30, r16
     76a:	91 83       	std	Z+1, r25	; 0x01
     76c:	80 83       	st	Z, r24
			main_menu->submenus.entries[0]->submenus.entries[1] = menu_new("Double player", 0, &menu_player_select); 
     76e:	ec 81       	ldd	r30, Y+4	; 0x04
     770:	fd 81       	ldd	r31, Y+5	; 0x05
     772:	01 90       	ld	r0, Z+
     774:	f0 81       	ld	r31, Z
     776:	e0 2d       	mov	r30, r0
     778:	04 81       	ldd	r16, Z+4	; 0x04
     77a:	15 81       	ldd	r17, Z+5	; 0x05
     77c:	46 e7       	ldi	r20, 0x76	; 118
     77e:	52 e0       	ldi	r21, 0x02	; 2
     780:	60 e0       	ldi	r22, 0x00	; 0
     782:	8a e2       	ldi	r24, 0x2A	; 42
     784:	91 e0       	ldi	r25, 0x01	; 1
     786:	0e 94 30 03 	call	0x660	; 0x660 <menu_new>
     78a:	f8 01       	movw	r30, r16
     78c:	93 83       	std	Z+3, r25	; 0x03
     78e:	82 83       	std	Z+2, r24	; 0x02

		main_menu->submenus.entries[1] = menu_new("Options", 2, NULL);
     790:	0c 81       	ldd	r16, Y+4	; 0x04
     792:	1d 81       	ldd	r17, Y+5	; 0x05
     794:	40 e0       	ldi	r20, 0x00	; 0
     796:	50 e0       	ldi	r21, 0x00	; 0
     798:	62 e0       	ldi	r22, 0x02	; 2
     79a:	88 e3       	ldi	r24, 0x38	; 56
     79c:	91 e0       	ldi	r25, 0x01	; 1
     79e:	0e 94 30 03 	call	0x660	; 0x660 <menu_new>
     7a2:	f8 01       	movw	r30, r16
     7a4:	93 83       	std	Z+3, r25	; 0x03
     7a6:	82 83       	std	Z+2, r24	; 0x02
			main_menu->submenus.entries[1]->submenus.entries[0] = menu_new("Joystick type", 2, NULL);
     7a8:	ec 81       	ldd	r30, Y+4	; 0x04
     7aa:	fd 81       	ldd	r31, Y+5	; 0x05
     7ac:	02 80       	ldd	r0, Z+2	; 0x02
     7ae:	f3 81       	ldd	r31, Z+3	; 0x03
     7b0:	e0 2d       	mov	r30, r0
     7b2:	04 81       	ldd	r16, Z+4	; 0x04
     7b4:	15 81       	ldd	r17, Z+5	; 0x05
     7b6:	40 e0       	ldi	r20, 0x00	; 0
     7b8:	50 e0       	ldi	r21, 0x00	; 0
     7ba:	62 e0       	ldi	r22, 0x02	; 2
     7bc:	80 e4       	ldi	r24, 0x40	; 64
     7be:	91 e0       	ldi	r25, 0x01	; 1
     7c0:	0e 94 30 03 	call	0x660	; 0x660 <menu_new>
     7c4:	f8 01       	movw	r30, r16
     7c6:	91 83       	std	Z+1, r25	; 0x01
     7c8:	80 83       	st	Z, r24
				main_menu->submenus.entries[1]->submenus.entries[0]->submenus.entries[0] = menu_new("Dualshock3", 0, &menu_joystick_select);
     7ca:	ec 81       	ldd	r30, Y+4	; 0x04
     7cc:	fd 81       	ldd	r31, Y+5	; 0x05
     7ce:	02 80       	ldd	r0, Z+2	; 0x02
     7d0:	f3 81       	ldd	r31, Z+3	; 0x03
     7d2:	e0 2d       	mov	r30, r0
     7d4:	04 80       	ldd	r0, Z+4	; 0x04
     7d6:	f5 81       	ldd	r31, Z+5	; 0x05
     7d8:	e0 2d       	mov	r30, r0
     7da:	01 90       	ld	r0, Z+
     7dc:	f0 81       	ld	r31, Z
     7de:	e0 2d       	mov	r30, r0
     7e0:	04 81       	ldd	r16, Z+4	; 0x04
     7e2:	15 81       	ldd	r17, Z+5	; 0x05
     7e4:	43 e7       	ldi	r20, 0x73	; 115
     7e6:	52 e0       	ldi	r21, 0x02	; 2
     7e8:	60 e0       	ldi	r22, 0x00	; 0
     7ea:	8e e4       	ldi	r24, 0x4E	; 78
     7ec:	91 e0       	ldi	r25, 0x01	; 1
     7ee:	0e 94 30 03 	call	0x660	; 0x660 <menu_new>
     7f2:	f8 01       	movw	r30, r16
     7f4:	91 83       	std	Z+1, r25	; 0x01
     7f6:	80 83       	st	Z, r24
				main_menu->submenus.entries[1]->submenus.entries[0]->submenus.entries[1] = menu_new("Multifunction Card", 0, &menu_joystick_select); 
     7f8:	ec 81       	ldd	r30, Y+4	; 0x04
     7fa:	fd 81       	ldd	r31, Y+5	; 0x05
     7fc:	02 80       	ldd	r0, Z+2	; 0x02
     7fe:	f3 81       	ldd	r31, Z+3	; 0x03
     800:	e0 2d       	mov	r30, r0
     802:	04 80       	ldd	r0, Z+4	; 0x04
     804:	f5 81       	ldd	r31, Z+5	; 0x05
     806:	e0 2d       	mov	r30, r0
     808:	01 90       	ld	r0, Z+
     80a:	f0 81       	ld	r31, Z
     80c:	e0 2d       	mov	r30, r0
     80e:	04 81       	ldd	r16, Z+4	; 0x04
     810:	15 81       	ldd	r17, Z+5	; 0x05
     812:	43 e7       	ldi	r20, 0x73	; 115
     814:	52 e0       	ldi	r21, 0x02	; 2
     816:	60 e0       	ldi	r22, 0x00	; 0
     818:	89 e5       	ldi	r24, 0x59	; 89
     81a:	91 e0       	ldi	r25, 0x01	; 1
     81c:	0e 94 30 03 	call	0x660	; 0x660 <menu_new>
     820:	f8 01       	movw	r30, r16
     822:	93 83       	std	Z+3, r25	; 0x03
     824:	82 83       	std	Z+2, r24	; 0x02
			main_menu->submenus.entries[1]->submenus.entries[1] = menu_new("Method of control", 2, NULL);
     826:	ec 81       	ldd	r30, Y+4	; 0x04
     828:	fd 81       	ldd	r31, Y+5	; 0x05
     82a:	02 80       	ldd	r0, Z+2	; 0x02
     82c:	f3 81       	ldd	r31, Z+3	; 0x03
     82e:	e0 2d       	mov	r30, r0
     830:	04 81       	ldd	r16, Z+4	; 0x04
     832:	15 81       	ldd	r17, Z+5	; 0x05
     834:	40 e0       	ldi	r20, 0x00	; 0
     836:	50 e0       	ldi	r21, 0x00	; 0
     838:	62 e0       	ldi	r22, 0x02	; 2
     83a:	8c e6       	ldi	r24, 0x6C	; 108
     83c:	91 e0       	ldi	r25, 0x01	; 1
     83e:	0e 94 30 03 	call	0x660	; 0x660 <menu_new>
     842:	f8 01       	movw	r30, r16
     844:	93 83       	std	Z+3, r25	; 0x03
     846:	82 83       	std	Z+2, r24	; 0x02
				main_menu->submenus.entries[1]->submenus.entries[1]->submenus.entries[0] = menu_new("Speed", 0, &menu_control_select);
     848:	ec 81       	ldd	r30, Y+4	; 0x04
     84a:	fd 81       	ldd	r31, Y+5	; 0x05
     84c:	02 80       	ldd	r0, Z+2	; 0x02
     84e:	f3 81       	ldd	r31, Z+3	; 0x03
     850:	e0 2d       	mov	r30, r0
     852:	04 80       	ldd	r0, Z+4	; 0x04
     854:	f5 81       	ldd	r31, Z+5	; 0x05
     856:	e0 2d       	mov	r30, r0
     858:	02 80       	ldd	r0, Z+2	; 0x02
     85a:	f3 81       	ldd	r31, Z+3	; 0x03
     85c:	e0 2d       	mov	r30, r0
     85e:	04 81       	ldd	r16, Z+4	; 0x04
     860:	15 81       	ldd	r17, Z+5	; 0x05
     862:	40 e7       	ldi	r20, 0x70	; 112
     864:	52 e0       	ldi	r21, 0x02	; 2
     866:	60 e0       	ldi	r22, 0x00	; 0
     868:	8e e7       	ldi	r24, 0x7E	; 126
     86a:	91 e0       	ldi	r25, 0x01	; 1
     86c:	0e 94 30 03 	call	0x660	; 0x660 <menu_new>
     870:	f8 01       	movw	r30, r16
     872:	91 83       	std	Z+1, r25	; 0x01
     874:	80 83       	st	Z, r24
				main_menu->submenus.entries[1]->submenus.entries[1]->submenus.entries[1] = menu_new("Position", 0, &menu_control_select);
     876:	ec 81       	ldd	r30, Y+4	; 0x04
     878:	fd 81       	ldd	r31, Y+5	; 0x05
     87a:	02 80       	ldd	r0, Z+2	; 0x02
     87c:	f3 81       	ldd	r31, Z+3	; 0x03
     87e:	e0 2d       	mov	r30, r0
     880:	04 80       	ldd	r0, Z+4	; 0x04
     882:	f5 81       	ldd	r31, Z+5	; 0x05
     884:	e0 2d       	mov	r30, r0
     886:	02 80       	ldd	r0, Z+2	; 0x02
     888:	f3 81       	ldd	r31, Z+3	; 0x03
     88a:	e0 2d       	mov	r30, r0
     88c:	04 81       	ldd	r16, Z+4	; 0x04
     88e:	15 81       	ldd	r17, Z+5	; 0x05
     890:	40 e7       	ldi	r20, 0x70	; 112
     892:	52 e0       	ldi	r21, 0x02	; 2
     894:	60 e0       	ldi	r22, 0x00	; 0
     896:	84 e8       	ldi	r24, 0x84	; 132
     898:	91 e0       	ldi	r25, 0x01	; 1
     89a:	0e 94 30 03 	call	0x660	; 0x660 <menu_new>
     89e:	f8 01       	movw	r30, r16
     8a0:	93 83       	std	Z+3, r25	; 0x03
     8a2:	82 83       	std	Z+2, r24	; 0x02

	menu_assign_parents_stdArrow(main_menu);
     8a4:	ce 01       	movw	r24, r28
     8a6:	0e 94 5a 03 	call	0x6b4	; 0x6b4 <menu_assign_parents_stdArrow>
	return main_menu;
}
     8aa:	ce 01       	movw	r24, r28
     8ac:	df 91       	pop	r29
     8ae:	cf 91       	pop	r28
     8b0:	1f 91       	pop	r17
     8b2:	0f 91       	pop	r16
     8b4:	08 95       	ret

000008b6 <menu_print>:
	}
}


void menu_print(menuitem* m)
{
     8b6:	ff 92       	push	r15
     8b8:	0f 93       	push	r16
     8ba:	1f 93       	push	r17
     8bc:	cf 93       	push	r28
     8be:	df 93       	push	r29
     8c0:	ec 01       	movw	r28, r24
	OLED_pos(0,0);
     8c2:	60 e0       	ldi	r22, 0x00	; 0
     8c4:	80 e0       	ldi	r24, 0x00	; 0
     8c6:	0e 94 e1 05 	call	0xbc2	; 0xbc2 <OLED_pos>
	OLED_print_string(m->name);
     8ca:	88 81       	ld	r24, Y
     8cc:	99 81       	ldd	r25, Y+1	; 0x01
     8ce:	0e 94 37 06 	call	0xc6e	; 0xc6e <OLED_print_string>
	OLED_clear_rest_of_line();
     8d2:	0e 94 ea 05 	call	0xbd4	; 0xbd4 <OLED_clear_rest_of_line>
	for (uint8_t i = 0; i < m->submenus.number; i++){
     8d6:	8b 81       	ldd	r24, Y+3	; 0x03
     8d8:	88 23       	and	r24, r24
     8da:	89 f1       	breq	.+98     	; 0x93e <menu_print+0x88>
     8dc:	00 e0       	ldi	r16, 0x00	; 0
		OLED_pos(i+1,0);
     8de:	ff 24       	eor	r15, r15
     8e0:	f3 94       	inc	r15
     8e2:	f0 0e       	add	r15, r16
     8e4:	60 e0       	ldi	r22, 0x00	; 0
     8e6:	8f 2d       	mov	r24, r15
     8e8:	0e 94 e1 05 	call	0xbc2	; 0xbc2 <OLED_pos>
		if(m->submenus.entries[i]->arrow_flag){
     8ec:	10 e0       	ldi	r17, 0x00	; 0
     8ee:	00 0f       	add	r16, r16
     8f0:	11 1f       	adc	r17, r17
     8f2:	ec 81       	ldd	r30, Y+4	; 0x04
     8f4:	fd 81       	ldd	r31, Y+5	; 0x05
     8f6:	e0 0f       	add	r30, r16
     8f8:	f1 1f       	adc	r31, r17
     8fa:	01 90       	ld	r0, Z+
     8fc:	f0 81       	ld	r31, Z
     8fe:	e0 2d       	mov	r30, r0
     900:	82 81       	ldd	r24, Z+2	; 0x02
     902:	88 23       	and	r24, r24
     904:	29 f0       	breq	.+10     	; 0x910 <menu_print+0x5a>
			OLED_print_string("->");
     906:	8d e8       	ldi	r24, 0x8D	; 141
     908:	91 e0       	ldi	r25, 0x01	; 1
     90a:	0e 94 37 06 	call	0xc6e	; 0xc6e <OLED_print_string>
     90e:	04 c0       	rjmp	.+8      	; 0x918 <menu_print+0x62>
		}
		else{
			OLED_print_string("  ");
     910:	80 e9       	ldi	r24, 0x90	; 144
     912:	91 e0       	ldi	r25, 0x01	; 1
     914:	0e 94 37 06 	call	0xc6e	; 0xc6e <OLED_print_string>
		}		
		OLED_print_string(m->submenus.entries[i]->name);
     918:	2c 81       	ldd	r18, Y+4	; 0x04
     91a:	3d 81       	ldd	r19, Y+5	; 0x05
     91c:	f9 01       	movw	r30, r18
     91e:	e0 0f       	add	r30, r16
     920:	f1 1f       	adc	r31, r17
     922:	01 90       	ld	r0, Z+
     924:	f0 81       	ld	r31, Z
     926:	e0 2d       	mov	r30, r0
     928:	80 81       	ld	r24, Z
     92a:	91 81       	ldd	r25, Z+1	; 0x01
     92c:	0e 94 37 06 	call	0xc6e	; 0xc6e <OLED_print_string>
		OLED_clear_rest_of_line();
     930:	0e 94 ea 05 	call	0xbd4	; 0xbd4 <OLED_clear_rest_of_line>
void menu_print(menuitem* m)
{
	OLED_pos(0,0);
	OLED_print_string(m->name);
	OLED_clear_rest_of_line();
	for (uint8_t i = 0; i < m->submenus.number; i++){
     934:	8b 81       	ldd	r24, Y+3	; 0x03
     936:	f8 16       	cp	r15, r24
     938:	10 f4       	brcc	.+4      	; 0x93e <menu_print+0x88>
     93a:	0f 2d       	mov	r16, r15
     93c:	d0 cf       	rjmp	.-96     	; 0x8de <menu_print+0x28>
			OLED_print_string("  ");
		}		
		OLED_print_string(m->submenus.entries[i]->name);
		OLED_clear_rest_of_line();
	}
}
     93e:	df 91       	pop	r29
     940:	cf 91       	pop	r28
     942:	1f 91       	pop	r17
     944:	0f 91       	pop	r16
     946:	ff 90       	pop	r15
     948:	08 95       	ret

0000094a <menu_move>:

menuitem* menu_move(menuitem* m, uint8_t* prev_dir, uint8_t *setup)
{	
     94a:	ef 92       	push	r14
     94c:	ff 92       	push	r15
     94e:	0f 93       	push	r16
     950:	1f 93       	push	r17
     952:	cf 93       	push	r28
     954:	df 93       	push	r29
     956:	ec 01       	movw	r28, r24
     958:	8b 01       	movw	r16, r22
     95a:	7a 01       	movw	r14, r20
	switch(Joy_getDirection()){
     95c:	0e 94 60 05 	call	0xac0	; 0xac0 <Joy_getDirection>
     960:	81 30       	cpi	r24, 0x01	; 1
     962:	f1 f0       	breq	.+60     	; 0x9a0 <menu_move+0x56>
     964:	40 f1       	brcs	.+80     	; 0x9b6 <menu_move+0x6c>
     966:	82 30       	cpi	r24, 0x02	; 2
     968:	19 f0       	breq	.+6      	; 0x970 <menu_move+0x26>
     96a:	83 30       	cpi	r24, 0x03	; 3
     96c:	69 f0       	breq	.+26     	; 0x988 <menu_move+0x3e>
     96e:	33 c0       	rjmp	.+102    	; 0x9d6 <menu_move+0x8c>
		case UP:
			if (*prev_dir == NEUTRAL){
     970:	f8 01       	movw	r30, r16
     972:	80 81       	ld	r24, Z
     974:	84 30       	cpi	r24, 0x04	; 4
     976:	a9 f5       	brne	.+106    	; 0x9e2 <menu_move+0x98>
				*prev_dir = UP;
     978:	82 e0       	ldi	r24, 0x02	; 2
     97a:	80 83       	st	Z, r24
				menu_up(m);
     97c:	ce 01       	movw	r24, r28
     97e:	0e 94 ea 02 	call	0x5d4	; 0x5d4 <menu_up>
			}
			return m;
     982:	8c 2f       	mov	r24, r28
     984:	9d 2f       	mov	r25, r29
     986:	38 c0       	rjmp	.+112    	; 0x9f8 <menu_move+0xae>
			break;
		case DOWN:
			if (*prev_dir == NEUTRAL){
     988:	f8 01       	movw	r30, r16
     98a:	80 81       	ld	r24, Z
     98c:	84 30       	cpi	r24, 0x04	; 4
     98e:	61 f5       	brne	.+88     	; 0x9e8 <menu_move+0x9e>
				*prev_dir = DOWN;
     990:	83 e0       	ldi	r24, 0x03	; 3
     992:	80 83       	st	Z, r24
				menu_down(m);
     994:	ce 01       	movw	r24, r28
     996:	0e 94 0a 03 	call	0x614	; 0x614 <menu_down>
			}
			return m;
     99a:	8c 2f       	mov	r24, r28
     99c:	9d 2f       	mov	r25, r29
     99e:	2c c0       	rjmp	.+88     	; 0x9f8 <menu_move+0xae>
			break;
		case RIGHT:
			if (*prev_dir == NEUTRAL){
     9a0:	f8 01       	movw	r30, r16
     9a2:	80 81       	ld	r24, Z
     9a4:	84 30       	cpi	r24, 0x04	; 4
     9a6:	19 f5       	brne	.+70     	; 0x9ee <menu_move+0xa4>
				*prev_dir = RIGHT;
     9a8:	81 e0       	ldi	r24, 0x01	; 1
     9aa:	80 83       	st	Z, r24
				return menu_right(m, setup);
     9ac:	b7 01       	movw	r22, r14
     9ae:	ce 01       	movw	r24, r28
     9b0:	0e 94 c5 02 	call	0x58a	; 0x58a <menu_right>
     9b4:	21 c0       	rjmp	.+66     	; 0x9f8 <menu_move+0xae>
			}
			break;
		case LEFT:
			if (*prev_dir == NEUTRAL){
     9b6:	f8 01       	movw	r30, r16
     9b8:	80 81       	ld	r24, Z
     9ba:	84 30       	cpi	r24, 0x04	; 4
     9bc:	d9 f4       	brne	.+54     	; 0x9f4 <menu_move+0xaa>
				*prev_dir = LEFT;
     9be:	10 82       	st	Z, r1
		return m->parent;
	}
}

menuitem* menu_left(menuitem* m){
	if(m->parent){
     9c0:	2e 81       	ldd	r18, Y+6	; 0x06
     9c2:	3f 81       	ldd	r19, Y+7	; 0x07
     9c4:	21 15       	cp	r18, r1
     9c6:	31 05       	cpc	r19, r1
     9c8:	19 f0       	breq	.+6      	; 0x9d0 <menu_move+0x86>
		return m->parent;
     9ca:	82 2f       	mov	r24, r18
     9cc:	93 2f       	mov	r25, r19
     9ce:	14 c0       	rjmp	.+40     	; 0x9f8 <menu_move+0xae>
	} else {
		return m;
     9d0:	8c 2f       	mov	r24, r28
     9d2:	9d 2f       	mov	r25, r29
			}
			break;
		case LEFT:
			if (*prev_dir == NEUTRAL){
				*prev_dir = LEFT;
				return menu_left(m);
     9d4:	11 c0       	rjmp	.+34     	; 0x9f8 <menu_move+0xae>
			}
			break;
		default:
			*prev_dir = NEUTRAL;
     9d6:	84 e0       	ldi	r24, 0x04	; 4
     9d8:	f8 01       	movw	r30, r16
     9da:	80 83       	st	Z, r24
			
		break;
	}
	return m;
     9dc:	8c 2f       	mov	r24, r28
     9de:	9d 2f       	mov	r25, r29
			}
			break;
		default:
			*prev_dir = NEUTRAL;
			
		break;
     9e0:	0b c0       	rjmp	.+22     	; 0x9f8 <menu_move+0xae>
		case UP:
			if (*prev_dir == NEUTRAL){
				*prev_dir = UP;
				menu_up(m);
			}
			return m;
     9e2:	8c 2f       	mov	r24, r28
     9e4:	9d 2f       	mov	r25, r29
     9e6:	08 c0       	rjmp	.+16     	; 0x9f8 <menu_move+0xae>
		case DOWN:
			if (*prev_dir == NEUTRAL){
				*prev_dir = DOWN;
				menu_down(m);
			}
			return m;
     9e8:	8c 2f       	mov	r24, r28
     9ea:	9d 2f       	mov	r25, r29
     9ec:	05 c0       	rjmp	.+10     	; 0x9f8 <menu_move+0xae>
		default:
			*prev_dir = NEUTRAL;
			
		break;
	}
	return m;
     9ee:	8c 2f       	mov	r24, r28
     9f0:	9d 2f       	mov	r25, r29
     9f2:	02 c0       	rjmp	.+4      	; 0x9f8 <menu_move+0xae>
     9f4:	8c 2f       	mov	r24, r28
     9f6:	9d 2f       	mov	r25, r29
}
     9f8:	df 91       	pop	r29
     9fa:	cf 91       	pop	r28
     9fc:	1f 91       	pop	r17
     9fe:	0f 91       	pop	r16
     a00:	ff 90       	pop	r15
     a02:	ef 90       	pop	r14
     a04:	08 95       	ret

00000a06 <JOY_calibrate>:
     a06:	80 e0       	ldi	r24, 0x00	; 0
     a08:	0e 94 1d 01 	call	0x23a	; 0x23a <ADC_read>
     a0c:	80 93 9b 01 	sts	0x019B, r24
     a10:	81 e0       	ldi	r24, 0x01	; 1
     a12:	0e 94 1d 01 	call	0x23a	; 0x23a <ADC_read>
     a16:	80 93 9c 01 	sts	0x019C, r24
     a1a:	08 95       	ret

00000a1c <JOY_init>:
     a1c:	0e 94 15 01 	call	0x22a	; 0x22a <ADC_init>
     a20:	87 b3       	in	r24, 0x17	; 23
     a22:	88 7f       	andi	r24, 0xF8	; 248
     a24:	87 bb       	out	0x17, r24	; 23
     a26:	88 b3       	in	r24, 0x18	; 24
     a28:	87 60       	ori	r24, 0x07	; 7
     a2a:	88 bb       	out	0x18, r24	; 24
     a2c:	0e 94 03 05 	call	0xa06	; 0xa06 <JOY_calibrate>
     a30:	08 95       	ret

00000a32 <JOY_button>:
     a32:	81 30       	cpi	r24, 0x01	; 1
     a34:	91 05       	cpc	r25, r1
     a36:	41 f0       	breq	.+16     	; 0xa48 <JOY_button+0x16>
     a38:	82 30       	cpi	r24, 0x02	; 2
     a3a:	91 05       	cpc	r25, r1
     a3c:	49 f0       	breq	.+18     	; 0xa50 <JOY_button+0x1e>
     a3e:	89 2b       	or	r24, r25
     a40:	61 f4       	brne	.+24     	; 0xa5a <JOY_button+0x28>
     a42:	86 b3       	in	r24, 0x16	; 22
     a44:	81 70       	andi	r24, 0x01	; 1
     a46:	08 95       	ret
     a48:	86 b3       	in	r24, 0x16	; 22
     a4a:	86 95       	lsr	r24
     a4c:	81 70       	andi	r24, 0x01	; 1
     a4e:	08 95       	ret
     a50:	86 b3       	in	r24, 0x16	; 22
     a52:	82 fb       	bst	r24, 2
     a54:	88 27       	eor	r24, r24
     a56:	80 f9       	bld	r24, 0
     a58:	08 95       	ret
     a5a:	80 e0       	ldi	r24, 0x00	; 0
     a5c:	08 95       	ret

00000a5e <JOY_getPosition>:
     a5e:	0f 93       	push	r16
     a60:	1f 93       	push	r17
     a62:	cf 93       	push	r28
     a64:	df 93       	push	r29
     a66:	80 e0       	ldi	r24, 0x00	; 0
     a68:	0e 94 1d 01 	call	0x23a	; 0x23a <ADC_read>
     a6c:	28 2f       	mov	r18, r24
     a6e:	30 e0       	ldi	r19, 0x00	; 0
     a70:	80 91 9b 01 	lds	r24, 0x019B
     a74:	28 1b       	sub	r18, r24
     a76:	31 09       	sbc	r19, r1
     a78:	14 e6       	ldi	r17, 0x64	; 100
     a7a:	12 9f       	mul	r17, r18
     a7c:	c0 01       	movw	r24, r0
     a7e:	13 9f       	mul	r17, r19
     a80:	90 0d       	add	r25, r0
     a82:	11 24       	eor	r1, r1
     a84:	cf e7       	ldi	r28, 0x7F	; 127
     a86:	d0 e0       	ldi	r29, 0x00	; 0
     a88:	be 01       	movw	r22, r28
     a8a:	0e 94 fa 06 	call	0xdf4	; 0xdf4 <__divmodhi4>
     a8e:	06 2f       	mov	r16, r22
     a90:	81 e0       	ldi	r24, 0x01	; 1
     a92:	0e 94 1d 01 	call	0x23a	; 0x23a <ADC_read>
     a96:	48 2f       	mov	r20, r24
     a98:	50 e0       	ldi	r21, 0x00	; 0
     a9a:	80 91 9c 01 	lds	r24, 0x019C
     a9e:	48 1b       	sub	r20, r24
     aa0:	51 09       	sbc	r21, r1
     aa2:	14 9f       	mul	r17, r20
     aa4:	c0 01       	movw	r24, r0
     aa6:	15 9f       	mul	r17, r21
     aa8:	90 0d       	add	r25, r0
     aaa:	11 24       	eor	r1, r1
     aac:	be 01       	movw	r22, r28
     aae:	0e 94 fa 06 	call	0xdf4	; 0xdf4 <__divmodhi4>
     ab2:	96 2f       	mov	r25, r22
     ab4:	80 2f       	mov	r24, r16
     ab6:	df 91       	pop	r29
     ab8:	cf 91       	pop	r28
     aba:	1f 91       	pop	r17
     abc:	0f 91       	pop	r16
     abe:	08 95       	ret

00000ac0 <Joy_getDirection>:
     ac0:	0e 94 2f 05 	call	0xa5e	; 0xa5e <JOY_getPosition>
     ac4:	83 3d       	cpi	r24, 0xD3	; 211
     ac6:	44 f0       	brlt	.+16     	; 0xad8 <Joy_getDirection+0x18>
     ac8:	8e 32       	cpi	r24, 0x2E	; 46
     aca:	44 f4       	brge	.+16     	; 0xadc <Joy_getDirection+0x1c>
     acc:	9e 32       	cpi	r25, 0x2E	; 46
     ace:	44 f4       	brge	.+16     	; 0xae0 <Joy_getDirection+0x20>
     ad0:	93 3d       	cpi	r25, 0xD3	; 211
     ad2:	44 f4       	brge	.+16     	; 0xae4 <Joy_getDirection+0x24>
     ad4:	83 e0       	ldi	r24, 0x03	; 3
     ad6:	08 95       	ret
     ad8:	80 e0       	ldi	r24, 0x00	; 0
     ada:	08 95       	ret
     adc:	81 e0       	ldi	r24, 0x01	; 1
     ade:	08 95       	ret
     ae0:	82 e0       	ldi	r24, 0x02	; 2
     ae2:	08 95       	ret
     ae4:	84 e0       	ldi	r24, 0x04	; 4
     ae6:	08 95       	ret

00000ae8 <OLED_go_to_page>:
	*OLED_c = c; 
}

void OLED_go_to_page(char page)
{
	OLED_command(0xB0+page);
     ae8:	90 eb       	ldi	r25, 0xB0	; 176
     aea:	98 0f       	add	r25, r24
	OLED_home();
}	

void OLED_command(char c){
	volatile char* OLED_c = (char*) 0x1000;
	*OLED_c = c;
     aec:	90 93 00 10 	sts	0x1000, r25
}

void OLED_go_to_page(char page)
{
	OLED_command(0xB0+page);
	current_page = page;
     af0:	80 93 9d 01 	sts	0x019D, r24
     af4:	08 95       	ret

00000af6 <OLED_clear_page>:
}

void OLED_clear_page(char page){
	OLED_go_to_page(page);
     af6:	0e 94 74 05 	call	0xae8	; 0xae8 <OLED_go_to_page>
     afa:	80 e8       	ldi	r24, 0x80	; 128
     afc:	90 e0       	ldi	r25, 0x00	; 0
	*OLED_c = c;
}

void OLED_data(char c){
	volatile char* OLED_c = (char*) 0x1200;
	*OLED_c = c; 
     afe:	e0 e0       	ldi	r30, 0x00	; 0
     b00:	f2 e1       	ldi	r31, 0x12	; 18
     b02:	10 82       	st	Z, r1
     b04:	01 97       	sbiw	r24, 0x01	; 1
	current_page = page;
}

void OLED_clear_page(char page){
	OLED_go_to_page(page);
	for(int i = 0; i < 128; i++){
     b06:	00 97       	sbiw	r24, 0x00	; 0
     b08:	e1 f7       	brne	.-8      	; 0xb02 <OLED_clear_page+0xc>
		OLED_data(0x00);
	}
}
     b0a:	08 95       	ret

00000b0c <OLED_reset>:

void OLED_reset(){
     b0c:	cf 93       	push	r28
     b0e:	c0 e0       	ldi	r28, 0x00	; 0
	for (int i = 0; i < 8; i++){
		OLED_clear_page(i);
     b10:	8c 2f       	mov	r24, r28
     b12:	0e 94 7b 05 	call	0xaf6	; 0xaf6 <OLED_clear_page>
     b16:	cf 5f       	subi	r28, 0xFF	; 255
		OLED_data(0x00);
	}
}

void OLED_reset(){
	for (int i = 0; i < 8; i++){
     b18:	c8 30       	cpi	r28, 0x08	; 8
     b1a:	d1 f7       	brne	.-12     	; 0xb10 <OLED_reset+0x4>
		OLED_clear_page(i);
	}
}
     b1c:	cf 91       	pop	r28
     b1e:	08 95       	ret

00000b20 <OLED_go_to_col>:
}

void OLED_go_to_col(char column){
	char msb = column & 0b11110000;
	msb /= 0b10000;
	char lsb = column & 0b00001111;
     b20:	98 2f       	mov	r25, r24
     b22:	9f 70       	andi	r25, 0x0F	; 15
	OLED_go_to_col(column);
}

void OLED_go_to_col(char column){
	char msb = column & 0b11110000;
	msb /= 0b10000;
     b24:	28 2f       	mov	r18, r24
     b26:	22 95       	swap	r18
     b28:	2f 70       	andi	r18, 0x0F	; 15
	char lsb = column & 0b00001111;
	OLED_command(msb+0b00010000);
     b2a:	20 5f       	subi	r18, 0xF0	; 240
	OLED_home();
}	

void OLED_command(char c){
	volatile char* OLED_c = (char*) 0x1000;
	*OLED_c = c;
     b2c:	e0 e0       	ldi	r30, 0x00	; 0
     b2e:	f0 e1       	ldi	r31, 0x10	; 16
     b30:	20 83       	st	Z, r18
     b32:	90 83       	st	Z, r25
	char msb = column & 0b11110000;
	msb /= 0b10000;
	char lsb = column & 0b00001111;
	OLED_command(msb+0b00010000);
	OLED_command(lsb);
	current_column = column;
     b34:	80 93 9e 01 	sts	0x019E, r24
     b38:	08 95       	ret

00000b3a <OLED_home>:
		OLED_clear_page(i);
	}
}

void OLED_home(){
	OLED_go_to_page(0);
     b3a:	80 e0       	ldi	r24, 0x00	; 0
     b3c:	0e 94 74 05 	call	0xae8	; 0xae8 <OLED_go_to_page>
	OLED_go_to_col(0);
     b40:	80 e0       	ldi	r24, 0x00	; 0
     b42:	0e 94 90 05 	call	0xb20	; 0xb20 <OLED_go_to_col>
     b46:	08 95       	ret

00000b48 <OLED_init>:




void OLED_init(){
	MCUCR |= (1<<SRE);
     b48:	85 b7       	in	r24, 0x35	; 53
     b4a:	80 68       	ori	r24, 0x80	; 128
     b4c:	85 bf       	out	0x35, r24	; 53
	SFIOR |= (1<<XMM2);
     b4e:	80 b7       	in	r24, 0x30	; 48
     b50:	80 62       	ori	r24, 0x20	; 32
     b52:	80 bf       	out	0x30, r24	; 48
	OLED_home();
}	

void OLED_command(char c){
	volatile char* OLED_c = (char*) 0x1000;
	*OLED_c = c;
     b54:	e0 e0       	ldi	r30, 0x00	; 0
     b56:	f0 e1       	ldi	r31, 0x10	; 16
     b58:	8e ea       	ldi	r24, 0xAE	; 174
     b5a:	80 83       	st	Z, r24
     b5c:	81 ea       	ldi	r24, 0xA1	; 161
     b5e:	80 83       	st	Z, r24
     b60:	8a ed       	ldi	r24, 0xDA	; 218
     b62:	80 83       	st	Z, r24
     b64:	82 e1       	ldi	r24, 0x12	; 18
     b66:	80 83       	st	Z, r24
     b68:	88 ec       	ldi	r24, 0xC8	; 200
     b6a:	80 83       	st	Z, r24
     b6c:	88 ea       	ldi	r24, 0xA8	; 168
     b6e:	80 83       	st	Z, r24
     b70:	8f e3       	ldi	r24, 0x3F	; 63
     b72:	80 83       	st	Z, r24
     b74:	85 ed       	ldi	r24, 0xD5	; 213
     b76:	80 83       	st	Z, r24
     b78:	80 e8       	ldi	r24, 0x80	; 128
     b7a:	80 83       	st	Z, r24
     b7c:	81 e8       	ldi	r24, 0x81	; 129
     b7e:	80 83       	st	Z, r24
     b80:	80 e5       	ldi	r24, 0x50	; 80
     b82:	80 83       	st	Z, r24
     b84:	89 ed       	ldi	r24, 0xD9	; 217
     b86:	80 83       	st	Z, r24
     b88:	81 e2       	ldi	r24, 0x21	; 33
     b8a:	80 83       	st	Z, r24
     b8c:	80 e2       	ldi	r24, 0x20	; 32
     b8e:	80 83       	st	Z, r24
     b90:	82 e0       	ldi	r24, 0x02	; 2
     b92:	80 83       	st	Z, r24
     b94:	8b ed       	ldi	r24, 0xDB	; 219
     b96:	80 83       	st	Z, r24
     b98:	80 e3       	ldi	r24, 0x30	; 48
     b9a:	80 83       	st	Z, r24
     b9c:	8d ea       	ldi	r24, 0xAD	; 173
     b9e:	80 83       	st	Z, r24
     ba0:	10 82       	st	Z, r1
     ba2:	84 ea       	ldi	r24, 0xA4	; 164
     ba4:	80 83       	st	Z, r24
     ba6:	86 ea       	ldi	r24, 0xA6	; 166
     ba8:	80 83       	st	Z, r24
     baa:	8f ea       	ldi	r24, 0xAF	; 175
     bac:	80 83       	st	Z, r24
     bae:	80 eb       	ldi	r24, 0xB0	; 176
     bb0:	80 83       	st	Z, r24
     bb2:	10 82       	st	Z, r1
     bb4:	80 e1       	ldi	r24, 0x10	; 16
     bb6:	80 83       	st	Z, r24
	OLED_command(0xa6);    //set normal display
	OLED_command(0xaf);    // display on
	OLED_command(0xb0);		//Page start address
	OLED_command(0x00);		//Lower column start address
	OLED_command(0x10);		//Higher column start address.
	OLED_reset();
     bb8:	0e 94 86 05 	call	0xb0c	; 0xb0c <OLED_reset>
	OLED_home();
     bbc:	0e 94 9d 05 	call	0xb3a	; 0xb3a <OLED_home>
     bc0:	08 95       	ret

00000bc2 <OLED_pos>:
void OLED_home(){
	OLED_go_to_page(0);
	OLED_go_to_col(0);
}

void OLED_pos(char page, char column){
     bc2:	cf 93       	push	r28
     bc4:	c6 2f       	mov	r28, r22
	OLED_go_to_page(page);
     bc6:	0e 94 74 05 	call	0xae8	; 0xae8 <OLED_go_to_page>
	OLED_go_to_col(column);
     bca:	8c 2f       	mov	r24, r28
     bcc:	0e 94 90 05 	call	0xb20	; 0xb20 <OLED_go_to_col>
}
     bd0:	cf 91       	pop	r28
     bd2:	08 95       	ret

00000bd4 <OLED_clear_rest_of_line>:
	OLED_command(lsb);
	current_column = column;
}

void OLED_clear_rest_of_line(){
	for (int i = current_column; i < 128; i++ ){
     bd4:	80 91 9e 01 	lds	r24, 0x019E
     bd8:	90 e0       	ldi	r25, 0x00	; 0
     bda:	80 38       	cpi	r24, 0x80	; 128
     bdc:	91 05       	cpc	r25, r1
     bde:	3c f4       	brge	.+14     	; 0xbee <OLED_clear_rest_of_line+0x1a>
	*OLED_c = c;
}

void OLED_data(char c){
	volatile char* OLED_c = (char*) 0x1200;
	*OLED_c = c; 
     be0:	e0 e0       	ldi	r30, 0x00	; 0
     be2:	f2 e1       	ldi	r31, 0x12	; 18
     be4:	10 82       	st	Z, r1
	OLED_command(lsb);
	current_column = column;
}

void OLED_clear_rest_of_line(){
	for (int i = current_column; i < 128; i++ ){
     be6:	01 96       	adiw	r24, 0x01	; 1
     be8:	80 38       	cpi	r24, 0x80	; 128
     bea:	91 05       	cpc	r25, r1
     bec:	d9 f7       	brne	.-10     	; 0xbe4 <OLED_clear_rest_of_line+0x10>
		OLED_data(0);
	}
	current_column = 0;
     bee:	10 92 9e 01 	sts	0x019E, r1
     bf2:	08 95       	ret

00000bf4 <OLED_print>:
}

void OLED_print(char character){
	if (character == '\n'){
     bf4:	8a 30       	cpi	r24, 0x0A	; 10
     bf6:	41 f0       	breq	.+16     	; 0xc08 <OLED_print+0x14>
		OLED_clear_rest_of_line();	
	}
	else{
		for (int i = 0; i < char_width; i++){
     bf8:	90 91 08 01 	lds	r25, 0x0108
     bfc:	49 2f       	mov	r20, r25
     bfe:	50 e0       	ldi	r21, 0x00	; 0
     c00:	14 16       	cp	r1, r20
     c02:	15 06       	cpc	r1, r21
     c04:	24 f0       	brlt	.+8      	; 0xc0e <OLED_print+0x1a>
     c06:	25 c0       	rjmp	.+74     	; 0xc52 <OLED_print+0x5e>
	current_column = 0;
}

void OLED_print(char character){
	if (character == '\n'){
		OLED_clear_rest_of_line();	
     c08:	0e 94 ea 05 	call	0xbd4	; 0xbd4 <OLED_clear_rest_of_line>
     c0c:	08 95       	ret
	}
	else{
		for (int i = 0; i < char_width; i++){
     c0e:	20 e0       	ldi	r18, 0x00	; 0
     c10:	30 e0       	ldi	r19, 0x00	; 0
			char byte = pgm_read_byte((font + (character-32)*char_width + i));
     c12:	68 2f       	mov	r22, r24
     c14:	70 e0       	ldi	r23, 0x00	; 0
     c16:	60 52       	subi	r22, 0x20	; 32
     c18:	71 09       	sbc	r23, r1
	*OLED_c = c;
}

void OLED_data(char c){
	volatile char* OLED_c = (char*) 0x1200;
	*OLED_c = c; 
     c1a:	a0 e0       	ldi	r26, 0x00	; 0
     c1c:	b2 e1       	ldi	r27, 0x12	; 18
	if (character == '\n'){
		OLED_clear_rest_of_line();	
	}
	else{
		for (int i = 0; i < char_width; i++){
			char byte = pgm_read_byte((font + (character-32)*char_width + i));
     c1e:	46 9f       	mul	r20, r22
     c20:	f0 01       	movw	r30, r0
     c22:	47 9f       	mul	r20, r23
     c24:	f0 0d       	add	r31, r0
     c26:	56 9f       	mul	r21, r22
     c28:	f0 0d       	add	r31, r0
     c2a:	11 24       	eor	r1, r1
     c2c:	e2 0f       	add	r30, r18
     c2e:	f3 1f       	adc	r31, r19
     c30:	80 91 06 01 	lds	r24, 0x0106
     c34:	90 91 07 01 	lds	r25, 0x0107
     c38:	e8 0f       	add	r30, r24
     c3a:	f9 1f       	adc	r31, r25
     c3c:	e4 91       	lpm	r30, Z
	*OLED_c = c;
}

void OLED_data(char c){
	volatile char* OLED_c = (char*) 0x1200;
	*OLED_c = c; 
     c3e:	ec 93       	st	X, r30
void OLED_print(char character){
	if (character == '\n'){
		OLED_clear_rest_of_line();	
	}
	else{
		for (int i = 0; i < char_width; i++){
     c40:	2f 5f       	subi	r18, 0xFF	; 255
     c42:	3f 4f       	sbci	r19, 0xFF	; 255
     c44:	90 91 08 01 	lds	r25, 0x0108
     c48:	49 2f       	mov	r20, r25
     c4a:	50 e0       	ldi	r21, 0x00	; 0
     c4c:	24 17       	cp	r18, r20
     c4e:	35 07       	cpc	r19, r21
     c50:	34 f3       	brlt	.-52     	; 0xc1e <OLED_print+0x2a>
			char byte = pgm_read_byte((font + (character-32)*char_width + i));
			OLED_data(byte);
		}
		if ((current_column+char_width)>127){
     c52:	80 91 9e 01 	lds	r24, 0x019E
     c56:	48 0f       	add	r20, r24
     c58:	51 1d       	adc	r21, r1
     c5a:	40 38       	cpi	r20, 0x80	; 128
     c5c:	51 05       	cpc	r21, r1
     c5e:	1c f0       	brlt	.+6      	; 0xc66 <OLED_print+0x72>
			current_column = 0;
     c60:	10 92 9e 01 	sts	0x019E, r1
     c64:	08 95       	ret
		}
		else{
			current_column += char_width;
     c66:	98 0f       	add	r25, r24
     c68:	90 93 9e 01 	sts	0x019E, r25
     c6c:	08 95       	ret

00000c6e <OLED_print_string>:
		}
	}
}

void OLED_print_string(char string[]){
     c6e:	ef 92       	push	r14
     c70:	ff 92       	push	r15
     c72:	0f 93       	push	r16
     c74:	1f 93       	push	r17
     c76:	cf 93       	push	r28
     c78:	df 93       	push	r29
     c7a:	8c 01       	movw	r16, r24
     c7c:	7c 01       	movw	r14, r24
	for(int i = 0; i < strlen(string); i++){
     c7e:	c0 e0       	ldi	r28, 0x00	; 0
     c80:	d0 e0       	ldi	r29, 0x00	; 0
     c82:	06 c0       	rjmp	.+12     	; 0xc90 <OLED_print_string+0x22>
		OLED_print(string[i]);
     c84:	f7 01       	movw	r30, r14
     c86:	81 91       	ld	r24, Z+
     c88:	7f 01       	movw	r14, r30
     c8a:	0e 94 fa 05 	call	0xbf4	; 0xbf4 <OLED_print>
		}
	}
}

void OLED_print_string(char string[]){
	for(int i = 0; i < strlen(string); i++){
     c8e:	21 96       	adiw	r28, 0x01	; 1
     c90:	f8 01       	movw	r30, r16
     c92:	01 90       	ld	r0, Z+
     c94:	00 20       	and	r0, r0
     c96:	e9 f7       	brne	.-6      	; 0xc92 <OLED_print_string+0x24>
     c98:	31 97       	sbiw	r30, 0x01	; 1
     c9a:	e0 1b       	sub	r30, r16
     c9c:	f1 0b       	sbc	r31, r17
     c9e:	ce 17       	cp	r28, r30
     ca0:	df 07       	cpc	r29, r31
     ca2:	80 f3       	brcs	.-32     	; 0xc84 <OLED_print_string+0x16>
		OLED_print(string[i]);
	}
}
     ca4:	df 91       	pop	r29
     ca6:	cf 91       	pop	r28
     ca8:	1f 91       	pop	r17
     caa:	0f 91       	pop	r16
     cac:	ff 90       	pop	r15
     cae:	ef 90       	pop	r14
     cb0:	08 95       	ret

00000cb2 <print_singleplayer>:

void print_singleplayer(){
	OLED_home();
     cb2:	0e 94 9d 05 	call	0xb3a	; 0xb3a <OLED_home>
	OLED_print_string("Single player");
     cb6:	8c e1       	ldi	r24, 0x1C	; 28
     cb8:	91 e0       	ldi	r25, 0x01	; 1
     cba:	0e 94 37 06 	call	0xc6e	; 0xc6e <OLED_print_string>
	OLED_clear_rest_of_line();
     cbe:	0e 94 ea 05 	call	0xbd4	; 0xbd4 <OLED_clear_rest_of_line>
	OLED_print_string("Time: ");
     cc2:	83 e9       	ldi	r24, 0x93	; 147
     cc4:	91 e0       	ldi	r25, 0x01	; 1
     cc6:	0e 94 37 06 	call	0xc6e	; 0xc6e <OLED_print_string>
     cca:	08 95       	ret

00000ccc <SPI_init>:
     ccc:	80 eb       	ldi	r24, 0xB0	; 176
     cce:	87 bb       	out	0x17, r24	; 23
     cd0:	81 e5       	ldi	r24, 0x51	; 81
     cd2:	8d b9       	out	0x0d, r24	; 13
     cd4:	08 95       	ret

00000cd6 <SPI_transmit>:
     cd6:	8f b9       	out	0x0f, r24	; 15
     cd8:	77 9b       	sbis	0x0e, 7	; 14
     cda:	fe cf       	rjmp	.-4      	; 0xcd8 <SPI_transmit+0x2>
     cdc:	08 95       	ret

00000cde <SPI_receive>:
     cde:	80 e0       	ldi	r24, 0x00	; 0
     ce0:	0e 94 6b 06 	call	0xcd6	; 0xcd6 <SPI_transmit>
     ce4:	8f b1       	in	r24, 0x0f	; 15
     ce6:	08 95       	ret

00000ce8 <SPI_enable>:
     ce8:	c4 98       	cbi	0x18, 4	; 24
     cea:	08 95       	ret

00000cec <SPI_disable>:
     cec:	c4 9a       	sbi	0x18, 4	; 24
     cee:	08 95       	ret

00000cf0 <main>:
#include "definations.h"



int main(void)
{	
     cf0:	cf 93       	push	r28
     cf2:	df 93       	push	r29
     cf4:	cd b7       	in	r28, 0x3d	; 61
     cf6:	de b7       	in	r29, 0x3e	; 62
     cf8:	68 97       	sbiw	r28, 0x18	; 24
     cfa:	0f b6       	in	r0, 0x3f	; 63
     cfc:	f8 94       	cli
     cfe:	de bf       	out	0x3e, r29	; 62
     d00:	0f be       	out	0x3f, r0	; 63
     d02:	cd bf       	out	0x3d, r28	; 61
	int ubrr = (F_CPU/16/9600)-1;
	UART_Init(ubrr);
     d04:	8f e1       	ldi	r24, 0x1F	; 31
     d06:	90 e0       	ldi	r25, 0x00	; 0
     d08:	0e 94 ef 06 	call	0xdde	; 0xdde <UART_Init>
	
	can_init(MODE_NORMAL);
     d0c:	80 e0       	ldi	r24, 0x00	; 0
     d0e:	0e 94 29 01 	call	0x252	; 0x252 <can_init>
	JOY_init();
     d12:	0e 94 0e 05 	call	0xa1c	; 0xa1c <JOY_init>
	OLED_init();
     d16:	0e 94 a4 05 	call	0xb48	; 0xb48 <OLED_init>
	menuitem* current_menu = menu_init();
     d1a:	0e 94 8e 03 	call	0x71c	; 0x71c <menu_init>
     d1e:	7c 01       	movw	r14, r24
	
	JOY_position_t pos;
	
	uint8_t settings[] = {	MAINMENU,  // Game mode
     d20:	19 82       	std	Y+1, r1	; 0x01
     d22:	1a 82       	std	Y+2, r1	; 0x02
     d24:	81 e0       	ldi	r24, 0x01	; 1
     d26:	8b 83       	std	Y+3, r24	; 0x03
						MULTICARD  // Joystick type
	};
	
	uint8_t time[] = { 0,0,0 };	
		
	uint8_t prev_dir = NEUTRAL;
     d28:	94 e0       	ldi	r25, 0x04	; 4
     d2a:	9c 83       	std	Y+4, r25	; 0x04
	
	can_message_t msg_received;

	can_message_t msg_commands = (can_message_t){
     d2c:	fe 01       	movw	r30, r28
     d2e:	3f 96       	adiw	r30, 0x0f	; 15
     d30:	9a e0       	ldi	r25, 0x0A	; 10
     d32:	df 01       	movw	r26, r30
     d34:	1d 92       	st	X+, r1
     d36:	9a 95       	dec	r25
     d38:	e9 f7       	brne	.-6      	; 0xd34 <main+0x44>
     d3a:	8f 87       	std	Y+15, r24	; 0x0f
     d3c:	87 e0       	ldi	r24, 0x07	; 7
     d3e:	88 8b       	std	Y+16, r24	; 0x10
	};
	

	
	while(1){
		msg_received = can_receive();
     d40:	ce 01       	movw	r24, r28
     d42:	05 96       	adiw	r24, 0x05	; 5
     d44:	0e 94 9f 01 	call	0x33e	; 0x33e <can_receive>
			time[1] = msg_received.data[1];
			time[2] = msg_received.data[2];
		}
		
		
		switch (settings[0]){
     d48:	89 81       	ldd	r24, Y+1	; 0x01
     d4a:	88 23       	and	r24, r24
     d4c:	19 f0       	breq	.+6      	; 0xd54 <main+0x64>
     d4e:	81 30       	cpi	r24, 0x01	; 1
     d50:	79 f0       	breq	.+30     	; 0xd70 <main+0x80>
     d52:	10 c0       	rjmp	.+32     	; 0xd74 <main+0x84>
			case MAINMENU:
				menu_print(current_menu);
     d54:	c7 01       	movw	r24, r14
     d56:	0e 94 5b 04 	call	0x8b6	; 0x8b6 <menu_print>
				current_menu = menu_move(current_menu, &prev_dir, settings);
     d5a:	ae 01       	movw	r20, r28
     d5c:	4f 5f       	subi	r20, 0xFF	; 255
     d5e:	5f 4f       	sbci	r21, 0xFF	; 255
     d60:	be 01       	movw	r22, r28
     d62:	6c 5f       	subi	r22, 0xFC	; 252
     d64:	7f 4f       	sbci	r23, 0xFF	; 255
     d66:	c7 01       	movw	r24, r14
     d68:	0e 94 a5 04 	call	0x94a	; 0x94a <menu_move>
     d6c:	7c 01       	movw	r14, r24
				//printf("Setup: %d %d %d \n", settings[0], settings[1], settings[2]);
				break;
     d6e:	02 c0       	rjmp	.+4      	; 0xd74 <main+0x84>
			case SINGLEPLAYERMENU:
				print_singleplayer();
     d70:	0e 94 59 06 	call	0xcb2	; 0xcb2 <print_singleplayer>
			case DOUBLEPLAYERMENU:
				//Stuff to print
				break;
		}
		
		if (settings[0] == SINGLEPLAYERMENU || settings[0] == DOUBLEPLAYERMENU){
     d74:	89 81       	ldd	r24, Y+1	; 0x01
     d76:	81 50       	subi	r24, 0x01	; 1
     d78:	82 30       	cpi	r24, 0x02	; 2
     d7a:	10 f7       	brcc	.-60     	; 0xd40 <main+0x50>
			switch (settings[2]) {
     d7c:	8b 81       	ldd	r24, Y+3	; 0x03
     d7e:	81 30       	cpi	r24, 0x01	; 1
     d80:	f9 f6       	brne	.-66     	; 0xd40 <main+0x50>
				case DUALSHOCK3:
				break;
				case MULTICARD:
				pos = JOY_getPosition();
     d82:	0e 94 2f 05 	call	0xa5e	; 0xa5e <JOY_getPosition>
				msg_commands.data[0] = pos.x;
     d86:	89 8b       	std	Y+17, r24	; 0x11
				msg_commands.data[1] = pos.y;
     d88:	9a 8b       	std	Y+18, r25	; 0x12
				msg_commands.data[2] = JOY_button(0);
     d8a:	80 e0       	ldi	r24, 0x00	; 0
     d8c:	90 e0       	ldi	r25, 0x00	; 0
     d8e:	0e 94 19 05 	call	0xa32	; 0xa32 <JOY_button>
     d92:	8b 8b       	std	Y+19, r24	; 0x13
				msg_commands.data[3] = JOY_button(1);
     d94:	81 e0       	ldi	r24, 0x01	; 1
     d96:	90 e0       	ldi	r25, 0x00	; 0
     d98:	0e 94 19 05 	call	0xa32	; 0xa32 <JOY_button>
     d9c:	8c 8b       	std	Y+20, r24	; 0x14
				msg_commands.data[4] = JOY_button(2);
     d9e:	82 e0       	ldi	r24, 0x02	; 2
     da0:	90 e0       	ldi	r25, 0x00	; 0
     da2:	0e 94 19 05 	call	0xa32	; 0xa32 <JOY_button>
     da6:	8d 8b       	std	Y+21, r24	; 0x15
				msg_commands.data[5] = ADC_read(2);
     da8:	82 e0       	ldi	r24, 0x02	; 2
     daa:	0e 94 1d 01 	call	0x23a	; 0x23a <ADC_read>
     dae:	8e 8b       	std	Y+22, r24	; 0x16
				msg_commands.data[6] = ADC_read(3);
     db0:	83 e0       	ldi	r24, 0x03	; 3
     db2:	0e 94 1d 01 	call	0x23a	; 0x23a <ADC_read>
				can_transmit(msg_commands);				
     db6:	0f 85       	ldd	r16, Y+15	; 0x0f
     db8:	18 89       	ldd	r17, Y+16	; 0x10
     dba:	29 89       	ldd	r18, Y+17	; 0x11
     dbc:	3a 89       	ldd	r19, Y+18	; 0x12
     dbe:	4b 89       	ldd	r20, Y+19	; 0x13
     dc0:	5c 89       	ldd	r21, Y+20	; 0x14
     dc2:	6d 89       	ldd	r22, Y+21	; 0x15
     dc4:	7e 89       	ldd	r23, Y+22	; 0x16
     dc6:	98 8d       	ldd	r25, Y+24	; 0x18
     dc8:	0e 94 45 01 	call	0x28a	; 0x28a <can_transmit>
				break;
     dcc:	b9 cf       	rjmp	.-142    	; 0xd40 <main+0x50>

00000dce <UART_Transmit>:
     dce:	5d 9b       	sbis	0x0b, 5	; 11
     dd0:	fe cf       	rjmp	.-4      	; 0xdce <UART_Transmit>
     dd2:	8c b9       	out	0x0c, r24	; 12
     dd4:	08 95       	ret

00000dd6 <UART_Receive>:
     dd6:	5f 9b       	sbis	0x0b, 7	; 11
     dd8:	fe cf       	rjmp	.-4      	; 0xdd6 <UART_Receive>
     dda:	8c b1       	in	r24, 0x0c	; 12
     ddc:	08 95       	ret

00000dde <UART_Init>:
     dde:	90 bd       	out	0x20, r25	; 32
     de0:	89 b9       	out	0x09, r24	; 9
     de2:	88 e1       	ldi	r24, 0x18	; 24
     de4:	8a b9       	out	0x0a, r24	; 10
     de6:	6b ee       	ldi	r22, 0xEB	; 235
     de8:	76 e0       	ldi	r23, 0x06	; 6
     dea:	87 ee       	ldi	r24, 0xE7	; 231
     dec:	96 e0       	ldi	r25, 0x06	; 6
     dee:	0e 94 49 08 	call	0x1092	; 0x1092 <fdevopen>
     df2:	08 95       	ret

00000df4 <__divmodhi4>:
     df4:	97 fb       	bst	r25, 7
     df6:	07 2e       	mov	r0, r23
     df8:	16 f4       	brtc	.+4      	; 0xdfe <__divmodhi4+0xa>
     dfa:	00 94       	com	r0
     dfc:	07 d0       	rcall	.+14     	; 0xe0c <__divmodhi4_neg1>
     dfe:	77 fd       	sbrc	r23, 7
     e00:	09 d0       	rcall	.+18     	; 0xe14 <__divmodhi4_neg2>
     e02:	0e 94 0e 07 	call	0xe1c	; 0xe1c <__udivmodhi4>
     e06:	07 fc       	sbrc	r0, 7
     e08:	05 d0       	rcall	.+10     	; 0xe14 <__divmodhi4_neg2>
     e0a:	3e f4       	brtc	.+14     	; 0xe1a <__divmodhi4_exit>

00000e0c <__divmodhi4_neg1>:
     e0c:	90 95       	com	r25
     e0e:	81 95       	neg	r24
     e10:	9f 4f       	sbci	r25, 0xFF	; 255
     e12:	08 95       	ret

00000e14 <__divmodhi4_neg2>:
     e14:	70 95       	com	r23
     e16:	61 95       	neg	r22
     e18:	7f 4f       	sbci	r23, 0xFF	; 255

00000e1a <__divmodhi4_exit>:
     e1a:	08 95       	ret

00000e1c <__udivmodhi4>:
     e1c:	aa 1b       	sub	r26, r26
     e1e:	bb 1b       	sub	r27, r27
     e20:	51 e1       	ldi	r21, 0x11	; 17
     e22:	07 c0       	rjmp	.+14     	; 0xe32 <__udivmodhi4_ep>

00000e24 <__udivmodhi4_loop>:
     e24:	aa 1f       	adc	r26, r26
     e26:	bb 1f       	adc	r27, r27
     e28:	a6 17       	cp	r26, r22
     e2a:	b7 07       	cpc	r27, r23
     e2c:	10 f0       	brcs	.+4      	; 0xe32 <__udivmodhi4_ep>
     e2e:	a6 1b       	sub	r26, r22
     e30:	b7 0b       	sbc	r27, r23

00000e32 <__udivmodhi4_ep>:
     e32:	88 1f       	adc	r24, r24
     e34:	99 1f       	adc	r25, r25
     e36:	5a 95       	dec	r21
     e38:	a9 f7       	brne	.-22     	; 0xe24 <__udivmodhi4_loop>
     e3a:	80 95       	com	r24
     e3c:	90 95       	com	r25
     e3e:	bc 01       	movw	r22, r24
     e40:	cd 01       	movw	r24, r26
     e42:	08 95       	ret

00000e44 <malloc>:
     e44:	cf 93       	push	r28
     e46:	df 93       	push	r29
     e48:	82 30       	cpi	r24, 0x02	; 2
     e4a:	91 05       	cpc	r25, r1
     e4c:	10 f4       	brcc	.+4      	; 0xe52 <malloc+0xe>
     e4e:	82 e0       	ldi	r24, 0x02	; 2
     e50:	90 e0       	ldi	r25, 0x00	; 0
     e52:	e0 91 a1 01 	lds	r30, 0x01A1
     e56:	f0 91 a2 01 	lds	r31, 0x01A2
     e5a:	20 e0       	ldi	r18, 0x00	; 0
     e5c:	30 e0       	ldi	r19, 0x00	; 0
     e5e:	a0 e0       	ldi	r26, 0x00	; 0
     e60:	b0 e0       	ldi	r27, 0x00	; 0
     e62:	30 97       	sbiw	r30, 0x00	; 0
     e64:	39 f1       	breq	.+78     	; 0xeb4 <malloc+0x70>
     e66:	40 81       	ld	r20, Z
     e68:	51 81       	ldd	r21, Z+1	; 0x01
     e6a:	48 17       	cp	r20, r24
     e6c:	59 07       	cpc	r21, r25
     e6e:	b8 f0       	brcs	.+46     	; 0xe9e <malloc+0x5a>
     e70:	48 17       	cp	r20, r24
     e72:	59 07       	cpc	r21, r25
     e74:	71 f4       	brne	.+28     	; 0xe92 <malloc+0x4e>
     e76:	82 81       	ldd	r24, Z+2	; 0x02
     e78:	93 81       	ldd	r25, Z+3	; 0x03
     e7a:	10 97       	sbiw	r26, 0x00	; 0
     e7c:	29 f0       	breq	.+10     	; 0xe88 <malloc+0x44>
     e7e:	13 96       	adiw	r26, 0x03	; 3
     e80:	9c 93       	st	X, r25
     e82:	8e 93       	st	-X, r24
     e84:	12 97       	sbiw	r26, 0x02	; 2
     e86:	2c c0       	rjmp	.+88     	; 0xee0 <malloc+0x9c>
     e88:	90 93 a2 01 	sts	0x01A2, r25
     e8c:	80 93 a1 01 	sts	0x01A1, r24
     e90:	27 c0       	rjmp	.+78     	; 0xee0 <malloc+0x9c>
     e92:	21 15       	cp	r18, r1
     e94:	31 05       	cpc	r19, r1
     e96:	31 f0       	breq	.+12     	; 0xea4 <malloc+0x60>
     e98:	42 17       	cp	r20, r18
     e9a:	53 07       	cpc	r21, r19
     e9c:	18 f0       	brcs	.+6      	; 0xea4 <malloc+0x60>
     e9e:	a9 01       	movw	r20, r18
     ea0:	db 01       	movw	r26, r22
     ea2:	01 c0       	rjmp	.+2      	; 0xea6 <malloc+0x62>
     ea4:	ef 01       	movw	r28, r30
     ea6:	9a 01       	movw	r18, r20
     ea8:	bd 01       	movw	r22, r26
     eaa:	df 01       	movw	r26, r30
     eac:	02 80       	ldd	r0, Z+2	; 0x02
     eae:	f3 81       	ldd	r31, Z+3	; 0x03
     eb0:	e0 2d       	mov	r30, r0
     eb2:	d7 cf       	rjmp	.-82     	; 0xe62 <malloc+0x1e>
     eb4:	21 15       	cp	r18, r1
     eb6:	31 05       	cpc	r19, r1
     eb8:	f9 f0       	breq	.+62     	; 0xef8 <malloc+0xb4>
     eba:	28 1b       	sub	r18, r24
     ebc:	39 0b       	sbc	r19, r25
     ebe:	24 30       	cpi	r18, 0x04	; 4
     ec0:	31 05       	cpc	r19, r1
     ec2:	80 f4       	brcc	.+32     	; 0xee4 <malloc+0xa0>
     ec4:	8a 81       	ldd	r24, Y+2	; 0x02
     ec6:	9b 81       	ldd	r25, Y+3	; 0x03
     ec8:	61 15       	cp	r22, r1
     eca:	71 05       	cpc	r23, r1
     ecc:	21 f0       	breq	.+8      	; 0xed6 <malloc+0x92>
     ece:	fb 01       	movw	r30, r22
     ed0:	93 83       	std	Z+3, r25	; 0x03
     ed2:	82 83       	std	Z+2, r24	; 0x02
     ed4:	04 c0       	rjmp	.+8      	; 0xede <malloc+0x9a>
     ed6:	90 93 a2 01 	sts	0x01A2, r25
     eda:	80 93 a1 01 	sts	0x01A1, r24
     ede:	fe 01       	movw	r30, r28
     ee0:	32 96       	adiw	r30, 0x02	; 2
     ee2:	44 c0       	rjmp	.+136    	; 0xf6c <malloc+0x128>
     ee4:	fe 01       	movw	r30, r28
     ee6:	e2 0f       	add	r30, r18
     ee8:	f3 1f       	adc	r31, r19
     eea:	81 93       	st	Z+, r24
     eec:	91 93       	st	Z+, r25
     eee:	22 50       	subi	r18, 0x02	; 2
     ef0:	31 09       	sbc	r19, r1
     ef2:	39 83       	std	Y+1, r19	; 0x01
     ef4:	28 83       	st	Y, r18
     ef6:	3a c0       	rjmp	.+116    	; 0xf6c <malloc+0x128>
     ef8:	20 91 9f 01 	lds	r18, 0x019F
     efc:	30 91 a0 01 	lds	r19, 0x01A0
     f00:	23 2b       	or	r18, r19
     f02:	41 f4       	brne	.+16     	; 0xf14 <malloc+0xd0>
     f04:	20 91 02 01 	lds	r18, 0x0102
     f08:	30 91 03 01 	lds	r19, 0x0103
     f0c:	30 93 a0 01 	sts	0x01A0, r19
     f10:	20 93 9f 01 	sts	0x019F, r18
     f14:	20 91 00 01 	lds	r18, 0x0100
     f18:	30 91 01 01 	lds	r19, 0x0101
     f1c:	21 15       	cp	r18, r1
     f1e:	31 05       	cpc	r19, r1
     f20:	41 f4       	brne	.+16     	; 0xf32 <malloc+0xee>
     f22:	2d b7       	in	r18, 0x3d	; 61
     f24:	3e b7       	in	r19, 0x3e	; 62
     f26:	40 91 04 01 	lds	r20, 0x0104
     f2a:	50 91 05 01 	lds	r21, 0x0105
     f2e:	24 1b       	sub	r18, r20
     f30:	35 0b       	sbc	r19, r21
     f32:	e0 91 9f 01 	lds	r30, 0x019F
     f36:	f0 91 a0 01 	lds	r31, 0x01A0
     f3a:	e2 17       	cp	r30, r18
     f3c:	f3 07       	cpc	r31, r19
     f3e:	a0 f4       	brcc	.+40     	; 0xf68 <malloc+0x124>
     f40:	2e 1b       	sub	r18, r30
     f42:	3f 0b       	sbc	r19, r31
     f44:	28 17       	cp	r18, r24
     f46:	39 07       	cpc	r19, r25
     f48:	78 f0       	brcs	.+30     	; 0xf68 <malloc+0x124>
     f4a:	ac 01       	movw	r20, r24
     f4c:	4e 5f       	subi	r20, 0xFE	; 254
     f4e:	5f 4f       	sbci	r21, 0xFF	; 255
     f50:	24 17       	cp	r18, r20
     f52:	35 07       	cpc	r19, r21
     f54:	48 f0       	brcs	.+18     	; 0xf68 <malloc+0x124>
     f56:	4e 0f       	add	r20, r30
     f58:	5f 1f       	adc	r21, r31
     f5a:	50 93 a0 01 	sts	0x01A0, r21
     f5e:	40 93 9f 01 	sts	0x019F, r20
     f62:	81 93       	st	Z+, r24
     f64:	91 93       	st	Z+, r25
     f66:	02 c0       	rjmp	.+4      	; 0xf6c <malloc+0x128>
     f68:	e0 e0       	ldi	r30, 0x00	; 0
     f6a:	f0 e0       	ldi	r31, 0x00	; 0
     f6c:	cf 01       	movw	r24, r30
     f6e:	df 91       	pop	r29
     f70:	cf 91       	pop	r28
     f72:	08 95       	ret

00000f74 <free>:
     f74:	cf 93       	push	r28
     f76:	df 93       	push	r29
     f78:	00 97       	sbiw	r24, 0x00	; 0
     f7a:	09 f4       	brne	.+2      	; 0xf7e <free+0xa>
     f7c:	87 c0       	rjmp	.+270    	; 0x108c <free+0x118>
     f7e:	fc 01       	movw	r30, r24
     f80:	32 97       	sbiw	r30, 0x02	; 2
     f82:	13 82       	std	Z+3, r1	; 0x03
     f84:	12 82       	std	Z+2, r1	; 0x02
     f86:	c0 91 a1 01 	lds	r28, 0x01A1
     f8a:	d0 91 a2 01 	lds	r29, 0x01A2
     f8e:	20 97       	sbiw	r28, 0x00	; 0
     f90:	81 f4       	brne	.+32     	; 0xfb2 <free+0x3e>
     f92:	20 81       	ld	r18, Z
     f94:	31 81       	ldd	r19, Z+1	; 0x01
     f96:	28 0f       	add	r18, r24
     f98:	39 1f       	adc	r19, r25
     f9a:	80 91 9f 01 	lds	r24, 0x019F
     f9e:	90 91 a0 01 	lds	r25, 0x01A0
     fa2:	82 17       	cp	r24, r18
     fa4:	93 07       	cpc	r25, r19
     fa6:	79 f5       	brne	.+94     	; 0x1006 <free+0x92>
     fa8:	f0 93 a0 01 	sts	0x01A0, r31
     fac:	e0 93 9f 01 	sts	0x019F, r30
     fb0:	6d c0       	rjmp	.+218    	; 0x108c <free+0x118>
     fb2:	de 01       	movw	r26, r28
     fb4:	20 e0       	ldi	r18, 0x00	; 0
     fb6:	30 e0       	ldi	r19, 0x00	; 0
     fb8:	ae 17       	cp	r26, r30
     fba:	bf 07       	cpc	r27, r31
     fbc:	50 f4       	brcc	.+20     	; 0xfd2 <free+0x5e>
     fbe:	12 96       	adiw	r26, 0x02	; 2
     fc0:	4d 91       	ld	r20, X+
     fc2:	5c 91       	ld	r21, X
     fc4:	13 97       	sbiw	r26, 0x03	; 3
     fc6:	9d 01       	movw	r18, r26
     fc8:	41 15       	cp	r20, r1
     fca:	51 05       	cpc	r21, r1
     fcc:	09 f1       	breq	.+66     	; 0x1010 <free+0x9c>
     fce:	da 01       	movw	r26, r20
     fd0:	f3 cf       	rjmp	.-26     	; 0xfb8 <free+0x44>
     fd2:	b3 83       	std	Z+3, r27	; 0x03
     fd4:	a2 83       	std	Z+2, r26	; 0x02
     fd6:	40 81       	ld	r20, Z
     fd8:	51 81       	ldd	r21, Z+1	; 0x01
     fda:	84 0f       	add	r24, r20
     fdc:	95 1f       	adc	r25, r21
     fde:	8a 17       	cp	r24, r26
     fe0:	9b 07       	cpc	r25, r27
     fe2:	71 f4       	brne	.+28     	; 0x1000 <free+0x8c>
     fe4:	8d 91       	ld	r24, X+
     fe6:	9c 91       	ld	r25, X
     fe8:	11 97       	sbiw	r26, 0x01	; 1
     fea:	84 0f       	add	r24, r20
     fec:	95 1f       	adc	r25, r21
     fee:	02 96       	adiw	r24, 0x02	; 2
     ff0:	91 83       	std	Z+1, r25	; 0x01
     ff2:	80 83       	st	Z, r24
     ff4:	12 96       	adiw	r26, 0x02	; 2
     ff6:	8d 91       	ld	r24, X+
     ff8:	9c 91       	ld	r25, X
     ffa:	13 97       	sbiw	r26, 0x03	; 3
     ffc:	93 83       	std	Z+3, r25	; 0x03
     ffe:	82 83       	std	Z+2, r24	; 0x02
    1000:	21 15       	cp	r18, r1
    1002:	31 05       	cpc	r19, r1
    1004:	29 f4       	brne	.+10     	; 0x1010 <free+0x9c>
    1006:	f0 93 a2 01 	sts	0x01A2, r31
    100a:	e0 93 a1 01 	sts	0x01A1, r30
    100e:	3e c0       	rjmp	.+124    	; 0x108c <free+0x118>
    1010:	d9 01       	movw	r26, r18
    1012:	13 96       	adiw	r26, 0x03	; 3
    1014:	fc 93       	st	X, r31
    1016:	ee 93       	st	-X, r30
    1018:	12 97       	sbiw	r26, 0x02	; 2
    101a:	4d 91       	ld	r20, X+
    101c:	5d 91       	ld	r21, X+
    101e:	a4 0f       	add	r26, r20
    1020:	b5 1f       	adc	r27, r21
    1022:	ea 17       	cp	r30, r26
    1024:	fb 07       	cpc	r31, r27
    1026:	79 f4       	brne	.+30     	; 0x1046 <free+0xd2>
    1028:	80 81       	ld	r24, Z
    102a:	91 81       	ldd	r25, Z+1	; 0x01
    102c:	84 0f       	add	r24, r20
    102e:	95 1f       	adc	r25, r21
    1030:	02 96       	adiw	r24, 0x02	; 2
    1032:	d9 01       	movw	r26, r18
    1034:	11 96       	adiw	r26, 0x01	; 1
    1036:	9c 93       	st	X, r25
    1038:	8e 93       	st	-X, r24
    103a:	82 81       	ldd	r24, Z+2	; 0x02
    103c:	93 81       	ldd	r25, Z+3	; 0x03
    103e:	13 96       	adiw	r26, 0x03	; 3
    1040:	9c 93       	st	X, r25
    1042:	8e 93       	st	-X, r24
    1044:	12 97       	sbiw	r26, 0x02	; 2
    1046:	e0 e0       	ldi	r30, 0x00	; 0
    1048:	f0 e0       	ldi	r31, 0x00	; 0
    104a:	8a 81       	ldd	r24, Y+2	; 0x02
    104c:	9b 81       	ldd	r25, Y+3	; 0x03
    104e:	00 97       	sbiw	r24, 0x00	; 0
    1050:	19 f0       	breq	.+6      	; 0x1058 <free+0xe4>
    1052:	fe 01       	movw	r30, r28
    1054:	ec 01       	movw	r28, r24
    1056:	f9 cf       	rjmp	.-14     	; 0x104a <free+0xd6>
    1058:	ce 01       	movw	r24, r28
    105a:	02 96       	adiw	r24, 0x02	; 2
    105c:	28 81       	ld	r18, Y
    105e:	39 81       	ldd	r19, Y+1	; 0x01
    1060:	82 0f       	add	r24, r18
    1062:	93 1f       	adc	r25, r19
    1064:	20 91 9f 01 	lds	r18, 0x019F
    1068:	30 91 a0 01 	lds	r19, 0x01A0
    106c:	28 17       	cp	r18, r24
    106e:	39 07       	cpc	r19, r25
    1070:	69 f4       	brne	.+26     	; 0x108c <free+0x118>
    1072:	30 97       	sbiw	r30, 0x00	; 0
    1074:	29 f4       	brne	.+10     	; 0x1080 <free+0x10c>
    1076:	10 92 a2 01 	sts	0x01A2, r1
    107a:	10 92 a1 01 	sts	0x01A1, r1
    107e:	02 c0       	rjmp	.+4      	; 0x1084 <free+0x110>
    1080:	13 82       	std	Z+3, r1	; 0x03
    1082:	12 82       	std	Z+2, r1	; 0x02
    1084:	d0 93 a0 01 	sts	0x01A0, r29
    1088:	c0 93 9f 01 	sts	0x019F, r28
    108c:	df 91       	pop	r29
    108e:	cf 91       	pop	r28
    1090:	08 95       	ret

00001092 <fdevopen>:
    1092:	0f 93       	push	r16
    1094:	1f 93       	push	r17
    1096:	cf 93       	push	r28
    1098:	df 93       	push	r29
    109a:	ec 01       	movw	r28, r24
    109c:	8b 01       	movw	r16, r22
    109e:	00 97       	sbiw	r24, 0x00	; 0
    10a0:	31 f4       	brne	.+12     	; 0x10ae <fdevopen+0x1c>
    10a2:	61 15       	cp	r22, r1
    10a4:	71 05       	cpc	r23, r1
    10a6:	19 f4       	brne	.+6      	; 0x10ae <fdevopen+0x1c>
    10a8:	80 e0       	ldi	r24, 0x00	; 0
    10aa:	90 e0       	ldi	r25, 0x00	; 0
    10ac:	38 c0       	rjmp	.+112    	; 0x111e <fdevopen+0x8c>
    10ae:	6e e0       	ldi	r22, 0x0E	; 14
    10b0:	70 e0       	ldi	r23, 0x00	; 0
    10b2:	81 e0       	ldi	r24, 0x01	; 1
    10b4:	90 e0       	ldi	r25, 0x00	; 0
    10b6:	0e 94 94 08 	call	0x1128	; 0x1128 <calloc>
    10ba:	fc 01       	movw	r30, r24
    10bc:	00 97       	sbiw	r24, 0x00	; 0
    10be:	a1 f3       	breq	.-24     	; 0x10a8 <fdevopen+0x16>
    10c0:	80 e8       	ldi	r24, 0x80	; 128
    10c2:	83 83       	std	Z+3, r24	; 0x03
    10c4:	01 15       	cp	r16, r1
    10c6:	11 05       	cpc	r17, r1
    10c8:	71 f0       	breq	.+28     	; 0x10e6 <fdevopen+0x54>
    10ca:	13 87       	std	Z+11, r17	; 0x0b
    10cc:	02 87       	std	Z+10, r16	; 0x0a
    10ce:	81 e8       	ldi	r24, 0x81	; 129
    10d0:	83 83       	std	Z+3, r24	; 0x03
    10d2:	80 91 a3 01 	lds	r24, 0x01A3
    10d6:	90 91 a4 01 	lds	r25, 0x01A4
    10da:	89 2b       	or	r24, r25
    10dc:	21 f4       	brne	.+8      	; 0x10e6 <fdevopen+0x54>
    10de:	f0 93 a4 01 	sts	0x01A4, r31
    10e2:	e0 93 a3 01 	sts	0x01A3, r30
    10e6:	20 97       	sbiw	r28, 0x00	; 0
    10e8:	c9 f0       	breq	.+50     	; 0x111c <fdevopen+0x8a>
    10ea:	d1 87       	std	Z+9, r29	; 0x09
    10ec:	c0 87       	std	Z+8, r28	; 0x08
    10ee:	83 81       	ldd	r24, Z+3	; 0x03
    10f0:	82 60       	ori	r24, 0x02	; 2
    10f2:	83 83       	std	Z+3, r24	; 0x03
    10f4:	80 91 a5 01 	lds	r24, 0x01A5
    10f8:	90 91 a6 01 	lds	r25, 0x01A6
    10fc:	89 2b       	or	r24, r25
    10fe:	71 f4       	brne	.+28     	; 0x111c <fdevopen+0x8a>
    1100:	f0 93 a6 01 	sts	0x01A6, r31
    1104:	e0 93 a5 01 	sts	0x01A5, r30
    1108:	80 91 a7 01 	lds	r24, 0x01A7
    110c:	90 91 a8 01 	lds	r25, 0x01A8
    1110:	89 2b       	or	r24, r25
    1112:	21 f4       	brne	.+8      	; 0x111c <fdevopen+0x8a>
    1114:	f0 93 a8 01 	sts	0x01A8, r31
    1118:	e0 93 a7 01 	sts	0x01A7, r30
    111c:	cf 01       	movw	r24, r30
    111e:	df 91       	pop	r29
    1120:	cf 91       	pop	r28
    1122:	1f 91       	pop	r17
    1124:	0f 91       	pop	r16
    1126:	08 95       	ret

00001128 <calloc>:
    1128:	0f 93       	push	r16
    112a:	1f 93       	push	r17
    112c:	cf 93       	push	r28
    112e:	df 93       	push	r29
    1130:	86 9f       	mul	r24, r22
    1132:	80 01       	movw	r16, r0
    1134:	87 9f       	mul	r24, r23
    1136:	10 0d       	add	r17, r0
    1138:	96 9f       	mul	r25, r22
    113a:	10 0d       	add	r17, r0
    113c:	11 24       	eor	r1, r1
    113e:	c8 01       	movw	r24, r16
    1140:	0e 94 22 07 	call	0xe44	; 0xe44 <malloc>
    1144:	ec 01       	movw	r28, r24
    1146:	00 97       	sbiw	r24, 0x00	; 0
    1148:	29 f0       	breq	.+10     	; 0x1154 <calloc+0x2c>
    114a:	a8 01       	movw	r20, r16
    114c:	60 e0       	ldi	r22, 0x00	; 0
    114e:	70 e0       	ldi	r23, 0x00	; 0
    1150:	0e 94 b0 08 	call	0x1160	; 0x1160 <memset>
    1154:	ce 01       	movw	r24, r28
    1156:	df 91       	pop	r29
    1158:	cf 91       	pop	r28
    115a:	1f 91       	pop	r17
    115c:	0f 91       	pop	r16
    115e:	08 95       	ret

00001160 <memset>:
    1160:	dc 01       	movw	r26, r24
    1162:	01 c0       	rjmp	.+2      	; 0x1166 <memset+0x6>
    1164:	6d 93       	st	X+, r22
    1166:	41 50       	subi	r20, 0x01	; 1
    1168:	50 40       	sbci	r21, 0x00	; 0
    116a:	e0 f7       	brcc	.-8      	; 0x1164 <memset+0x4>
    116c:	08 95       	ret

0000116e <_exit>:
    116e:	f8 94       	cli

00001170 <__stop_program>:
    1170:	ff cf       	rjmp	.-2      	; 0x1170 <__stop_program>
