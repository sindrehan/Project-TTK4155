
gruppe6.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         000001fa  00800100  000010b0  00001144  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000010b0  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          0000000e  008002fa  008002fa  0000133e  2**0
                  ALLOC
  3 .comment      0000005c  00000000  00000000  0000133e  2**0
                  CONTENTS, READONLY
  4 .debug_aranges 00000198  00000000  00000000  0000139a  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   000017f9  00000000  00000000  00001532  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 000009d6  00000000  00000000  00002d2b  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00000871  00000000  00000000  00003701  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000474  00000000  00000000  00003f74  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    0000053f  00000000  00000000  000043e8  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00000d6c  00000000  00000000  00004927  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000170  00000000  00000000  00005693  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 f6 00 	jmp	0x1ec	; 0x1ec <__ctors_end>
       4:	0c 94 13 01 	jmp	0x226	; 0x226 <__bad_interrupt>
       8:	0c 94 13 01 	jmp	0x226	; 0x226 <__bad_interrupt>
       c:	0c 94 13 01 	jmp	0x226	; 0x226 <__bad_interrupt>
      10:	0c 94 13 01 	jmp	0x226	; 0x226 <__bad_interrupt>
      14:	0c 94 13 01 	jmp	0x226	; 0x226 <__bad_interrupt>
      18:	0c 94 13 01 	jmp	0x226	; 0x226 <__bad_interrupt>
      1c:	0c 94 13 01 	jmp	0x226	; 0x226 <__bad_interrupt>
      20:	0c 94 13 01 	jmp	0x226	; 0x226 <__bad_interrupt>
      24:	0c 94 13 01 	jmp	0x226	; 0x226 <__bad_interrupt>
      28:	0c 94 13 01 	jmp	0x226	; 0x226 <__bad_interrupt>
      2c:	0c 94 13 01 	jmp	0x226	; 0x226 <__bad_interrupt>
      30:	0c 94 13 01 	jmp	0x226	; 0x226 <__bad_interrupt>
      34:	0c 94 13 01 	jmp	0x226	; 0x226 <__bad_interrupt>
      38:	0c 94 13 01 	jmp	0x226	; 0x226 <__bad_interrupt>
      3c:	0c 94 13 01 	jmp	0x226	; 0x226 <__bad_interrupt>
      40:	0c 94 13 01 	jmp	0x226	; 0x226 <__bad_interrupt>
      44:	0c 94 13 01 	jmp	0x226	; 0x226 <__bad_interrupt>
      48:	0c 94 13 01 	jmp	0x226	; 0x226 <__bad_interrupt>
      4c:	0c 94 13 01 	jmp	0x226	; 0x226 <__bad_interrupt>
      50:	0c 94 13 01 	jmp	0x226	; 0x226 <__bad_interrupt>
      54:	0c 94 13 01 	jmp	0x226	; 0x226 <__bad_interrupt>
      58:	0c 94 13 01 	jmp	0x226	; 0x226 <__bad_interrupt>
      5c:	0c 94 13 01 	jmp	0x226	; 0x226 <__bad_interrupt>
      60:	0c 94 13 01 	jmp	0x226	; 0x226 <__bad_interrupt>
      64:	0c 94 13 01 	jmp	0x226	; 0x226 <__bad_interrupt>
      68:	0c 94 13 01 	jmp	0x226	; 0x226 <__bad_interrupt>
      6c:	0c 94 13 01 	jmp	0x226	; 0x226 <__bad_interrupt>

00000070 <__trampolines_end>:
      70:	00 00       	nop
      72:	00 00       	nop
      74:	00 5c       	subi	r16, 0xC0	; 192
      76:	00 00       	nop
      78:	0c 00       	.word	0x000c	; ????
      7a:	0c 00       	.word	0x000c	; ????
      7c:	7c 28       	or	r7, r12
      7e:	7c 28       	or	r7, r12
      80:	58 dc       	rcall	.-1872   	; 0xfffff932 <__eeprom_end+0xff7ef932>
      82:	68 00       	.word	0x0068	; ????
      84:	24 10       	cpse	r2, r4
      86:	48 00       	.word	0x0048	; ????
      88:	28 54       	subi	r18, 0x48	; 72
      8a:	28 40       	sbci	r18, 0x08	; 8
      8c:	00 0c       	add	r0, r0
      8e:	00 00       	nop
      90:	00 78       	andi	r16, 0x80	; 128
      92:	84 00       	.word	0x0084	; ????
      94:	84 78       	andi	r24, 0x84	; 132
      96:	00 00       	nop
      98:	54 38       	cpi	r21, 0x84	; 132
      9a:	54 00       	.word	0x0054	; ????
      9c:	10 7c       	andi	r17, 0xC0	; 192
      9e:	10 00       	.word	0x0010	; ????
      a0:	80 40       	sbci	r24, 0x00	; 0
      a2:	00 00       	nop
      a4:	10 10       	cpse	r1, r0
      a6:	10 00       	.word	0x0010	; ????
      a8:	00 40       	sbci	r16, 0x00	; 0
      aa:	00 00       	nop
      ac:	60 10       	cpse	r6, r0
      ae:	0c 00       	.word	0x000c	; ????
      b0:	38 54       	subi	r19, 0x48	; 72
      b2:	38 00       	.word	0x0038	; ????
      b4:	48 7c       	andi	r20, 0xC8	; 200
      b6:	40 00       	.word	0x0040	; ????
      b8:	48 64       	ori	r20, 0x48	; 72
      ba:	58 00       	.word	0x0058	; ????
      bc:	44 54       	subi	r20, 0x44	; 68
      be:	2c 00       	.word	0x002c	; ????
      c0:	1c 10       	cpse	r1, r12
      c2:	7c 00       	.word	0x007c	; ????
      c4:	5c 54       	subi	r21, 0x4C	; 76
      c6:	24 00       	.word	0x0024	; ????
      c8:	38 54       	subi	r19, 0x48	; 72
      ca:	24 00       	.word	0x0024	; ????
      cc:	64 14       	cp	r6, r4
      ce:	0c 00       	.word	0x000c	; ????
      d0:	68 54       	subi	r22, 0x48	; 72
      d2:	2c 00       	.word	0x002c	; ????
      d4:	48 54       	subi	r20, 0x48	; 72
      d6:	38 00       	.word	0x0038	; ????
      d8:	00 48       	sbci	r16, 0x80	; 128
      da:	00 00       	nop
      dc:	80 48       	sbci	r24, 0x80	; 128
      de:	00 00       	nop
      e0:	10 28       	or	r1, r0
      e2:	44 00       	.word	0x0044	; ????
      e4:	28 28       	or	r2, r8
      e6:	28 00       	.word	0x0028	; ????
      e8:	44 28       	or	r4, r4
      ea:	10 00       	.word	0x0010	; ????
      ec:	04 54       	subi	r16, 0x44	; 68
      ee:	08 00       	.word	0x0008	; ????
      f0:	38 44       	sbci	r19, 0x48	; 72
      f2:	5c 00       	.word	0x005c	; ????
      f4:	78 14       	cp	r7, r8
      f6:	78 00       	.word	0x0078	; ????
      f8:	7c 54       	subi	r23, 0x4C	; 76
      fa:	28 00       	.word	0x0028	; ????
      fc:	38 44       	sbci	r19, 0x48	; 72
      fe:	28 00       	.word	0x0028	; ????
     100:	7c 44       	sbci	r23, 0x4C	; 76
     102:	38 00       	.word	0x0038	; ????
     104:	7c 54       	subi	r23, 0x4C	; 76
     106:	44 00       	.word	0x0044	; ????
     108:	7c 14       	cp	r7, r12
     10a:	04 00       	.word	0x0004	; ????
     10c:	38 44       	sbci	r19, 0x48	; 72
     10e:	74 00       	.word	0x0074	; ????
     110:	7c 10       	cpse	r7, r12
     112:	7c 00       	.word	0x007c	; ????
     114:	44 7c       	andi	r20, 0xC4	; 196
     116:	44 00       	.word	0x0044	; ????
     118:	20 40       	sbci	r18, 0x00	; 0
     11a:	3c 00       	.word	0x003c	; ????
     11c:	7c 10       	cpse	r7, r12
     11e:	6c 00       	.word	0x006c	; ????
     120:	7c 40       	sbci	r23, 0x0C	; 12
     122:	40 00       	.word	0x0040	; ????
     124:	7c 18       	sub	r7, r12
     126:	7c 00       	.word	0x007c	; ????
     128:	78 10       	cpse	r7, r8
     12a:	3c 00       	.word	0x003c	; ????
     12c:	38 44       	sbci	r19, 0x48	; 72
     12e:	38 00       	.word	0x0038	; ????
     130:	7c 14       	cp	r7, r12
     132:	08 00       	.word	0x0008	; ????
     134:	38 44       	sbci	r19, 0x48	; 72
     136:	b8 00       	.word	0x00b8	; ????
     138:	7c 14       	cp	r7, r12
     13a:	68 00       	.word	0x0068	; ????
     13c:	48 54       	subi	r20, 0x48	; 72
     13e:	24 00       	.word	0x0024	; ????
     140:	04 7c       	andi	r16, 0xC4	; 196
     142:	04 00       	.word	0x0004	; ????
     144:	7c 40       	sbci	r23, 0x0C	; 12
     146:	7c 00       	.word	0x007c	; ????
     148:	3c 60       	ori	r19, 0x0C	; 12
     14a:	3c 00       	.word	0x003c	; ????
     14c:	7c 30       	cpi	r23, 0x0C	; 12
     14e:	7c 00       	.word	0x007c	; ????
     150:	6c 10       	cpse	r6, r12
     152:	6c 00       	.word	0x006c	; ????
     154:	0c 70       	andi	r16, 0x0C	; 12
     156:	0c 00       	.word	0x000c	; ????
     158:	64 54       	subi	r22, 0x44	; 68
     15a:	4c 00       	.word	0x004c	; ????
     15c:	00 7c       	andi	r16, 0xC0	; 192
     15e:	44 00       	.word	0x0044	; ????
     160:	0c 10       	cpse	r0, r12
     162:	60 00       	.word	0x0060	; ????
     164:	44 7c       	andi	r20, 0xC4	; 196
     166:	00 00       	nop
     168:	08 04       	cpc	r0, r8
     16a:	08 00       	.word	0x0008	; ????
     16c:	80 80       	ld	r8, Z
     16e:	80 00       	.word	0x0080	; ????
     170:	00 04       	cpc	r0, r0
     172:	08 00       	.word	0x0008	; ????
     174:	30 48       	sbci	r19, 0x80	; 128
     176:	78 00       	.word	0x0078	; ????
     178:	7c 48       	sbci	r23, 0x8C	; 140
     17a:	30 00       	.word	0x0030	; ????
     17c:	30 48       	sbci	r19, 0x80	; 128
     17e:	48 00       	.word	0x0048	; ????
     180:	30 48       	sbci	r19, 0x80	; 128
     182:	7c 00       	.word	0x007c	; ????
     184:	30 68       	ori	r19, 0x80	; 128
     186:	50 00       	.word	0x0050	; ????
     188:	10 78       	andi	r17, 0x80	; 128
     18a:	14 00       	.word	0x0014	; ????
     18c:	90 a8       	ldd	r9, Z+48	; 0x30
     18e:	78 00       	.word	0x0078	; ????
     190:	7c 08       	sbc	r7, r12
     192:	70 00       	.word	0x0070	; ????
     194:	50 74       	andi	r21, 0x40	; 64
     196:	40 00       	.word	0x0040	; ????
     198:	80 80       	ld	r8, Z
     19a:	74 00       	.word	0x0074	; ????
     19c:	7c 10       	cpse	r7, r12
     19e:	68 00       	.word	0x0068	; ????
     1a0:	44 7c       	andi	r20, 0xC4	; 196
     1a2:	40 00       	.word	0x0040	; ????
     1a4:	78 10       	cpse	r7, r8
     1a6:	78 00       	.word	0x0078	; ????
     1a8:	78 08       	sbc	r7, r8
     1aa:	70 00       	.word	0x0070	; ????
     1ac:	30 48       	sbci	r19, 0x80	; 128
     1ae:	30 00       	.word	0x0030	; ????
     1b0:	f8 28       	or	r15, r8
     1b2:	10 00       	.word	0x0010	; ????
     1b4:	30 48       	sbci	r19, 0x80	; 128
     1b6:	f8 00       	.word	0x00f8	; ????
     1b8:	78 10       	cpse	r7, r8
     1ba:	08 00       	.word	0x0008	; ????
     1bc:	50 58       	subi	r21, 0x80	; 128
     1be:	28 00       	.word	0x0028	; ????
     1c0:	08 3c       	cpi	r16, 0xC8	; 200
     1c2:	48 00       	.word	0x0048	; ????
     1c4:	38 40       	sbci	r19, 0x08	; 8
     1c6:	78 00       	.word	0x0078	; ????
     1c8:	38 40       	sbci	r19, 0x08	; 8
     1ca:	38 00       	.word	0x0038	; ????
     1cc:	78 20       	and	r7, r8
     1ce:	78 00       	.word	0x0078	; ????
     1d0:	48 30       	cpi	r20, 0x08	; 8
     1d2:	48 00       	.word	0x0048	; ????
     1d4:	98 a0       	ldd	r9, Y+32	; 0x20
     1d6:	78 00       	.word	0x0078	; ????
     1d8:	48 68       	ori	r20, 0x88	; 136
     1da:	58 00       	.word	0x0058	; ????
     1dc:	10 78       	andi	r17, 0x80	; 128
     1de:	84 00       	.word	0x0084	; ????
     1e0:	00 7c       	andi	r16, 0xC0	; 192
     1e2:	00 00       	nop
     1e4:	84 78       	andi	r24, 0x84	; 132
     1e6:	10 00       	.word	0x0010	; ????
     1e8:	08 04       	cpc	r0, r8
     1ea:	08 04       	cpc	r0, r8

000001ec <__ctors_end>:
     1ec:	11 24       	eor	r1, r1
     1ee:	1f be       	out	0x3f, r1	; 63
     1f0:	cf ef       	ldi	r28, 0xFF	; 255
     1f2:	d4 e0       	ldi	r29, 0x04	; 4
     1f4:	de bf       	out	0x3e, r29	; 62
     1f6:	cd bf       	out	0x3d, r28	; 61

000001f8 <__do_copy_data>:
     1f8:	12 e0       	ldi	r17, 0x02	; 2
     1fa:	a0 e0       	ldi	r26, 0x00	; 0
     1fc:	b1 e0       	ldi	r27, 0x01	; 1
     1fe:	e0 eb       	ldi	r30, 0xB0	; 176
     200:	f0 e1       	ldi	r31, 0x10	; 16
     202:	02 c0       	rjmp	.+4      	; 0x208 <__do_copy_data+0x10>
     204:	05 90       	lpm	r0, Z+
     206:	0d 92       	st	X+, r0
     208:	aa 3f       	cpi	r26, 0xFA	; 250
     20a:	b1 07       	cpc	r27, r17
     20c:	d9 f7       	brne	.-10     	; 0x204 <__do_copy_data+0xc>

0000020e <__do_clear_bss>:
     20e:	23 e0       	ldi	r18, 0x03	; 3
     210:	aa ef       	ldi	r26, 0xFA	; 250
     212:	b2 e0       	ldi	r27, 0x02	; 2
     214:	01 c0       	rjmp	.+2      	; 0x218 <.do_clear_bss_start>

00000216 <.do_clear_bss_loop>:
     216:	1d 92       	st	X+, r1

00000218 <.do_clear_bss_start>:
     218:	a8 30       	cpi	r26, 0x08	; 8
     21a:	b2 07       	cpc	r27, r18
     21c:	e1 f7       	brne	.-8      	; 0x216 <.do_clear_bss_loop>
     21e:	0e 94 39 03 	call	0x672	; 0x672 <main>
     222:	0c 94 56 08 	jmp	0x10ac	; 0x10ac <_exit>

00000226 <__bad_interrupt>:
     226:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000022a <ADC_init>:


#include "adc_driver.h"

void ADC_init(void){
	MCUCR |= (1<<SRE);
     22a:	85 b7       	in	r24, 0x35	; 53
     22c:	80 68       	ori	r24, 0x80	; 128
     22e:	85 bf       	out	0x35, r24	; 53
	SFIOR |= (1<<XMM2);
     230:	80 b7       	in	r24, 0x30	; 48
     232:	80 62       	ori	r24, 0x20	; 32
     234:	80 bf       	out	0x30, r24	; 48
	DDRB &= ~(1<<PINB3);
     236:	bb 98       	cbi	0x17, 3	; 23
     238:	08 95       	ret

0000023a <ADC_read>:
}

uint8_t ADC_read(uint8_t channel){
	volatile char *adc = (char *) 0x1400;
	
	*adc = 4+channel;
     23a:	8c 5f       	subi	r24, 0xFC	; 252
     23c:	80 93 00 14 	sts	0x1400, r24
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     240:	80 e1       	ldi	r24, 0x10	; 16
     242:	8a 95       	dec	r24
     244:	f1 f7       	brne	.-4      	; 0x242 <ADC_read+0x8>
     246:	00 c0       	rjmp	.+0      	; 0x248 <ADC_read+0xe>
	
	_delay_us(10); //Give adc some time to remove the previous interrupt
	
	while( (PINB & (1<<PINB3) ) ){}
     248:	b3 99       	sbic	0x16, 3	; 22
     24a:	fe cf       	rjmp	.-4      	; 0x248 <ADC_read+0xe>
	return *adc; 
     24c:	80 91 00 14 	lds	r24, 0x1400
}
     250:	08 95       	ret

00000252 <menu_print>:

#include "menu.h"


void menu_print(int arrow_pos, int menu_size, char* menu_items[])
{
     252:	cf 92       	push	r12
     254:	df 92       	push	r13
     256:	ef 92       	push	r14
     258:	ff 92       	push	r15
     25a:	0f 93       	push	r16
     25c:	1f 93       	push	r17
     25e:	cf 93       	push	r28
     260:	df 93       	push	r29
     262:	6c 01       	movw	r12, r24
     264:	7b 01       	movw	r14, r22
	for(int i = 0; i < menu_size; i++){
     266:	16 16       	cp	r1, r22
     268:	17 06       	cpc	r1, r23
     26a:	04 f5       	brge	.+64     	; 0x2ac <menu_print+0x5a>
     26c:	04 2f       	mov	r16, r20
     26e:	15 2f       	mov	r17, r21
     270:	c0 e0       	ldi	r28, 0x00	; 0
     272:	d0 e0       	ldi	r29, 0x00	; 0
		OLED_pos(i,0);
     274:	60 e0       	ldi	r22, 0x00	; 0
     276:	8c 2f       	mov	r24, r28
     278:	0e 94 c1 02 	call	0x582	; 0x582 <OLED_pos>
		if(i == arrow_pos){
     27c:	cc 15       	cp	r28, r12
     27e:	dd 05       	cpc	r29, r13
     280:	29 f4       	brne	.+10     	; 0x28c <menu_print+0x3a>
			OLED_print_string("->");
     282:	87 e1       	ldi	r24, 0x17	; 23
     284:	91 e0       	ldi	r25, 0x01	; 1
     286:	0e 94 17 03 	call	0x62e	; 0x62e <OLED_print_string>
     28a:	04 c0       	rjmp	.+8      	; 0x294 <menu_print+0x42>
		}
		else{
			OLED_print_string("  ");
     28c:	81 ed       	ldi	r24, 0xD1	; 209
     28e:	92 e0       	ldi	r25, 0x02	; 2
     290:	0e 94 17 03 	call	0x62e	; 0x62e <OLED_print_string>
		}
		OLED_print_string(menu_items[i]);
     294:	f8 01       	movw	r30, r16
     296:	81 91       	ld	r24, Z+
     298:	91 91       	ld	r25, Z+
     29a:	8f 01       	movw	r16, r30
     29c:	0e 94 17 03 	call	0x62e	; 0x62e <OLED_print_string>
		OLED_clear_rest_of_line();
     2a0:	0e 94 ca 02 	call	0x594	; 0x594 <OLED_clear_rest_of_line>
#include "menu.h"


void menu_print(int arrow_pos, int menu_size, char* menu_items[])
{
	for(int i = 0; i < menu_size; i++){
     2a4:	21 96       	adiw	r28, 0x01	; 1
     2a6:	ce 15       	cp	r28, r14
     2a8:	df 05       	cpc	r29, r15
     2aa:	21 f7       	brne	.-56     	; 0x274 <menu_print+0x22>
			OLED_print_string("  ");
		}
		OLED_print_string(menu_items[i]);
		OLED_clear_rest_of_line();
	}
}
     2ac:	df 91       	pop	r29
     2ae:	cf 91       	pop	r28
     2b0:	1f 91       	pop	r17
     2b2:	0f 91       	pop	r16
     2b4:	ff 90       	pop	r15
     2b6:	ef 90       	pop	r14
     2b8:	df 90       	pop	r13
     2ba:	cf 90       	pop	r12
     2bc:	08 95       	ret

000002be <menu_move_selector>:

int menu_move_selector(char* menu[], int menu_size){
     2be:	2f 92       	push	r2
     2c0:	3f 92       	push	r3
     2c2:	4f 92       	push	r4
     2c4:	5f 92       	push	r5
     2c6:	6f 92       	push	r6
     2c8:	7f 92       	push	r7
     2ca:	8f 92       	push	r8
     2cc:	9f 92       	push	r9
     2ce:	af 92       	push	r10
     2d0:	bf 92       	push	r11
     2d2:	cf 92       	push	r12
     2d4:	df 92       	push	r13
     2d6:	ef 92       	push	r14
     2d8:	ff 92       	push	r15
     2da:	0f 93       	push	r16
     2dc:	1f 93       	push	r17
     2de:	cf 93       	push	r28
     2e0:	df 93       	push	r29
     2e2:	6c 01       	movw	r12, r24
     2e4:	7b 01       	movw	r14, r22
	int arrow = 0;
	int neutral_counter = 0;
	JOY_direction_t prev_dir = NEUTRAL;
     2e6:	68 94       	set
     2e8:	99 24       	eor	r9, r9
     2ea:	92 f8       	bld	r9, 2
	}
}

int menu_move_selector(char* menu[], int menu_size){
	int arrow = 0;
	int neutral_counter = 0;
     2ec:	00 e0       	ldi	r16, 0x00	; 0
     2ee:	10 e0       	ldi	r17, 0x00	; 0
		OLED_clear_rest_of_line();
	}
}

int menu_move_selector(char* menu[], int menu_size){
	int arrow = 0;
     2f0:	c0 e0       	ldi	r28, 0x00	; 0
     2f2:	d0 e0       	ldi	r29, 0x00	; 0
	int neutral_counter = 0;
	JOY_direction_t prev_dir = NEUTRAL;
	while(1){
		switch(Joy_getDirection()){
			case UP:
			if ((arrow > 0) & (prev_dir == NEUTRAL)){
     2f4:	88 24       	eor	r8, r8
     2f6:	83 94       	inc	r8
				arrow--;
				prev_dir = UP;
     2f8:	68 94       	set
     2fa:	22 24       	eor	r2, r2
     2fc:	21 f8       	bld	r2, 1
	int neutral_counter = 0;
	JOY_direction_t prev_dir = NEUTRAL;
	while(1){
		switch(Joy_getDirection()){
			case UP:
			if ((arrow > 0) & (prev_dir == NEUTRAL)){
     2fe:	71 2c       	mov	r7, r1
			}
			break;
			default:
			neutral_counter++;
			if (neutral_counter > 150){
				prev_dir = NEUTRAL;
     300:	68 94       	set
     302:	33 24       	eor	r3, r3
     304:	32 f8       	bld	r3, 2
				neutral_counter = 0;
     306:	41 2c       	mov	r4, r1
     308:	51 2c       	mov	r5, r1
				arrow--;
				prev_dir = UP;
			}
			break;
			case DOWN:
			if ((arrow < menu_size-1) & (prev_dir == NEUTRAL)){
     30a:	5b 01       	movw	r10, r22
     30c:	81 e0       	ldi	r24, 0x01	; 1
     30e:	a8 1a       	sub	r10, r24
     310:	b1 08       	sbc	r11, r1
				arrow++;
				prev_dir = DOWN;
     312:	0f 2e       	mov	r0, r31
     314:	f3 e0       	ldi	r31, 0x03	; 3
     316:	6f 2e       	mov	r6, r31
     318:	f0 2d       	mov	r31, r0
int menu_move_selector(char* menu[], int menu_size){
	int arrow = 0;
	int neutral_counter = 0;
	JOY_direction_t prev_dir = NEUTRAL;
	while(1){
		switch(Joy_getDirection()){
     31a:	0e 94 40 02 	call	0x480	; 0x480 <Joy_getDirection>
     31e:	82 30       	cpi	r24, 0x02	; 2
     320:	19 f0       	breq	.+6      	; 0x328 <menu_move_selector+0x6a>
     322:	83 30       	cpi	r24, 0x03	; 3
     324:	89 f0       	breq	.+34     	; 0x348 <menu_move_selector+0x8a>
     326:	20 c0       	rjmp	.+64     	; 0x368 <menu_move_selector+0xaa>
			case UP:
			if ((arrow > 0) & (prev_dir == NEUTRAL)){
     328:	88 2d       	mov	r24, r8
     32a:	94 e0       	ldi	r25, 0x04	; 4
     32c:	99 12       	cpse	r9, r25
     32e:	87 2d       	mov	r24, r7
     330:	88 23       	and	r24, r24
     332:	11 f1       	breq	.+68     	; 0x378 <menu_move_selector+0xba>
     334:	88 2d       	mov	r24, r8
     336:	1c 16       	cp	r1, r28
     338:	1d 06       	cpc	r1, r29
     33a:	0c f0       	brlt	.+2      	; 0x33e <menu_move_selector+0x80>
     33c:	87 2d       	mov	r24, r7
     33e:	88 23       	and	r24, r24
     340:	d9 f0       	breq	.+54     	; 0x378 <menu_move_selector+0xba>
				arrow--;
     342:	21 97       	sbiw	r28, 0x01	; 1
				prev_dir = UP;
     344:	92 2c       	mov	r9, r2
     346:	18 c0       	rjmp	.+48     	; 0x378 <menu_move_selector+0xba>
			}
			break;
			case DOWN:
			if ((arrow < menu_size-1) & (prev_dir == NEUTRAL)){
     348:	88 2d       	mov	r24, r8
     34a:	94 e0       	ldi	r25, 0x04	; 4
     34c:	99 12       	cpse	r9, r25
     34e:	87 2d       	mov	r24, r7
     350:	88 23       	and	r24, r24
     352:	91 f0       	breq	.+36     	; 0x378 <menu_move_selector+0xba>
     354:	88 2d       	mov	r24, r8
     356:	ca 15       	cp	r28, r10
     358:	db 05       	cpc	r29, r11
     35a:	0c f0       	brlt	.+2      	; 0x35e <menu_move_selector+0xa0>
     35c:	87 2d       	mov	r24, r7
     35e:	88 23       	and	r24, r24
     360:	59 f0       	breq	.+22     	; 0x378 <menu_move_selector+0xba>
				arrow++;
     362:	21 96       	adiw	r28, 0x01	; 1
				prev_dir = DOWN;
     364:	96 2c       	mov	r9, r6
     366:	08 c0       	rjmp	.+16     	; 0x378 <menu_move_selector+0xba>
			}
			break;
			default:
			neutral_counter++;
     368:	0f 5f       	subi	r16, 0xFF	; 255
     36a:	1f 4f       	sbci	r17, 0xFF	; 255
			if (neutral_counter > 150){
     36c:	07 39       	cpi	r16, 0x97	; 151
     36e:	11 05       	cpc	r17, r1
     370:	1c f0       	brlt	.+6      	; 0x378 <menu_move_selector+0xba>
				prev_dir = NEUTRAL;
     372:	93 2c       	mov	r9, r3
				neutral_counter = 0;
     374:	04 2d       	mov	r16, r4
     376:	15 2d       	mov	r17, r5
			}
			break;
		}
		if(!JOY_button(2)){
     378:	82 e0       	ldi	r24, 0x02	; 2
     37a:	90 e0       	ldi	r25, 0x00	; 0
     37c:	0e 94 f9 01 	call	0x3f2	; 0x3f2 <JOY_button>
     380:	81 11       	cpse	r24, r1
     382:	07 c0       	rjmp	.+14     	; 0x392 <menu_move_selector+0xd4>
			while(!JOY_button(2)){}
     384:	82 e0       	ldi	r24, 0x02	; 2
     386:	90 e0       	ldi	r25, 0x00	; 0
     388:	0e 94 f9 01 	call	0x3f2	; 0x3f2 <JOY_button>
     38c:	88 23       	and	r24, r24
     38e:	d1 f3       	breq	.-12     	; 0x384 <menu_move_selector+0xc6>
     390:	06 c0       	rjmp	.+12     	; 0x39e <menu_move_selector+0xe0>
			return arrow;
		}
		menu_print(arrow, menu_size, menu);
     392:	a6 01       	movw	r20, r12
     394:	b7 01       	movw	r22, r14
     396:	ce 01       	movw	r24, r28
     398:	0e 94 29 01 	call	0x252	; 0x252 <menu_print>
	}
     39c:	be cf       	rjmp	.-132    	; 0x31a <menu_move_selector+0x5c>
     39e:	ce 01       	movw	r24, r28
     3a0:	df 91       	pop	r29
     3a2:	cf 91       	pop	r28
     3a4:	1f 91       	pop	r17
     3a6:	0f 91       	pop	r16
     3a8:	ff 90       	pop	r15
     3aa:	ef 90       	pop	r14
     3ac:	df 90       	pop	r13
     3ae:	cf 90       	pop	r12
     3b0:	bf 90       	pop	r11
     3b2:	af 90       	pop	r10
     3b4:	9f 90       	pop	r9
     3b6:	8f 90       	pop	r8
     3b8:	7f 90       	pop	r7
     3ba:	6f 90       	pop	r6
     3bc:	5f 90       	pop	r5
     3be:	4f 90       	pop	r4
     3c0:	3f 90       	pop	r3
     3c2:	2f 90       	pop	r2
     3c4:	08 95       	ret

000003c6 <JOY_calibrate>:
	
	JOY_calibrate();
}

void JOY_calibrate(){
	JOY_x_init_pos = ADC_read(0);
     3c6:	80 e0       	ldi	r24, 0x00	; 0
     3c8:	0e 94 1d 01 	call	0x23a	; 0x23a <ADC_read>
     3cc:	80 93 fa 02 	sts	0x02FA, r24
	JOY_y_init_pos = ADC_read(1);
     3d0:	81 e0       	ldi	r24, 0x01	; 1
     3d2:	0e 94 1d 01 	call	0x23a	; 0x23a <ADC_read>
     3d6:	80 93 fb 02 	sts	0x02FB, r24
     3da:	08 95       	ret

000003dc <JOY_init>:
#include "joystick.h"
#include "adc_driver.h"
uint8_t JOY_x_init_pos, JOY_y_init_pos;

void JOY_init(){
	ADC_init();
     3dc:	0e 94 15 01 	call	0x22a	; 0x22a <ADC_init>
	
	DDRB &= ~(1<<PINB0) & ~(1<<PINB1) & ~(1<<PINB2);
     3e0:	87 b3       	in	r24, 0x17	; 23
     3e2:	88 7f       	andi	r24, 0xF8	; 248
     3e4:	87 bb       	out	0x17, r24	; 23
	PORTB |= (1<<PINB0) | (1<<PINB1) | (1<<PINB2);
     3e6:	88 b3       	in	r24, 0x18	; 24
     3e8:	87 60       	ori	r24, 0x07	; 7
     3ea:	88 bb       	out	0x18, r24	; 24
	
	JOY_calibrate();
     3ec:	0e 94 e3 01 	call	0x3c6	; 0x3c6 <JOY_calibrate>
     3f0:	08 95       	ret

000003f2 <JOY_button>:
	JOY_x_init_pos = ADC_read(0);
	JOY_y_init_pos = ADC_read(1);
}

bool JOY_button(int button){ //0: LEFT, 1: RIGHT, 2: Joystick
	switch(button){
     3f2:	81 30       	cpi	r24, 0x01	; 1
     3f4:	91 05       	cpc	r25, r1
     3f6:	41 f0       	breq	.+16     	; 0x408 <JOY_button+0x16>
     3f8:	82 30       	cpi	r24, 0x02	; 2
     3fa:	91 05       	cpc	r25, r1
     3fc:	49 f0       	breq	.+18     	; 0x410 <JOY_button+0x1e>
     3fe:	89 2b       	or	r24, r25
     400:	61 f4       	brne	.+24     	; 0x41a <JOY_button+0x28>
		case 0:
			return !(!(PINB & (1<<PINB0)));
     402:	86 b3       	in	r24, 0x16	; 22
     404:	81 70       	andi	r24, 0x01	; 1
     406:	08 95       	ret
		case 1:
			return !(!(PINB & (1<<PINB1)));
     408:	86 b3       	in	r24, 0x16	; 22
     40a:	86 95       	lsr	r24
     40c:	81 70       	andi	r24, 0x01	; 1
     40e:	08 95       	ret
		case 2:
			return !(!(PINB & (1<<PINB2)));
     410:	86 b3       	in	r24, 0x16	; 22
     412:	82 fb       	bst	r24, 2
     414:	88 27       	eor	r24, r24
     416:	80 f9       	bld	r24, 0
     418:	08 95       	ret
		default:
			return false;
     41a:	80 e0       	ldi	r24, 0x00	; 0
	}
}
     41c:	08 95       	ret

0000041e <JOY_getPosition>:

JOY_position_t JOY_getPosition(){
     41e:	0f 93       	push	r16
     420:	1f 93       	push	r17
     422:	cf 93       	push	r28
     424:	df 93       	push	r29
	int x_pos = (ADC_read(0)-JOY_x_init_pos)*100/127;
     426:	80 e0       	ldi	r24, 0x00	; 0
     428:	0e 94 1d 01 	call	0x23a	; 0x23a <ADC_read>
     42c:	28 2f       	mov	r18, r24
     42e:	30 e0       	ldi	r19, 0x00	; 0
     430:	80 91 fa 02 	lds	r24, 0x02FA
     434:	28 1b       	sub	r18, r24
     436:	31 09       	sbc	r19, r1
     438:	14 e6       	ldi	r17, 0x64	; 100
     43a:	12 9f       	mul	r17, r18
     43c:	c0 01       	movw	r24, r0
     43e:	13 9f       	mul	r17, r19
     440:	90 0d       	add	r25, r0
     442:	11 24       	eor	r1, r1
     444:	cf e7       	ldi	r28, 0x7F	; 127
     446:	d0 e0       	ldi	r29, 0x00	; 0
     448:	be 01       	movw	r22, r28
     44a:	0e 94 d6 03 	call	0x7ac	; 0x7ac <__divmodhi4>
     44e:	06 2f       	mov	r16, r22
	int y_pos = (ADC_read(1)-JOY_y_init_pos)*100/127;
     450:	81 e0       	ldi	r24, 0x01	; 1
     452:	0e 94 1d 01 	call	0x23a	; 0x23a <ADC_read>
     456:	48 2f       	mov	r20, r24
     458:	50 e0       	ldi	r21, 0x00	; 0
     45a:	80 91 fb 02 	lds	r24, 0x02FB
     45e:	48 1b       	sub	r20, r24
     460:	51 09       	sbc	r21, r1
     462:	14 9f       	mul	r17, r20
     464:	c0 01       	movw	r24, r0
     466:	15 9f       	mul	r17, r21
     468:	90 0d       	add	r25, r0
     46a:	11 24       	eor	r1, r1
     46c:	be 01       	movw	r22, r28
     46e:	0e 94 d6 03 	call	0x7ac	; 0x7ac <__divmodhi4>
     472:	96 2f       	mov	r25, r22
	JOY_position_t result;
	result.x = x_pos;
	result.y = y_pos;
	return result;
}
     474:	80 2f       	mov	r24, r16
     476:	df 91       	pop	r29
     478:	cf 91       	pop	r28
     47a:	1f 91       	pop	r17
     47c:	0f 91       	pop	r16
     47e:	08 95       	ret

00000480 <Joy_getDirection>:

JOY_direction_t Joy_getDirection(){
	JOY_position_t position = JOY_getPosition();
     480:	0e 94 0f 02 	call	0x41e	; 0x41e <JOY_getPosition>
	JOY_direction_t direction;
	int limit = 45;
	if(position.x < -limit){
     484:	83 3d       	cpi	r24, 0xD3	; 211
     486:	44 f0       	brlt	.+16     	; 0x498 <Joy_getDirection+0x18>
		direction = LEFT;
	}
	else if(position.x > limit){
     488:	8e 32       	cpi	r24, 0x2E	; 46
     48a:	44 f4       	brge	.+16     	; 0x49c <Joy_getDirection+0x1c>
		direction = RIGHT;
	}
	else if(position.y > limit){
     48c:	9e 32       	cpi	r25, 0x2E	; 46
     48e:	44 f4       	brge	.+16     	; 0x4a0 <Joy_getDirection+0x20>
		direction = UP;
	}
	else if (position.y < -limit){
     490:	93 3d       	cpi	r25, 0xD3	; 211
     492:	44 f4       	brge	.+16     	; 0x4a4 <Joy_getDirection+0x24>
		direction = DOWN;
     494:	83 e0       	ldi	r24, 0x03	; 3
     496:	08 95       	ret
JOY_direction_t Joy_getDirection(){
	JOY_position_t position = JOY_getPosition();
	JOY_direction_t direction;
	int limit = 45;
	if(position.x < -limit){
		direction = LEFT;
     498:	80 e0       	ldi	r24, 0x00	; 0
     49a:	08 95       	ret
	}
	else if(position.x > limit){
		direction = RIGHT;
     49c:	81 e0       	ldi	r24, 0x01	; 1
     49e:	08 95       	ret
	}
	else if(position.y > limit){
		direction = UP;
     4a0:	82 e0       	ldi	r24, 0x02	; 2
     4a2:	08 95       	ret
	}
	else if (position.y < -limit){
		direction = DOWN;
	}
	else{
		direction = NEUTRAL;
     4a4:	84 e0       	ldi	r24, 0x04	; 4
	}
	return direction;
     4a6:	08 95       	ret

000004a8 <OLED_go_to_page>:
	*OLED_c = c; 
}

void OLED_go_to_page(char page)
{
	OLED_command(0xB0+page);
     4a8:	90 eb       	ldi	r25, 0xB0	; 176
     4aa:	98 0f       	add	r25, r24
	OLED_home();
}	

void OLED_command(char c){
	volatile char* OLED_c = (char*) 0x1000;
	*OLED_c = c;
     4ac:	90 93 00 10 	sts	0x1000, r25
}

void OLED_go_to_page(char page)
{
	OLED_command(0xB0+page);
	current_page = page;
     4b0:	80 93 fc 02 	sts	0x02FC, r24
     4b4:	08 95       	ret

000004b6 <OLED_clear_page>:
}

void OLED_clear_page(char page){
	OLED_go_to_page(page);
     4b6:	0e 94 54 02 	call	0x4a8	; 0x4a8 <OLED_go_to_page>
     4ba:	80 e8       	ldi	r24, 0x80	; 128
     4bc:	90 e0       	ldi	r25, 0x00	; 0
	*OLED_c = c;
}

void OLED_data(char c){
	volatile char* OLED_c = (char*) 0x1200;
	*OLED_c = c; 
     4be:	e0 e0       	ldi	r30, 0x00	; 0
     4c0:	f2 e1       	ldi	r31, 0x12	; 18
     4c2:	10 82       	st	Z, r1
     4c4:	01 97       	sbiw	r24, 0x01	; 1
	current_page = page;
}

void OLED_clear_page(char page){
	OLED_go_to_page(page);
	for(int i = 0; i < 128; i++){
     4c6:	00 97       	sbiw	r24, 0x00	; 0
     4c8:	e1 f7       	brne	.-8      	; 0x4c2 <OLED_clear_page+0xc>
		OLED_data(0x00);
	}
}
     4ca:	08 95       	ret

000004cc <OLED_reset>:

void OLED_reset(){
     4cc:	cf 93       	push	r28
     4ce:	c0 e0       	ldi	r28, 0x00	; 0
	for (int i = 0; i < 8; i++){
		OLED_clear_page(i);
     4d0:	8c 2f       	mov	r24, r28
     4d2:	0e 94 5b 02 	call	0x4b6	; 0x4b6 <OLED_clear_page>
     4d6:	cf 5f       	subi	r28, 0xFF	; 255
		OLED_data(0x00);
	}
}

void OLED_reset(){
	for (int i = 0; i < 8; i++){
     4d8:	c8 30       	cpi	r28, 0x08	; 8
     4da:	d1 f7       	brne	.-12     	; 0x4d0 <OLED_reset+0x4>
		OLED_clear_page(i);
	}
}
     4dc:	cf 91       	pop	r28
     4de:	08 95       	ret

000004e0 <OLED_go_to_col>:
}

void OLED_go_to_col(char column){
	char msb = column & 0b11110000;
	msb /= 0b10000;
	char lsb = column & 0b00001111;
     4e0:	98 2f       	mov	r25, r24
     4e2:	9f 70       	andi	r25, 0x0F	; 15
	OLED_go_to_col(column);
}

void OLED_go_to_col(char column){
	char msb = column & 0b11110000;
	msb /= 0b10000;
     4e4:	28 2f       	mov	r18, r24
     4e6:	22 95       	swap	r18
     4e8:	2f 70       	andi	r18, 0x0F	; 15
	char lsb = column & 0b00001111;
	OLED_command(msb+0b00010000);
     4ea:	20 5f       	subi	r18, 0xF0	; 240
	OLED_home();
}	

void OLED_command(char c){
	volatile char* OLED_c = (char*) 0x1000;
	*OLED_c = c;
     4ec:	e0 e0       	ldi	r30, 0x00	; 0
     4ee:	f0 e1       	ldi	r31, 0x10	; 16
     4f0:	20 83       	st	Z, r18
     4f2:	90 83       	st	Z, r25
	char msb = column & 0b11110000;
	msb /= 0b10000;
	char lsb = column & 0b00001111;
	OLED_command(msb+0b00010000);
	OLED_command(lsb);
	current_column = column;
     4f4:	80 93 fd 02 	sts	0x02FD, r24
     4f8:	08 95       	ret

000004fa <OLED_home>:
		OLED_clear_page(i);
	}
}

void OLED_home(){
	OLED_go_to_page(0);
     4fa:	80 e0       	ldi	r24, 0x00	; 0
     4fc:	0e 94 54 02 	call	0x4a8	; 0x4a8 <OLED_go_to_page>
	OLED_go_to_col(0);
     500:	80 e0       	ldi	r24, 0x00	; 0
     502:	0e 94 70 02 	call	0x4e0	; 0x4e0 <OLED_go_to_col>
     506:	08 95       	ret

00000508 <OLED_init>:




void OLED_init(){
	MCUCR |= (1<<SRE);
     508:	85 b7       	in	r24, 0x35	; 53
     50a:	80 68       	ori	r24, 0x80	; 128
     50c:	85 bf       	out	0x35, r24	; 53
	SFIOR |= (1<<XMM2);
     50e:	80 b7       	in	r24, 0x30	; 48
     510:	80 62       	ori	r24, 0x20	; 32
     512:	80 bf       	out	0x30, r24	; 48
	OLED_home();
}	

void OLED_command(char c){
	volatile char* OLED_c = (char*) 0x1000;
	*OLED_c = c;
     514:	e0 e0       	ldi	r30, 0x00	; 0
     516:	f0 e1       	ldi	r31, 0x10	; 16
     518:	8e ea       	ldi	r24, 0xAE	; 174
     51a:	80 83       	st	Z, r24
     51c:	81 ea       	ldi	r24, 0xA1	; 161
     51e:	80 83       	st	Z, r24
     520:	8a ed       	ldi	r24, 0xDA	; 218
     522:	80 83       	st	Z, r24
     524:	82 e1       	ldi	r24, 0x12	; 18
     526:	80 83       	st	Z, r24
     528:	88 ec       	ldi	r24, 0xC8	; 200
     52a:	80 83       	st	Z, r24
     52c:	88 ea       	ldi	r24, 0xA8	; 168
     52e:	80 83       	st	Z, r24
     530:	8f e3       	ldi	r24, 0x3F	; 63
     532:	80 83       	st	Z, r24
     534:	85 ed       	ldi	r24, 0xD5	; 213
     536:	80 83       	st	Z, r24
     538:	80 e8       	ldi	r24, 0x80	; 128
     53a:	80 83       	st	Z, r24
     53c:	81 e8       	ldi	r24, 0x81	; 129
     53e:	80 83       	st	Z, r24
     540:	80 e5       	ldi	r24, 0x50	; 80
     542:	80 83       	st	Z, r24
     544:	89 ed       	ldi	r24, 0xD9	; 217
     546:	80 83       	st	Z, r24
     548:	81 e2       	ldi	r24, 0x21	; 33
     54a:	80 83       	st	Z, r24
     54c:	80 e2       	ldi	r24, 0x20	; 32
     54e:	80 83       	st	Z, r24
     550:	82 e0       	ldi	r24, 0x02	; 2
     552:	80 83       	st	Z, r24
     554:	8b ed       	ldi	r24, 0xDB	; 219
     556:	80 83       	st	Z, r24
     558:	80 e3       	ldi	r24, 0x30	; 48
     55a:	80 83       	st	Z, r24
     55c:	8d ea       	ldi	r24, 0xAD	; 173
     55e:	80 83       	st	Z, r24
     560:	10 82       	st	Z, r1
     562:	84 ea       	ldi	r24, 0xA4	; 164
     564:	80 83       	st	Z, r24
     566:	86 ea       	ldi	r24, 0xA6	; 166
     568:	80 83       	st	Z, r24
     56a:	8f ea       	ldi	r24, 0xAF	; 175
     56c:	80 83       	st	Z, r24
     56e:	80 eb       	ldi	r24, 0xB0	; 176
     570:	80 83       	st	Z, r24
     572:	10 82       	st	Z, r1
     574:	80 e1       	ldi	r24, 0x10	; 16
     576:	80 83       	st	Z, r24
	OLED_command(0xa6);    //set normal display
	OLED_command(0xaf);    // display on
	OLED_command(0xb0);		//Page start address
	OLED_command(0x00);		//Lower column start address
	OLED_command(0x10);		//Higher column start address.
	OLED_reset();
     578:	0e 94 66 02 	call	0x4cc	; 0x4cc <OLED_reset>
	OLED_home();
     57c:	0e 94 7d 02 	call	0x4fa	; 0x4fa <OLED_home>
     580:	08 95       	ret

00000582 <OLED_pos>:
void OLED_home(){
	OLED_go_to_page(0);
	OLED_go_to_col(0);
}

void OLED_pos(char page, char column){
     582:	cf 93       	push	r28
     584:	c6 2f       	mov	r28, r22
	OLED_go_to_page(page);
     586:	0e 94 54 02 	call	0x4a8	; 0x4a8 <OLED_go_to_page>
	OLED_go_to_col(column);
     58a:	8c 2f       	mov	r24, r28
     58c:	0e 94 70 02 	call	0x4e0	; 0x4e0 <OLED_go_to_col>
}
     590:	cf 91       	pop	r28
     592:	08 95       	ret

00000594 <OLED_clear_rest_of_line>:
	OLED_command(lsb);
	current_column = column;
}

void OLED_clear_rest_of_line(){
	for (int i = current_column; i < 128; i++ ){
     594:	80 91 fd 02 	lds	r24, 0x02FD
     598:	90 e0       	ldi	r25, 0x00	; 0
     59a:	80 38       	cpi	r24, 0x80	; 128
     59c:	91 05       	cpc	r25, r1
     59e:	3c f4       	brge	.+14     	; 0x5ae <OLED_clear_rest_of_line+0x1a>
	*OLED_c = c;
}

void OLED_data(char c){
	volatile char* OLED_c = (char*) 0x1200;
	*OLED_c = c; 
     5a0:	e0 e0       	ldi	r30, 0x00	; 0
     5a2:	f2 e1       	ldi	r31, 0x12	; 18
     5a4:	10 82       	st	Z, r1
	OLED_command(lsb);
	current_column = column;
}

void OLED_clear_rest_of_line(){
	for (int i = current_column; i < 128; i++ ){
     5a6:	01 96       	adiw	r24, 0x01	; 1
     5a8:	80 38       	cpi	r24, 0x80	; 128
     5aa:	91 05       	cpc	r25, r1
     5ac:	d9 f7       	brne	.-10     	; 0x5a4 <OLED_clear_rest_of_line+0x10>
		OLED_data(0);
	}
	current_column = 0;
     5ae:	10 92 fd 02 	sts	0x02FD, r1
     5b2:	08 95       	ret

000005b4 <OLED_print>:
}

void OLED_print(char character){
	if (character == '\n'){
     5b4:	8a 30       	cpi	r24, 0x0A	; 10
     5b6:	41 f0       	breq	.+16     	; 0x5c8 <OLED_print+0x14>
		OLED_clear_rest_of_line();	
	}
	else{
		for (int i = 0; i < char_width; i++){
     5b8:	90 91 08 01 	lds	r25, 0x0108
     5bc:	49 2f       	mov	r20, r25
     5be:	50 e0       	ldi	r21, 0x00	; 0
     5c0:	14 16       	cp	r1, r20
     5c2:	15 06       	cpc	r1, r21
     5c4:	24 f0       	brlt	.+8      	; 0x5ce <OLED_print+0x1a>
     5c6:	25 c0       	rjmp	.+74     	; 0x612 <OLED_print+0x5e>
	current_column = 0;
}

void OLED_print(char character){
	if (character == '\n'){
		OLED_clear_rest_of_line();	
     5c8:	0e 94 ca 02 	call	0x594	; 0x594 <OLED_clear_rest_of_line>
     5cc:	08 95       	ret
	}
	else{
		for (int i = 0; i < char_width; i++){
     5ce:	20 e0       	ldi	r18, 0x00	; 0
     5d0:	30 e0       	ldi	r19, 0x00	; 0
			char byte = pgm_read_byte((font + (character-32)*char_width + i));
     5d2:	68 2f       	mov	r22, r24
     5d4:	70 e0       	ldi	r23, 0x00	; 0
     5d6:	60 52       	subi	r22, 0x20	; 32
     5d8:	71 09       	sbc	r23, r1
	*OLED_c = c;
}

void OLED_data(char c){
	volatile char* OLED_c = (char*) 0x1200;
	*OLED_c = c; 
     5da:	a0 e0       	ldi	r26, 0x00	; 0
     5dc:	b2 e1       	ldi	r27, 0x12	; 18
	if (character == '\n'){
		OLED_clear_rest_of_line();	
	}
	else{
		for (int i = 0; i < char_width; i++){
			char byte = pgm_read_byte((font + (character-32)*char_width + i));
     5de:	46 9f       	mul	r20, r22
     5e0:	f0 01       	movw	r30, r0
     5e2:	47 9f       	mul	r20, r23
     5e4:	f0 0d       	add	r31, r0
     5e6:	56 9f       	mul	r21, r22
     5e8:	f0 0d       	add	r31, r0
     5ea:	11 24       	eor	r1, r1
     5ec:	e2 0f       	add	r30, r18
     5ee:	f3 1f       	adc	r31, r19
     5f0:	80 91 06 01 	lds	r24, 0x0106
     5f4:	90 91 07 01 	lds	r25, 0x0107
     5f8:	e8 0f       	add	r30, r24
     5fa:	f9 1f       	adc	r31, r25
     5fc:	e4 91       	lpm	r30, Z
	*OLED_c = c;
}

void OLED_data(char c){
	volatile char* OLED_c = (char*) 0x1200;
	*OLED_c = c; 
     5fe:	ec 93       	st	X, r30
void OLED_print(char character){
	if (character == '\n'){
		OLED_clear_rest_of_line();	
	}
	else{
		for (int i = 0; i < char_width; i++){
     600:	2f 5f       	subi	r18, 0xFF	; 255
     602:	3f 4f       	sbci	r19, 0xFF	; 255
     604:	90 91 08 01 	lds	r25, 0x0108
     608:	49 2f       	mov	r20, r25
     60a:	50 e0       	ldi	r21, 0x00	; 0
     60c:	24 17       	cp	r18, r20
     60e:	35 07       	cpc	r19, r21
     610:	34 f3       	brlt	.-52     	; 0x5de <OLED_print+0x2a>
			char byte = pgm_read_byte((font + (character-32)*char_width + i));
			OLED_data(byte);
		}
		if ((current_column+char_width)>127){
     612:	80 91 fd 02 	lds	r24, 0x02FD
     616:	48 0f       	add	r20, r24
     618:	51 1d       	adc	r21, r1
     61a:	40 38       	cpi	r20, 0x80	; 128
     61c:	51 05       	cpc	r21, r1
     61e:	1c f0       	brlt	.+6      	; 0x626 <OLED_print+0x72>
			current_column = 0;
     620:	10 92 fd 02 	sts	0x02FD, r1
     624:	08 95       	ret
		}
		else{
			current_column += char_width;
     626:	98 0f       	add	r25, r24
     628:	90 93 fd 02 	sts	0x02FD, r25
     62c:	08 95       	ret

0000062e <OLED_print_string>:
		}
	}
}

void OLED_print_string(char string[]){
     62e:	ef 92       	push	r14
     630:	ff 92       	push	r15
     632:	0f 93       	push	r16
     634:	1f 93       	push	r17
     636:	cf 93       	push	r28
     638:	df 93       	push	r29
     63a:	8c 01       	movw	r16, r24
     63c:	7c 01       	movw	r14, r24
	for(int i = 0; i < strlen(string); i++){
     63e:	c0 e0       	ldi	r28, 0x00	; 0
     640:	d0 e0       	ldi	r29, 0x00	; 0
     642:	06 c0       	rjmp	.+12     	; 0x650 <OLED_print_string+0x22>
		OLED_print(string[i]);
     644:	f7 01       	movw	r30, r14
     646:	81 91       	ld	r24, Z+
     648:	7f 01       	movw	r14, r30
     64a:	0e 94 da 02 	call	0x5b4	; 0x5b4 <OLED_print>
		}
	}
}

void OLED_print_string(char string[]){
	for(int i = 0; i < strlen(string); i++){
     64e:	21 96       	adiw	r28, 0x01	; 1
     650:	f8 01       	movw	r30, r16
     652:	01 90       	ld	r0, Z+
     654:	00 20       	and	r0, r0
     656:	e9 f7       	brne	.-6      	; 0x652 <OLED_print_string+0x24>
     658:	31 97       	sbiw	r30, 0x01	; 1
     65a:	e0 1b       	sub	r30, r16
     65c:	f1 0b       	sbc	r31, r17
     65e:	ce 17       	cp	r28, r30
     660:	df 07       	cpc	r29, r31
     662:	80 f3       	brcs	.-32     	; 0x644 <OLED_print_string+0x16>
		OLED_print(string[i]);
	}
}
     664:	df 91       	pop	r29
     666:	cf 91       	pop	r28
     668:	1f 91       	pop	r17
     66a:	0f 91       	pop	r16
     66c:	ff 90       	pop	r15
     66e:	ef 90       	pop	r14
     670:	08 95       	ret

00000672 <main>:


int main(void)
{	
	int ubrr = (F_CPU/16/9600)-1;
	UART_Init(ubrr);
     672:	8f e1       	ldi	r24, 0x1F	; 31
     674:	90 e0       	ldi	r25, 0x00	; 0
     676:	0e 94 4a 03 	call	0x694	; 0x694 <UART_Init>
	
	//can_init(MODE_NORMAL);
	//JOY_init();
	//OLED_init();	
	test_oled_menu();
     67a:	0e 94 55 03 	call	0x6aa	; 0x6aa <test_oled_menu>
		//can_transmit(commands);
	//}
	
	
	
}
     67e:	80 e0       	ldi	r24, 0x00	; 0
     680:	90 e0       	ldi	r25, 0x00	; 0
     682:	08 95       	ret

00000684 <UART_Transmit>:
}


void UART_Transmit( unsigned char data ){
	//Wait for empty transmit buffer
	while( !( UCSR0A & (1<<UDRE0)) );
     684:	5d 9b       	sbis	0x0b, 5	; 11
     686:	fe cf       	rjmp	.-4      	; 0x684 <UART_Transmit>
	
	//	Put data into buffer, sends the data
	UDR0 = data;
     688:	8c b9       	out	0x0c, r24	; 12
     68a:	08 95       	ret

0000068c <UART_Receive>:
}

unsigned char UART_Receive( void){
	//Wait for data to be received
	while( !(UCSR0A & (1<<RXC0)) );
     68c:	5f 9b       	sbis	0x0b, 7	; 11
     68e:	fe cf       	rjmp	.-4      	; 0x68c <UART_Receive>
	//Get and return received data from buffer
	return UDR0;
     690:	8c b1       	in	r24, 0x0c	; 12
}
     692:	08 95       	ret

00000694 <UART_Init>:
#include "rs232_driver.h"


void UART_Init( unsigned int ubrr){
	//Set baud rate
	UBRR0H = (unsigned char)(ubrr >> 8);
     694:	90 bd       	out	0x20, r25	; 32
	UBRR0L = (unsigned char)ubrr;
     696:	89 b9       	out	0x09, r24	; 9
	
	//Enable receiver and transmitter
	UCSR0B = (1 << RXEN0 | (1<<TXEN0));
     698:	88 e1       	ldi	r24, 0x18	; 24
     69a:	8a b9       	out	0x0a, r24	; 10
	
	//printf
	fdevopen((int (*)(char, struct __file*))&UART_Transmit, (int (*)(struct __file*))&UART_Receive);
     69c:	66 e4       	ldi	r22, 0x46	; 70
     69e:	73 e0       	ldi	r23, 0x03	; 3
     6a0:	82 e4       	ldi	r24, 0x42	; 66
     6a2:	93 e0       	ldi	r25, 0x03	; 3
     6a4:	0e 94 fe 03 	call	0x7fc	; 0x7fc <fdevopen>
     6a8:	08 95       	ret

000006aa <test_oled_menu>:
		
		_delay_ms(100);
	}
}

void test_oled_menu(){
     6aa:	cf 93       	push	r28
     6ac:	df 93       	push	r29
     6ae:	cd b7       	in	r28, 0x3d	; 61
     6b0:	de b7       	in	r29, 0x3e	; 62
     6b2:	6e 97       	sbiw	r28, 0x1e	; 30
     6b4:	0f b6       	in	r0, 0x3f	; 63
     6b6:	f8 94       	cli
     6b8:	de bf       	out	0x3e, r29	; 62
     6ba:	0f be       	out	0x3f, r0	; 63
     6bc:	cd bf       	out	0x3d, r28	; 61
	JOY_init();
     6be:	0e 94 ee 01 	call	0x3dc	; 0x3dc <JOY_init>
	OLED_init();
     6c2:	0e 94 84 02 	call	0x508	; 0x508 <OLED_init>
	char* main_menu[] = {"Submenu1", "Submenu2", "Submenu3"};
     6c6:	86 e0       	ldi	r24, 0x06	; 6
     6c8:	e9 e0       	ldi	r30, 0x09	; 9
     6ca:	f1 e0       	ldi	r31, 0x01	; 1
     6cc:	de 01       	movw	r26, r28
     6ce:	11 96       	adiw	r26, 0x01	; 1
     6d0:	01 90       	ld	r0, Z+
     6d2:	0d 92       	st	X+, r0
     6d4:	8a 95       	dec	r24
     6d6:	e1 f7       	brne	.-8      	; 0x6d0 <test_oled_menu+0x26>
	char* sub1[] = {"Back to main", "Option 1", "Option 2", "Option 3"};
     6d8:	88 e0       	ldi	r24, 0x08	; 8
     6da:	ef e0       	ldi	r30, 0x0F	; 15
     6dc:	f1 e0       	ldi	r31, 0x01	; 1
     6de:	de 01       	movw	r26, r28
     6e0:	17 96       	adiw	r26, 0x07	; 7
     6e2:	01 90       	ld	r0, Z+
     6e4:	0d 92       	st	X+, r0
     6e6:	8a 95       	dec	r24
     6e8:	e1 f7       	brne	.-8      	; 0x6e2 <test_oled_menu+0x38>
	char* sub2[] = {"Back to main", "Option 1", "Option 2", "Option 3"};
     6ea:	88 e0       	ldi	r24, 0x08	; 8
     6ec:	ef e0       	ldi	r30, 0x0F	; 15
     6ee:	f1 e0       	ldi	r31, 0x01	; 1
     6f0:	de 01       	movw	r26, r28
     6f2:	1f 96       	adiw	r26, 0x0f	; 15
     6f4:	01 90       	ld	r0, Z+
     6f6:	0d 92       	st	X+, r0
     6f8:	8a 95       	dec	r24
     6fa:	e1 f7       	brne	.-8      	; 0x6f4 <test_oled_menu+0x4a>
	char* sub3[] = {"Back to main", "Option 1", "Option 2", "Option 3"};
     6fc:	88 e0       	ldi	r24, 0x08	; 8
     6fe:	ef e0       	ldi	r30, 0x0F	; 15
     700:	f1 e0       	ldi	r31, 0x01	; 1
     702:	de 01       	movw	r26, r28
     704:	57 96       	adiw	r26, 0x17	; 23
     706:	01 90       	ld	r0, Z+
     708:	0d 92       	st	X+, r0
     70a:	8a 95       	dec	r24
     70c:	e1 f7       	brne	.-8      	; 0x706 <test_oled_menu+0x5c>
		switch(menu_move_selector(main_menu, 3)){
			case 0:
			printf("Sub1, option %d\n", menu_move_selector(sub1, 3));
			break;
			case 1:
			printf("Sub2, option %d\n", menu_move_selector(sub2, 3));
     70e:	0f 2e       	mov	r0, r31
     710:	fc e2       	ldi	r31, 0x2C	; 44
     712:	cf 2e       	mov	r12, r31
     714:	f2 e0       	ldi	r31, 0x02	; 2
     716:	df 2e       	mov	r13, r31
     718:	f0 2d       	mov	r31, r0
			break;
			case 2:
			printf("Sub3, option %d\n", menu_move_selector(sub3, 3));
     71a:	0f 2e       	mov	r0, r31
     71c:	fd e3       	ldi	r31, 0x3D	; 61
     71e:	ef 2e       	mov	r14, r31
     720:	f2 e0       	ldi	r31, 0x02	; 2
     722:	ff 2e       	mov	r15, r31
     724:	f0 2d       	mov	r31, r0
	char* sub3[] = {"Back to main", "Option 1", "Option 2", "Option 3"};
	
	while(1){
		switch(menu_move_selector(main_menu, 3)){
			case 0:
			printf("Sub1, option %d\n", menu_move_selector(sub1, 3));
     726:	0b e1       	ldi	r16, 0x1B	; 27
     728:	12 e0       	ldi	r17, 0x02	; 2
	char* sub1[] = {"Back to main", "Option 1", "Option 2", "Option 3"};
	char* sub2[] = {"Back to main", "Option 1", "Option 2", "Option 3"};
	char* sub3[] = {"Back to main", "Option 1", "Option 2", "Option 3"};
	
	while(1){
		switch(menu_move_selector(main_menu, 3)){
     72a:	63 e0       	ldi	r22, 0x03	; 3
     72c:	70 e0       	ldi	r23, 0x00	; 0
     72e:	ce 01       	movw	r24, r28
     730:	01 96       	adiw	r24, 0x01	; 1
     732:	0e 94 5f 01 	call	0x2be	; 0x2be <menu_move_selector>
     736:	81 30       	cpi	r24, 0x01	; 1
     738:	91 05       	cpc	r25, r1
     73a:	b1 f0       	breq	.+44     	; 0x768 <test_oled_menu+0xbe>
     73c:	82 30       	cpi	r24, 0x02	; 2
     73e:	91 05       	cpc	r25, r1
     740:	21 f1       	breq	.+72     	; 0x78a <test_oled_menu+0xe0>
     742:	89 2b       	or	r24, r25
     744:	91 f7       	brne	.-28     	; 0x72a <test_oled_menu+0x80>
			case 0:
			printf("Sub1, option %d\n", menu_move_selector(sub1, 3));
     746:	63 e0       	ldi	r22, 0x03	; 3
     748:	70 e0       	ldi	r23, 0x00	; 0
     74a:	ce 01       	movw	r24, r28
     74c:	07 96       	adiw	r24, 0x07	; 7
     74e:	0e 94 5f 01 	call	0x2be	; 0x2be <menu_move_selector>
     752:	9f 93       	push	r25
     754:	8f 93       	push	r24
     756:	1f 93       	push	r17
     758:	0f 93       	push	r16
     75a:	0e 94 49 04 	call	0x892	; 0x892 <printf>
			break;
     75e:	0f 90       	pop	r0
     760:	0f 90       	pop	r0
     762:	0f 90       	pop	r0
     764:	0f 90       	pop	r0
     766:	e1 cf       	rjmp	.-62     	; 0x72a <test_oled_menu+0x80>
			case 1:
			printf("Sub2, option %d\n", menu_move_selector(sub2, 3));
     768:	63 e0       	ldi	r22, 0x03	; 3
     76a:	70 e0       	ldi	r23, 0x00	; 0
     76c:	ce 01       	movw	r24, r28
     76e:	0f 96       	adiw	r24, 0x0f	; 15
     770:	0e 94 5f 01 	call	0x2be	; 0x2be <menu_move_selector>
     774:	9f 93       	push	r25
     776:	8f 93       	push	r24
     778:	df 92       	push	r13
     77a:	cf 92       	push	r12
     77c:	0e 94 49 04 	call	0x892	; 0x892 <printf>
			break;
     780:	0f 90       	pop	r0
     782:	0f 90       	pop	r0
     784:	0f 90       	pop	r0
     786:	0f 90       	pop	r0
     788:	d0 cf       	rjmp	.-96     	; 0x72a <test_oled_menu+0x80>
			case 2:
			printf("Sub3, option %d\n", menu_move_selector(sub3, 3));
     78a:	63 e0       	ldi	r22, 0x03	; 3
     78c:	70 e0       	ldi	r23, 0x00	; 0
     78e:	ce 01       	movw	r24, r28
     790:	47 96       	adiw	r24, 0x17	; 23
     792:	0e 94 5f 01 	call	0x2be	; 0x2be <menu_move_selector>
     796:	9f 93       	push	r25
     798:	8f 93       	push	r24
     79a:	ff 92       	push	r15
     79c:	ef 92       	push	r14
     79e:	0e 94 49 04 	call	0x892	; 0x892 <printf>
			break;
     7a2:	0f 90       	pop	r0
     7a4:	0f 90       	pop	r0
     7a6:	0f 90       	pop	r0
     7a8:	0f 90       	pop	r0
     7aa:	bf cf       	rjmp	.-130    	; 0x72a <test_oled_menu+0x80>

000007ac <__divmodhi4>:
     7ac:	97 fb       	bst	r25, 7
     7ae:	07 2e       	mov	r0, r23
     7b0:	16 f4       	brtc	.+4      	; 0x7b6 <__divmodhi4+0xa>
     7b2:	00 94       	com	r0
     7b4:	07 d0       	rcall	.+14     	; 0x7c4 <__divmodhi4_neg1>
     7b6:	77 fd       	sbrc	r23, 7
     7b8:	09 d0       	rcall	.+18     	; 0x7cc <__divmodhi4_neg2>
     7ba:	0e 94 ea 03 	call	0x7d4	; 0x7d4 <__udivmodhi4>
     7be:	07 fc       	sbrc	r0, 7
     7c0:	05 d0       	rcall	.+10     	; 0x7cc <__divmodhi4_neg2>
     7c2:	3e f4       	brtc	.+14     	; 0x7d2 <__divmodhi4_exit>

000007c4 <__divmodhi4_neg1>:
     7c4:	90 95       	com	r25
     7c6:	81 95       	neg	r24
     7c8:	9f 4f       	sbci	r25, 0xFF	; 255
     7ca:	08 95       	ret

000007cc <__divmodhi4_neg2>:
     7cc:	70 95       	com	r23
     7ce:	61 95       	neg	r22
     7d0:	7f 4f       	sbci	r23, 0xFF	; 255

000007d2 <__divmodhi4_exit>:
     7d2:	08 95       	ret

000007d4 <__udivmodhi4>:
     7d4:	aa 1b       	sub	r26, r26
     7d6:	bb 1b       	sub	r27, r27
     7d8:	51 e1       	ldi	r21, 0x11	; 17
     7da:	07 c0       	rjmp	.+14     	; 0x7ea <__udivmodhi4_ep>

000007dc <__udivmodhi4_loop>:
     7dc:	aa 1f       	adc	r26, r26
     7de:	bb 1f       	adc	r27, r27
     7e0:	a6 17       	cp	r26, r22
     7e2:	b7 07       	cpc	r27, r23
     7e4:	10 f0       	brcs	.+4      	; 0x7ea <__udivmodhi4_ep>
     7e6:	a6 1b       	sub	r26, r22
     7e8:	b7 0b       	sbc	r27, r23

000007ea <__udivmodhi4_ep>:
     7ea:	88 1f       	adc	r24, r24
     7ec:	99 1f       	adc	r25, r25
     7ee:	5a 95       	dec	r21
     7f0:	a9 f7       	brne	.-22     	; 0x7dc <__udivmodhi4_loop>
     7f2:	80 95       	com	r24
     7f4:	90 95       	com	r25
     7f6:	bc 01       	movw	r22, r24
     7f8:	cd 01       	movw	r24, r26
     7fa:	08 95       	ret

000007fc <fdevopen>:
     7fc:	0f 93       	push	r16
     7fe:	1f 93       	push	r17
     800:	cf 93       	push	r28
     802:	df 93       	push	r29
     804:	ec 01       	movw	r28, r24
     806:	8b 01       	movw	r16, r22
     808:	00 97       	sbiw	r24, 0x00	; 0
     80a:	31 f4       	brne	.+12     	; 0x818 <fdevopen+0x1c>
     80c:	61 15       	cp	r22, r1
     80e:	71 05       	cpc	r23, r1
     810:	19 f4       	brne	.+6      	; 0x818 <fdevopen+0x1c>
     812:	80 e0       	ldi	r24, 0x00	; 0
     814:	90 e0       	ldi	r25, 0x00	; 0
     816:	38 c0       	rjmp	.+112    	; 0x888 <fdevopen+0x8c>
     818:	6e e0       	ldi	r22, 0x0E	; 14
     81a:	70 e0       	ldi	r23, 0x00	; 0
     81c:	81 e0       	ldi	r24, 0x01	; 1
     81e:	90 e0       	ldi	r25, 0x00	; 0
     820:	0e 94 2f 06 	call	0xc5e	; 0xc5e <calloc>
     824:	fc 01       	movw	r30, r24
     826:	00 97       	sbiw	r24, 0x00	; 0
     828:	a1 f3       	breq	.-24     	; 0x812 <fdevopen+0x16>
     82a:	80 e8       	ldi	r24, 0x80	; 128
     82c:	83 83       	std	Z+3, r24	; 0x03
     82e:	01 15       	cp	r16, r1
     830:	11 05       	cpc	r17, r1
     832:	71 f0       	breq	.+28     	; 0x850 <fdevopen+0x54>
     834:	13 87       	std	Z+11, r17	; 0x0b
     836:	02 87       	std	Z+10, r16	; 0x0a
     838:	81 e8       	ldi	r24, 0x81	; 129
     83a:	83 83       	std	Z+3, r24	; 0x03
     83c:	80 91 fe 02 	lds	r24, 0x02FE
     840:	90 91 ff 02 	lds	r25, 0x02FF
     844:	89 2b       	or	r24, r25
     846:	21 f4       	brne	.+8      	; 0x850 <fdevopen+0x54>
     848:	f0 93 ff 02 	sts	0x02FF, r31
     84c:	e0 93 fe 02 	sts	0x02FE, r30
     850:	20 97       	sbiw	r28, 0x00	; 0
     852:	c9 f0       	breq	.+50     	; 0x886 <fdevopen+0x8a>
     854:	d1 87       	std	Z+9, r29	; 0x09
     856:	c0 87       	std	Z+8, r28	; 0x08
     858:	83 81       	ldd	r24, Z+3	; 0x03
     85a:	82 60       	ori	r24, 0x02	; 2
     85c:	83 83       	std	Z+3, r24	; 0x03
     85e:	80 91 00 03 	lds	r24, 0x0300
     862:	90 91 01 03 	lds	r25, 0x0301
     866:	89 2b       	or	r24, r25
     868:	71 f4       	brne	.+28     	; 0x886 <fdevopen+0x8a>
     86a:	f0 93 01 03 	sts	0x0301, r31
     86e:	e0 93 00 03 	sts	0x0300, r30
     872:	80 91 02 03 	lds	r24, 0x0302
     876:	90 91 03 03 	lds	r25, 0x0303
     87a:	89 2b       	or	r24, r25
     87c:	21 f4       	brne	.+8      	; 0x886 <fdevopen+0x8a>
     87e:	f0 93 03 03 	sts	0x0303, r31
     882:	e0 93 02 03 	sts	0x0302, r30
     886:	cf 01       	movw	r24, r30
     888:	df 91       	pop	r29
     88a:	cf 91       	pop	r28
     88c:	1f 91       	pop	r17
     88e:	0f 91       	pop	r16
     890:	08 95       	ret

00000892 <printf>:
     892:	a0 e0       	ldi	r26, 0x00	; 0
     894:	b0 e0       	ldi	r27, 0x00	; 0
     896:	ef e4       	ldi	r30, 0x4F	; 79
     898:	f4 e0       	ldi	r31, 0x04	; 4
     89a:	0c 94 2f 08 	jmp	0x105e	; 0x105e <__prologue_saves__+0x20>
     89e:	fe 01       	movw	r30, r28
     8a0:	35 96       	adiw	r30, 0x05	; 5
     8a2:	61 91       	ld	r22, Z+
     8a4:	71 91       	ld	r23, Z+
     8a6:	af 01       	movw	r20, r30
     8a8:	80 91 00 03 	lds	r24, 0x0300
     8ac:	90 91 01 03 	lds	r25, 0x0301
     8b0:	0e 94 5d 04 	call	0x8ba	; 0x8ba <vfprintf>
     8b4:	e2 e0       	ldi	r30, 0x02	; 2
     8b6:	0c 94 4b 08 	jmp	0x1096	; 0x1096 <__epilogue_restores__+0x20>

000008ba <vfprintf>:
     8ba:	ac e0       	ldi	r26, 0x0C	; 12
     8bc:	b0 e0       	ldi	r27, 0x00	; 0
     8be:	e3 e6       	ldi	r30, 0x63	; 99
     8c0:	f4 e0       	ldi	r31, 0x04	; 4
     8c2:	0c 94 1f 08 	jmp	0x103e	; 0x103e <__prologue_saves__>
     8c6:	7c 01       	movw	r14, r24
     8c8:	6b 01       	movw	r12, r22
     8ca:	8a 01       	movw	r16, r20
     8cc:	fc 01       	movw	r30, r24
     8ce:	17 82       	std	Z+7, r1	; 0x07
     8d0:	16 82       	std	Z+6, r1	; 0x06
     8d2:	83 81       	ldd	r24, Z+3	; 0x03
     8d4:	81 ff       	sbrs	r24, 1
     8d6:	bd c1       	rjmp	.+890    	; 0xc52 <vfprintf+0x398>
     8d8:	ce 01       	movw	r24, r28
     8da:	01 96       	adiw	r24, 0x01	; 1
     8dc:	4c 01       	movw	r8, r24
     8de:	f7 01       	movw	r30, r14
     8e0:	93 81       	ldd	r25, Z+3	; 0x03
     8e2:	f6 01       	movw	r30, r12
     8e4:	93 fd       	sbrc	r25, 3
     8e6:	85 91       	lpm	r24, Z+
     8e8:	93 ff       	sbrs	r25, 3
     8ea:	81 91       	ld	r24, Z+
     8ec:	6f 01       	movw	r12, r30
     8ee:	88 23       	and	r24, r24
     8f0:	09 f4       	brne	.+2      	; 0x8f4 <vfprintf+0x3a>
     8f2:	ab c1       	rjmp	.+854    	; 0xc4a <vfprintf+0x390>
     8f4:	85 32       	cpi	r24, 0x25	; 37
     8f6:	39 f4       	brne	.+14     	; 0x906 <vfprintf+0x4c>
     8f8:	93 fd       	sbrc	r25, 3
     8fa:	85 91       	lpm	r24, Z+
     8fc:	93 ff       	sbrs	r25, 3
     8fe:	81 91       	ld	r24, Z+
     900:	6f 01       	movw	r12, r30
     902:	85 32       	cpi	r24, 0x25	; 37
     904:	29 f4       	brne	.+10     	; 0x910 <vfprintf+0x56>
     906:	b7 01       	movw	r22, r14
     908:	90 e0       	ldi	r25, 0x00	; 0
     90a:	0e 94 8f 07 	call	0xf1e	; 0xf1e <fputc>
     90e:	e7 cf       	rjmp	.-50     	; 0x8de <vfprintf+0x24>
     910:	51 2c       	mov	r5, r1
     912:	31 2c       	mov	r3, r1
     914:	20 e0       	ldi	r18, 0x00	; 0
     916:	20 32       	cpi	r18, 0x20	; 32
     918:	a0 f4       	brcc	.+40     	; 0x942 <vfprintf+0x88>
     91a:	8b 32       	cpi	r24, 0x2B	; 43
     91c:	69 f0       	breq	.+26     	; 0x938 <vfprintf+0x7e>
     91e:	30 f4       	brcc	.+12     	; 0x92c <vfprintf+0x72>
     920:	80 32       	cpi	r24, 0x20	; 32
     922:	59 f0       	breq	.+22     	; 0x93a <vfprintf+0x80>
     924:	83 32       	cpi	r24, 0x23	; 35
     926:	69 f4       	brne	.+26     	; 0x942 <vfprintf+0x88>
     928:	20 61       	ori	r18, 0x10	; 16
     92a:	2c c0       	rjmp	.+88     	; 0x984 <vfprintf+0xca>
     92c:	8d 32       	cpi	r24, 0x2D	; 45
     92e:	39 f0       	breq	.+14     	; 0x93e <vfprintf+0x84>
     930:	80 33       	cpi	r24, 0x30	; 48
     932:	39 f4       	brne	.+14     	; 0x942 <vfprintf+0x88>
     934:	21 60       	ori	r18, 0x01	; 1
     936:	26 c0       	rjmp	.+76     	; 0x984 <vfprintf+0xca>
     938:	22 60       	ori	r18, 0x02	; 2
     93a:	24 60       	ori	r18, 0x04	; 4
     93c:	23 c0       	rjmp	.+70     	; 0x984 <vfprintf+0xca>
     93e:	28 60       	ori	r18, 0x08	; 8
     940:	21 c0       	rjmp	.+66     	; 0x984 <vfprintf+0xca>
     942:	27 fd       	sbrc	r18, 7
     944:	27 c0       	rjmp	.+78     	; 0x994 <vfprintf+0xda>
     946:	30 ed       	ldi	r19, 0xD0	; 208
     948:	38 0f       	add	r19, r24
     94a:	3a 30       	cpi	r19, 0x0A	; 10
     94c:	78 f4       	brcc	.+30     	; 0x96c <vfprintf+0xb2>
     94e:	26 ff       	sbrs	r18, 6
     950:	06 c0       	rjmp	.+12     	; 0x95e <vfprintf+0xa4>
     952:	fa e0       	ldi	r31, 0x0A	; 10
     954:	5f 9e       	mul	r5, r31
     956:	30 0d       	add	r19, r0
     958:	11 24       	eor	r1, r1
     95a:	53 2e       	mov	r5, r19
     95c:	13 c0       	rjmp	.+38     	; 0x984 <vfprintf+0xca>
     95e:	8a e0       	ldi	r24, 0x0A	; 10
     960:	38 9e       	mul	r3, r24
     962:	30 0d       	add	r19, r0
     964:	11 24       	eor	r1, r1
     966:	33 2e       	mov	r3, r19
     968:	20 62       	ori	r18, 0x20	; 32
     96a:	0c c0       	rjmp	.+24     	; 0x984 <vfprintf+0xca>
     96c:	8e 32       	cpi	r24, 0x2E	; 46
     96e:	21 f4       	brne	.+8      	; 0x978 <vfprintf+0xbe>
     970:	26 fd       	sbrc	r18, 6
     972:	6b c1       	rjmp	.+726    	; 0xc4a <vfprintf+0x390>
     974:	20 64       	ori	r18, 0x40	; 64
     976:	06 c0       	rjmp	.+12     	; 0x984 <vfprintf+0xca>
     978:	8c 36       	cpi	r24, 0x6C	; 108
     97a:	11 f4       	brne	.+4      	; 0x980 <vfprintf+0xc6>
     97c:	20 68       	ori	r18, 0x80	; 128
     97e:	02 c0       	rjmp	.+4      	; 0x984 <vfprintf+0xca>
     980:	88 36       	cpi	r24, 0x68	; 104
     982:	41 f4       	brne	.+16     	; 0x994 <vfprintf+0xda>
     984:	f6 01       	movw	r30, r12
     986:	93 fd       	sbrc	r25, 3
     988:	85 91       	lpm	r24, Z+
     98a:	93 ff       	sbrs	r25, 3
     98c:	81 91       	ld	r24, Z+
     98e:	6f 01       	movw	r12, r30
     990:	81 11       	cpse	r24, r1
     992:	c1 cf       	rjmp	.-126    	; 0x916 <vfprintf+0x5c>
     994:	98 2f       	mov	r25, r24
     996:	9f 7d       	andi	r25, 0xDF	; 223
     998:	95 54       	subi	r25, 0x45	; 69
     99a:	93 30       	cpi	r25, 0x03	; 3
     99c:	28 f4       	brcc	.+10     	; 0x9a8 <vfprintf+0xee>
     99e:	0c 5f       	subi	r16, 0xFC	; 252
     9a0:	1f 4f       	sbci	r17, 0xFF	; 255
     9a2:	ff e3       	ldi	r31, 0x3F	; 63
     9a4:	f9 83       	std	Y+1, r31	; 0x01
     9a6:	0d c0       	rjmp	.+26     	; 0x9c2 <vfprintf+0x108>
     9a8:	83 36       	cpi	r24, 0x63	; 99
     9aa:	31 f0       	breq	.+12     	; 0x9b8 <vfprintf+0xfe>
     9ac:	83 37       	cpi	r24, 0x73	; 115
     9ae:	71 f0       	breq	.+28     	; 0x9cc <vfprintf+0x112>
     9b0:	83 35       	cpi	r24, 0x53	; 83
     9b2:	09 f0       	breq	.+2      	; 0x9b6 <vfprintf+0xfc>
     9b4:	5b c0       	rjmp	.+182    	; 0xa6c <vfprintf+0x1b2>
     9b6:	22 c0       	rjmp	.+68     	; 0x9fc <vfprintf+0x142>
     9b8:	f8 01       	movw	r30, r16
     9ba:	80 81       	ld	r24, Z
     9bc:	89 83       	std	Y+1, r24	; 0x01
     9be:	0e 5f       	subi	r16, 0xFE	; 254
     9c0:	1f 4f       	sbci	r17, 0xFF	; 255
     9c2:	44 24       	eor	r4, r4
     9c4:	43 94       	inc	r4
     9c6:	51 2c       	mov	r5, r1
     9c8:	54 01       	movw	r10, r8
     9ca:	15 c0       	rjmp	.+42     	; 0x9f6 <vfprintf+0x13c>
     9cc:	38 01       	movw	r6, r16
     9ce:	f2 e0       	ldi	r31, 0x02	; 2
     9d0:	6f 0e       	add	r6, r31
     9d2:	71 1c       	adc	r7, r1
     9d4:	f8 01       	movw	r30, r16
     9d6:	a0 80       	ld	r10, Z
     9d8:	b1 80       	ldd	r11, Z+1	; 0x01
     9da:	26 ff       	sbrs	r18, 6
     9dc:	03 c0       	rjmp	.+6      	; 0x9e4 <vfprintf+0x12a>
     9de:	65 2d       	mov	r22, r5
     9e0:	70 e0       	ldi	r23, 0x00	; 0
     9e2:	02 c0       	rjmp	.+4      	; 0x9e8 <vfprintf+0x12e>
     9e4:	6f ef       	ldi	r22, 0xFF	; 255
     9e6:	7f ef       	ldi	r23, 0xFF	; 255
     9e8:	c5 01       	movw	r24, r10
     9ea:	2c 87       	std	Y+12, r18	; 0x0c
     9ec:	0e 94 84 07 	call	0xf08	; 0xf08 <strnlen>
     9f0:	2c 01       	movw	r4, r24
     9f2:	83 01       	movw	r16, r6
     9f4:	2c 85       	ldd	r18, Y+12	; 0x0c
     9f6:	2f 77       	andi	r18, 0x7F	; 127
     9f8:	22 2e       	mov	r2, r18
     9fa:	17 c0       	rjmp	.+46     	; 0xa2a <vfprintf+0x170>
     9fc:	38 01       	movw	r6, r16
     9fe:	f2 e0       	ldi	r31, 0x02	; 2
     a00:	6f 0e       	add	r6, r31
     a02:	71 1c       	adc	r7, r1
     a04:	f8 01       	movw	r30, r16
     a06:	a0 80       	ld	r10, Z
     a08:	b1 80       	ldd	r11, Z+1	; 0x01
     a0a:	26 ff       	sbrs	r18, 6
     a0c:	03 c0       	rjmp	.+6      	; 0xa14 <vfprintf+0x15a>
     a0e:	65 2d       	mov	r22, r5
     a10:	70 e0       	ldi	r23, 0x00	; 0
     a12:	02 c0       	rjmp	.+4      	; 0xa18 <vfprintf+0x15e>
     a14:	6f ef       	ldi	r22, 0xFF	; 255
     a16:	7f ef       	ldi	r23, 0xFF	; 255
     a18:	c5 01       	movw	r24, r10
     a1a:	2c 87       	std	Y+12, r18	; 0x0c
     a1c:	0e 94 72 07 	call	0xee4	; 0xee4 <strnlen_P>
     a20:	2c 01       	movw	r4, r24
     a22:	2c 85       	ldd	r18, Y+12	; 0x0c
     a24:	20 68       	ori	r18, 0x80	; 128
     a26:	22 2e       	mov	r2, r18
     a28:	83 01       	movw	r16, r6
     a2a:	23 fc       	sbrc	r2, 3
     a2c:	1b c0       	rjmp	.+54     	; 0xa64 <vfprintf+0x1aa>
     a2e:	83 2d       	mov	r24, r3
     a30:	90 e0       	ldi	r25, 0x00	; 0
     a32:	48 16       	cp	r4, r24
     a34:	59 06       	cpc	r5, r25
     a36:	b0 f4       	brcc	.+44     	; 0xa64 <vfprintf+0x1aa>
     a38:	b7 01       	movw	r22, r14
     a3a:	80 e2       	ldi	r24, 0x20	; 32
     a3c:	90 e0       	ldi	r25, 0x00	; 0
     a3e:	0e 94 8f 07 	call	0xf1e	; 0xf1e <fputc>
     a42:	3a 94       	dec	r3
     a44:	f4 cf       	rjmp	.-24     	; 0xa2e <vfprintf+0x174>
     a46:	f5 01       	movw	r30, r10
     a48:	27 fc       	sbrc	r2, 7
     a4a:	85 91       	lpm	r24, Z+
     a4c:	27 fe       	sbrs	r2, 7
     a4e:	81 91       	ld	r24, Z+
     a50:	5f 01       	movw	r10, r30
     a52:	b7 01       	movw	r22, r14
     a54:	90 e0       	ldi	r25, 0x00	; 0
     a56:	0e 94 8f 07 	call	0xf1e	; 0xf1e <fputc>
     a5a:	31 10       	cpse	r3, r1
     a5c:	3a 94       	dec	r3
     a5e:	f1 e0       	ldi	r31, 0x01	; 1
     a60:	4f 1a       	sub	r4, r31
     a62:	51 08       	sbc	r5, r1
     a64:	41 14       	cp	r4, r1
     a66:	51 04       	cpc	r5, r1
     a68:	71 f7       	brne	.-36     	; 0xa46 <vfprintf+0x18c>
     a6a:	e5 c0       	rjmp	.+458    	; 0xc36 <vfprintf+0x37c>
     a6c:	84 36       	cpi	r24, 0x64	; 100
     a6e:	11 f0       	breq	.+4      	; 0xa74 <vfprintf+0x1ba>
     a70:	89 36       	cpi	r24, 0x69	; 105
     a72:	39 f5       	brne	.+78     	; 0xac2 <vfprintf+0x208>
     a74:	f8 01       	movw	r30, r16
     a76:	27 ff       	sbrs	r18, 7
     a78:	07 c0       	rjmp	.+14     	; 0xa88 <vfprintf+0x1ce>
     a7a:	60 81       	ld	r22, Z
     a7c:	71 81       	ldd	r23, Z+1	; 0x01
     a7e:	82 81       	ldd	r24, Z+2	; 0x02
     a80:	93 81       	ldd	r25, Z+3	; 0x03
     a82:	0c 5f       	subi	r16, 0xFC	; 252
     a84:	1f 4f       	sbci	r17, 0xFF	; 255
     a86:	08 c0       	rjmp	.+16     	; 0xa98 <vfprintf+0x1de>
     a88:	60 81       	ld	r22, Z
     a8a:	71 81       	ldd	r23, Z+1	; 0x01
     a8c:	88 27       	eor	r24, r24
     a8e:	77 fd       	sbrc	r23, 7
     a90:	80 95       	com	r24
     a92:	98 2f       	mov	r25, r24
     a94:	0e 5f       	subi	r16, 0xFE	; 254
     a96:	1f 4f       	sbci	r17, 0xFF	; 255
     a98:	2f 76       	andi	r18, 0x6F	; 111
     a9a:	b2 2e       	mov	r11, r18
     a9c:	97 ff       	sbrs	r25, 7
     a9e:	09 c0       	rjmp	.+18     	; 0xab2 <vfprintf+0x1f8>
     aa0:	90 95       	com	r25
     aa2:	80 95       	com	r24
     aa4:	70 95       	com	r23
     aa6:	61 95       	neg	r22
     aa8:	7f 4f       	sbci	r23, 0xFF	; 255
     aaa:	8f 4f       	sbci	r24, 0xFF	; 255
     aac:	9f 4f       	sbci	r25, 0xFF	; 255
     aae:	20 68       	ori	r18, 0x80	; 128
     ab0:	b2 2e       	mov	r11, r18
     ab2:	2a e0       	ldi	r18, 0x0A	; 10
     ab4:	30 e0       	ldi	r19, 0x00	; 0
     ab6:	a4 01       	movw	r20, r8
     ab8:	0e 94 c1 07 	call	0xf82	; 0xf82 <__ultoa_invert>
     abc:	a8 2e       	mov	r10, r24
     abe:	a8 18       	sub	r10, r8
     ac0:	44 c0       	rjmp	.+136    	; 0xb4a <vfprintf+0x290>
     ac2:	85 37       	cpi	r24, 0x75	; 117
     ac4:	29 f4       	brne	.+10     	; 0xad0 <vfprintf+0x216>
     ac6:	2f 7e       	andi	r18, 0xEF	; 239
     ac8:	b2 2e       	mov	r11, r18
     aca:	2a e0       	ldi	r18, 0x0A	; 10
     acc:	30 e0       	ldi	r19, 0x00	; 0
     ace:	25 c0       	rjmp	.+74     	; 0xb1a <vfprintf+0x260>
     ad0:	f2 2f       	mov	r31, r18
     ad2:	f9 7f       	andi	r31, 0xF9	; 249
     ad4:	bf 2e       	mov	r11, r31
     ad6:	8f 36       	cpi	r24, 0x6F	; 111
     ad8:	c1 f0       	breq	.+48     	; 0xb0a <vfprintf+0x250>
     ada:	18 f4       	brcc	.+6      	; 0xae2 <vfprintf+0x228>
     adc:	88 35       	cpi	r24, 0x58	; 88
     ade:	79 f0       	breq	.+30     	; 0xafe <vfprintf+0x244>
     ae0:	b4 c0       	rjmp	.+360    	; 0xc4a <vfprintf+0x390>
     ae2:	80 37       	cpi	r24, 0x70	; 112
     ae4:	19 f0       	breq	.+6      	; 0xaec <vfprintf+0x232>
     ae6:	88 37       	cpi	r24, 0x78	; 120
     ae8:	21 f0       	breq	.+8      	; 0xaf2 <vfprintf+0x238>
     aea:	af c0       	rjmp	.+350    	; 0xc4a <vfprintf+0x390>
     aec:	2f 2f       	mov	r18, r31
     aee:	20 61       	ori	r18, 0x10	; 16
     af0:	b2 2e       	mov	r11, r18
     af2:	b4 fe       	sbrs	r11, 4
     af4:	0d c0       	rjmp	.+26     	; 0xb10 <vfprintf+0x256>
     af6:	8b 2d       	mov	r24, r11
     af8:	84 60       	ori	r24, 0x04	; 4
     afa:	b8 2e       	mov	r11, r24
     afc:	09 c0       	rjmp	.+18     	; 0xb10 <vfprintf+0x256>
     afe:	24 ff       	sbrs	r18, 4
     b00:	0a c0       	rjmp	.+20     	; 0xb16 <vfprintf+0x25c>
     b02:	9f 2f       	mov	r25, r31
     b04:	96 60       	ori	r25, 0x06	; 6
     b06:	b9 2e       	mov	r11, r25
     b08:	06 c0       	rjmp	.+12     	; 0xb16 <vfprintf+0x25c>
     b0a:	28 e0       	ldi	r18, 0x08	; 8
     b0c:	30 e0       	ldi	r19, 0x00	; 0
     b0e:	05 c0       	rjmp	.+10     	; 0xb1a <vfprintf+0x260>
     b10:	20 e1       	ldi	r18, 0x10	; 16
     b12:	30 e0       	ldi	r19, 0x00	; 0
     b14:	02 c0       	rjmp	.+4      	; 0xb1a <vfprintf+0x260>
     b16:	20 e1       	ldi	r18, 0x10	; 16
     b18:	32 e0       	ldi	r19, 0x02	; 2
     b1a:	f8 01       	movw	r30, r16
     b1c:	b7 fe       	sbrs	r11, 7
     b1e:	07 c0       	rjmp	.+14     	; 0xb2e <vfprintf+0x274>
     b20:	60 81       	ld	r22, Z
     b22:	71 81       	ldd	r23, Z+1	; 0x01
     b24:	82 81       	ldd	r24, Z+2	; 0x02
     b26:	93 81       	ldd	r25, Z+3	; 0x03
     b28:	0c 5f       	subi	r16, 0xFC	; 252
     b2a:	1f 4f       	sbci	r17, 0xFF	; 255
     b2c:	06 c0       	rjmp	.+12     	; 0xb3a <vfprintf+0x280>
     b2e:	60 81       	ld	r22, Z
     b30:	71 81       	ldd	r23, Z+1	; 0x01
     b32:	80 e0       	ldi	r24, 0x00	; 0
     b34:	90 e0       	ldi	r25, 0x00	; 0
     b36:	0e 5f       	subi	r16, 0xFE	; 254
     b38:	1f 4f       	sbci	r17, 0xFF	; 255
     b3a:	a4 01       	movw	r20, r8
     b3c:	0e 94 c1 07 	call	0xf82	; 0xf82 <__ultoa_invert>
     b40:	a8 2e       	mov	r10, r24
     b42:	a8 18       	sub	r10, r8
     b44:	fb 2d       	mov	r31, r11
     b46:	ff 77       	andi	r31, 0x7F	; 127
     b48:	bf 2e       	mov	r11, r31
     b4a:	b6 fe       	sbrs	r11, 6
     b4c:	0b c0       	rjmp	.+22     	; 0xb64 <vfprintf+0x2aa>
     b4e:	2b 2d       	mov	r18, r11
     b50:	2e 7f       	andi	r18, 0xFE	; 254
     b52:	a5 14       	cp	r10, r5
     b54:	50 f4       	brcc	.+20     	; 0xb6a <vfprintf+0x2b0>
     b56:	b4 fe       	sbrs	r11, 4
     b58:	0a c0       	rjmp	.+20     	; 0xb6e <vfprintf+0x2b4>
     b5a:	b2 fc       	sbrc	r11, 2
     b5c:	08 c0       	rjmp	.+16     	; 0xb6e <vfprintf+0x2b4>
     b5e:	2b 2d       	mov	r18, r11
     b60:	2e 7e       	andi	r18, 0xEE	; 238
     b62:	05 c0       	rjmp	.+10     	; 0xb6e <vfprintf+0x2b4>
     b64:	7a 2c       	mov	r7, r10
     b66:	2b 2d       	mov	r18, r11
     b68:	03 c0       	rjmp	.+6      	; 0xb70 <vfprintf+0x2b6>
     b6a:	7a 2c       	mov	r7, r10
     b6c:	01 c0       	rjmp	.+2      	; 0xb70 <vfprintf+0x2b6>
     b6e:	75 2c       	mov	r7, r5
     b70:	24 ff       	sbrs	r18, 4
     b72:	0d c0       	rjmp	.+26     	; 0xb8e <vfprintf+0x2d4>
     b74:	fe 01       	movw	r30, r28
     b76:	ea 0d       	add	r30, r10
     b78:	f1 1d       	adc	r31, r1
     b7a:	80 81       	ld	r24, Z
     b7c:	80 33       	cpi	r24, 0x30	; 48
     b7e:	11 f4       	brne	.+4      	; 0xb84 <vfprintf+0x2ca>
     b80:	29 7e       	andi	r18, 0xE9	; 233
     b82:	09 c0       	rjmp	.+18     	; 0xb96 <vfprintf+0x2dc>
     b84:	22 ff       	sbrs	r18, 2
     b86:	06 c0       	rjmp	.+12     	; 0xb94 <vfprintf+0x2da>
     b88:	73 94       	inc	r7
     b8a:	73 94       	inc	r7
     b8c:	04 c0       	rjmp	.+8      	; 0xb96 <vfprintf+0x2dc>
     b8e:	82 2f       	mov	r24, r18
     b90:	86 78       	andi	r24, 0x86	; 134
     b92:	09 f0       	breq	.+2      	; 0xb96 <vfprintf+0x2dc>
     b94:	73 94       	inc	r7
     b96:	23 fd       	sbrc	r18, 3
     b98:	13 c0       	rjmp	.+38     	; 0xbc0 <vfprintf+0x306>
     b9a:	20 ff       	sbrs	r18, 0
     b9c:	06 c0       	rjmp	.+12     	; 0xbaa <vfprintf+0x2f0>
     b9e:	5a 2c       	mov	r5, r10
     ba0:	73 14       	cp	r7, r3
     ba2:	18 f4       	brcc	.+6      	; 0xbaa <vfprintf+0x2f0>
     ba4:	53 0c       	add	r5, r3
     ba6:	57 18       	sub	r5, r7
     ba8:	73 2c       	mov	r7, r3
     baa:	73 14       	cp	r7, r3
     bac:	68 f4       	brcc	.+26     	; 0xbc8 <vfprintf+0x30e>
     bae:	b7 01       	movw	r22, r14
     bb0:	80 e2       	ldi	r24, 0x20	; 32
     bb2:	90 e0       	ldi	r25, 0x00	; 0
     bb4:	2c 87       	std	Y+12, r18	; 0x0c
     bb6:	0e 94 8f 07 	call	0xf1e	; 0xf1e <fputc>
     bba:	73 94       	inc	r7
     bbc:	2c 85       	ldd	r18, Y+12	; 0x0c
     bbe:	f5 cf       	rjmp	.-22     	; 0xbaa <vfprintf+0x2f0>
     bc0:	73 14       	cp	r7, r3
     bc2:	10 f4       	brcc	.+4      	; 0xbc8 <vfprintf+0x30e>
     bc4:	37 18       	sub	r3, r7
     bc6:	01 c0       	rjmp	.+2      	; 0xbca <vfprintf+0x310>
     bc8:	31 2c       	mov	r3, r1
     bca:	24 ff       	sbrs	r18, 4
     bcc:	12 c0       	rjmp	.+36     	; 0xbf2 <vfprintf+0x338>
     bce:	b7 01       	movw	r22, r14
     bd0:	80 e3       	ldi	r24, 0x30	; 48
     bd2:	90 e0       	ldi	r25, 0x00	; 0
     bd4:	2c 87       	std	Y+12, r18	; 0x0c
     bd6:	0e 94 8f 07 	call	0xf1e	; 0xf1e <fputc>
     bda:	2c 85       	ldd	r18, Y+12	; 0x0c
     bdc:	22 ff       	sbrs	r18, 2
     bde:	17 c0       	rjmp	.+46     	; 0xc0e <vfprintf+0x354>
     be0:	21 ff       	sbrs	r18, 1
     be2:	03 c0       	rjmp	.+6      	; 0xbea <vfprintf+0x330>
     be4:	88 e5       	ldi	r24, 0x58	; 88
     be6:	90 e0       	ldi	r25, 0x00	; 0
     be8:	02 c0       	rjmp	.+4      	; 0xbee <vfprintf+0x334>
     bea:	88 e7       	ldi	r24, 0x78	; 120
     bec:	90 e0       	ldi	r25, 0x00	; 0
     bee:	b7 01       	movw	r22, r14
     bf0:	0c c0       	rjmp	.+24     	; 0xc0a <vfprintf+0x350>
     bf2:	82 2f       	mov	r24, r18
     bf4:	86 78       	andi	r24, 0x86	; 134
     bf6:	59 f0       	breq	.+22     	; 0xc0e <vfprintf+0x354>
     bf8:	21 fd       	sbrc	r18, 1
     bfa:	02 c0       	rjmp	.+4      	; 0xc00 <vfprintf+0x346>
     bfc:	80 e2       	ldi	r24, 0x20	; 32
     bfe:	01 c0       	rjmp	.+2      	; 0xc02 <vfprintf+0x348>
     c00:	8b e2       	ldi	r24, 0x2B	; 43
     c02:	27 fd       	sbrc	r18, 7
     c04:	8d e2       	ldi	r24, 0x2D	; 45
     c06:	b7 01       	movw	r22, r14
     c08:	90 e0       	ldi	r25, 0x00	; 0
     c0a:	0e 94 8f 07 	call	0xf1e	; 0xf1e <fputc>
     c0e:	a5 14       	cp	r10, r5
     c10:	38 f4       	brcc	.+14     	; 0xc20 <vfprintf+0x366>
     c12:	b7 01       	movw	r22, r14
     c14:	80 e3       	ldi	r24, 0x30	; 48
     c16:	90 e0       	ldi	r25, 0x00	; 0
     c18:	0e 94 8f 07 	call	0xf1e	; 0xf1e <fputc>
     c1c:	5a 94       	dec	r5
     c1e:	f7 cf       	rjmp	.-18     	; 0xc0e <vfprintf+0x354>
     c20:	aa 94       	dec	r10
     c22:	f4 01       	movw	r30, r8
     c24:	ea 0d       	add	r30, r10
     c26:	f1 1d       	adc	r31, r1
     c28:	80 81       	ld	r24, Z
     c2a:	b7 01       	movw	r22, r14
     c2c:	90 e0       	ldi	r25, 0x00	; 0
     c2e:	0e 94 8f 07 	call	0xf1e	; 0xf1e <fputc>
     c32:	a1 10       	cpse	r10, r1
     c34:	f5 cf       	rjmp	.-22     	; 0xc20 <vfprintf+0x366>
     c36:	33 20       	and	r3, r3
     c38:	09 f4       	brne	.+2      	; 0xc3c <vfprintf+0x382>
     c3a:	51 ce       	rjmp	.-862    	; 0x8de <vfprintf+0x24>
     c3c:	b7 01       	movw	r22, r14
     c3e:	80 e2       	ldi	r24, 0x20	; 32
     c40:	90 e0       	ldi	r25, 0x00	; 0
     c42:	0e 94 8f 07 	call	0xf1e	; 0xf1e <fputc>
     c46:	3a 94       	dec	r3
     c48:	f6 cf       	rjmp	.-20     	; 0xc36 <vfprintf+0x37c>
     c4a:	f7 01       	movw	r30, r14
     c4c:	86 81       	ldd	r24, Z+6	; 0x06
     c4e:	97 81       	ldd	r25, Z+7	; 0x07
     c50:	02 c0       	rjmp	.+4      	; 0xc56 <vfprintf+0x39c>
     c52:	8f ef       	ldi	r24, 0xFF	; 255
     c54:	9f ef       	ldi	r25, 0xFF	; 255
     c56:	2c 96       	adiw	r28, 0x0c	; 12
     c58:	e2 e1       	ldi	r30, 0x12	; 18
     c5a:	0c 94 3b 08 	jmp	0x1076	; 0x1076 <__epilogue_restores__>

00000c5e <calloc>:
     c5e:	0f 93       	push	r16
     c60:	1f 93       	push	r17
     c62:	cf 93       	push	r28
     c64:	df 93       	push	r29
     c66:	86 9f       	mul	r24, r22
     c68:	80 01       	movw	r16, r0
     c6a:	87 9f       	mul	r24, r23
     c6c:	10 0d       	add	r17, r0
     c6e:	96 9f       	mul	r25, r22
     c70:	10 0d       	add	r17, r0
     c72:	11 24       	eor	r1, r1
     c74:	c8 01       	movw	r24, r16
     c76:	0e 94 4b 06 	call	0xc96	; 0xc96 <malloc>
     c7a:	ec 01       	movw	r28, r24
     c7c:	00 97       	sbiw	r24, 0x00	; 0
     c7e:	29 f0       	breq	.+10     	; 0xc8a <calloc+0x2c>
     c80:	a8 01       	movw	r20, r16
     c82:	60 e0       	ldi	r22, 0x00	; 0
     c84:	70 e0       	ldi	r23, 0x00	; 0
     c86:	0e 94 7d 07 	call	0xefa	; 0xefa <memset>
     c8a:	ce 01       	movw	r24, r28
     c8c:	df 91       	pop	r29
     c8e:	cf 91       	pop	r28
     c90:	1f 91       	pop	r17
     c92:	0f 91       	pop	r16
     c94:	08 95       	ret

00000c96 <malloc>:
     c96:	cf 93       	push	r28
     c98:	df 93       	push	r29
     c9a:	82 30       	cpi	r24, 0x02	; 2
     c9c:	91 05       	cpc	r25, r1
     c9e:	10 f4       	brcc	.+4      	; 0xca4 <malloc+0xe>
     ca0:	82 e0       	ldi	r24, 0x02	; 2
     ca2:	90 e0       	ldi	r25, 0x00	; 0
     ca4:	e0 91 06 03 	lds	r30, 0x0306
     ca8:	f0 91 07 03 	lds	r31, 0x0307
     cac:	20 e0       	ldi	r18, 0x00	; 0
     cae:	30 e0       	ldi	r19, 0x00	; 0
     cb0:	a0 e0       	ldi	r26, 0x00	; 0
     cb2:	b0 e0       	ldi	r27, 0x00	; 0
     cb4:	30 97       	sbiw	r30, 0x00	; 0
     cb6:	39 f1       	breq	.+78     	; 0xd06 <malloc+0x70>
     cb8:	40 81       	ld	r20, Z
     cba:	51 81       	ldd	r21, Z+1	; 0x01
     cbc:	48 17       	cp	r20, r24
     cbe:	59 07       	cpc	r21, r25
     cc0:	b8 f0       	brcs	.+46     	; 0xcf0 <malloc+0x5a>
     cc2:	48 17       	cp	r20, r24
     cc4:	59 07       	cpc	r21, r25
     cc6:	71 f4       	brne	.+28     	; 0xce4 <malloc+0x4e>
     cc8:	82 81       	ldd	r24, Z+2	; 0x02
     cca:	93 81       	ldd	r25, Z+3	; 0x03
     ccc:	10 97       	sbiw	r26, 0x00	; 0
     cce:	29 f0       	breq	.+10     	; 0xcda <malloc+0x44>
     cd0:	13 96       	adiw	r26, 0x03	; 3
     cd2:	9c 93       	st	X, r25
     cd4:	8e 93       	st	-X, r24
     cd6:	12 97       	sbiw	r26, 0x02	; 2
     cd8:	2c c0       	rjmp	.+88     	; 0xd32 <malloc+0x9c>
     cda:	90 93 07 03 	sts	0x0307, r25
     cde:	80 93 06 03 	sts	0x0306, r24
     ce2:	27 c0       	rjmp	.+78     	; 0xd32 <malloc+0x9c>
     ce4:	21 15       	cp	r18, r1
     ce6:	31 05       	cpc	r19, r1
     ce8:	31 f0       	breq	.+12     	; 0xcf6 <malloc+0x60>
     cea:	42 17       	cp	r20, r18
     cec:	53 07       	cpc	r21, r19
     cee:	18 f0       	brcs	.+6      	; 0xcf6 <malloc+0x60>
     cf0:	a9 01       	movw	r20, r18
     cf2:	db 01       	movw	r26, r22
     cf4:	01 c0       	rjmp	.+2      	; 0xcf8 <malloc+0x62>
     cf6:	ef 01       	movw	r28, r30
     cf8:	9a 01       	movw	r18, r20
     cfa:	bd 01       	movw	r22, r26
     cfc:	df 01       	movw	r26, r30
     cfe:	02 80       	ldd	r0, Z+2	; 0x02
     d00:	f3 81       	ldd	r31, Z+3	; 0x03
     d02:	e0 2d       	mov	r30, r0
     d04:	d7 cf       	rjmp	.-82     	; 0xcb4 <malloc+0x1e>
     d06:	21 15       	cp	r18, r1
     d08:	31 05       	cpc	r19, r1
     d0a:	f9 f0       	breq	.+62     	; 0xd4a <malloc+0xb4>
     d0c:	28 1b       	sub	r18, r24
     d0e:	39 0b       	sbc	r19, r25
     d10:	24 30       	cpi	r18, 0x04	; 4
     d12:	31 05       	cpc	r19, r1
     d14:	80 f4       	brcc	.+32     	; 0xd36 <malloc+0xa0>
     d16:	8a 81       	ldd	r24, Y+2	; 0x02
     d18:	9b 81       	ldd	r25, Y+3	; 0x03
     d1a:	61 15       	cp	r22, r1
     d1c:	71 05       	cpc	r23, r1
     d1e:	21 f0       	breq	.+8      	; 0xd28 <malloc+0x92>
     d20:	fb 01       	movw	r30, r22
     d22:	93 83       	std	Z+3, r25	; 0x03
     d24:	82 83       	std	Z+2, r24	; 0x02
     d26:	04 c0       	rjmp	.+8      	; 0xd30 <malloc+0x9a>
     d28:	90 93 07 03 	sts	0x0307, r25
     d2c:	80 93 06 03 	sts	0x0306, r24
     d30:	fe 01       	movw	r30, r28
     d32:	32 96       	adiw	r30, 0x02	; 2
     d34:	44 c0       	rjmp	.+136    	; 0xdbe <malloc+0x128>
     d36:	fe 01       	movw	r30, r28
     d38:	e2 0f       	add	r30, r18
     d3a:	f3 1f       	adc	r31, r19
     d3c:	81 93       	st	Z+, r24
     d3e:	91 93       	st	Z+, r25
     d40:	22 50       	subi	r18, 0x02	; 2
     d42:	31 09       	sbc	r19, r1
     d44:	39 83       	std	Y+1, r19	; 0x01
     d46:	28 83       	st	Y, r18
     d48:	3a c0       	rjmp	.+116    	; 0xdbe <malloc+0x128>
     d4a:	20 91 04 03 	lds	r18, 0x0304
     d4e:	30 91 05 03 	lds	r19, 0x0305
     d52:	23 2b       	or	r18, r19
     d54:	41 f4       	brne	.+16     	; 0xd66 <malloc+0xd0>
     d56:	20 91 02 01 	lds	r18, 0x0102
     d5a:	30 91 03 01 	lds	r19, 0x0103
     d5e:	30 93 05 03 	sts	0x0305, r19
     d62:	20 93 04 03 	sts	0x0304, r18
     d66:	20 91 00 01 	lds	r18, 0x0100
     d6a:	30 91 01 01 	lds	r19, 0x0101
     d6e:	21 15       	cp	r18, r1
     d70:	31 05       	cpc	r19, r1
     d72:	41 f4       	brne	.+16     	; 0xd84 <malloc+0xee>
     d74:	2d b7       	in	r18, 0x3d	; 61
     d76:	3e b7       	in	r19, 0x3e	; 62
     d78:	40 91 04 01 	lds	r20, 0x0104
     d7c:	50 91 05 01 	lds	r21, 0x0105
     d80:	24 1b       	sub	r18, r20
     d82:	35 0b       	sbc	r19, r21
     d84:	e0 91 04 03 	lds	r30, 0x0304
     d88:	f0 91 05 03 	lds	r31, 0x0305
     d8c:	e2 17       	cp	r30, r18
     d8e:	f3 07       	cpc	r31, r19
     d90:	a0 f4       	brcc	.+40     	; 0xdba <malloc+0x124>
     d92:	2e 1b       	sub	r18, r30
     d94:	3f 0b       	sbc	r19, r31
     d96:	28 17       	cp	r18, r24
     d98:	39 07       	cpc	r19, r25
     d9a:	78 f0       	brcs	.+30     	; 0xdba <malloc+0x124>
     d9c:	ac 01       	movw	r20, r24
     d9e:	4e 5f       	subi	r20, 0xFE	; 254
     da0:	5f 4f       	sbci	r21, 0xFF	; 255
     da2:	24 17       	cp	r18, r20
     da4:	35 07       	cpc	r19, r21
     da6:	48 f0       	brcs	.+18     	; 0xdba <malloc+0x124>
     da8:	4e 0f       	add	r20, r30
     daa:	5f 1f       	adc	r21, r31
     dac:	50 93 05 03 	sts	0x0305, r21
     db0:	40 93 04 03 	sts	0x0304, r20
     db4:	81 93       	st	Z+, r24
     db6:	91 93       	st	Z+, r25
     db8:	02 c0       	rjmp	.+4      	; 0xdbe <malloc+0x128>
     dba:	e0 e0       	ldi	r30, 0x00	; 0
     dbc:	f0 e0       	ldi	r31, 0x00	; 0
     dbe:	cf 01       	movw	r24, r30
     dc0:	df 91       	pop	r29
     dc2:	cf 91       	pop	r28
     dc4:	08 95       	ret

00000dc6 <free>:
     dc6:	cf 93       	push	r28
     dc8:	df 93       	push	r29
     dca:	00 97       	sbiw	r24, 0x00	; 0
     dcc:	09 f4       	brne	.+2      	; 0xdd0 <free+0xa>
     dce:	87 c0       	rjmp	.+270    	; 0xede <free+0x118>
     dd0:	fc 01       	movw	r30, r24
     dd2:	32 97       	sbiw	r30, 0x02	; 2
     dd4:	13 82       	std	Z+3, r1	; 0x03
     dd6:	12 82       	std	Z+2, r1	; 0x02
     dd8:	c0 91 06 03 	lds	r28, 0x0306
     ddc:	d0 91 07 03 	lds	r29, 0x0307
     de0:	20 97       	sbiw	r28, 0x00	; 0
     de2:	81 f4       	brne	.+32     	; 0xe04 <free+0x3e>
     de4:	20 81       	ld	r18, Z
     de6:	31 81       	ldd	r19, Z+1	; 0x01
     de8:	28 0f       	add	r18, r24
     dea:	39 1f       	adc	r19, r25
     dec:	80 91 04 03 	lds	r24, 0x0304
     df0:	90 91 05 03 	lds	r25, 0x0305
     df4:	82 17       	cp	r24, r18
     df6:	93 07       	cpc	r25, r19
     df8:	79 f5       	brne	.+94     	; 0xe58 <free+0x92>
     dfa:	f0 93 05 03 	sts	0x0305, r31
     dfe:	e0 93 04 03 	sts	0x0304, r30
     e02:	6d c0       	rjmp	.+218    	; 0xede <free+0x118>
     e04:	de 01       	movw	r26, r28
     e06:	20 e0       	ldi	r18, 0x00	; 0
     e08:	30 e0       	ldi	r19, 0x00	; 0
     e0a:	ae 17       	cp	r26, r30
     e0c:	bf 07       	cpc	r27, r31
     e0e:	50 f4       	brcc	.+20     	; 0xe24 <free+0x5e>
     e10:	12 96       	adiw	r26, 0x02	; 2
     e12:	4d 91       	ld	r20, X+
     e14:	5c 91       	ld	r21, X
     e16:	13 97       	sbiw	r26, 0x03	; 3
     e18:	9d 01       	movw	r18, r26
     e1a:	41 15       	cp	r20, r1
     e1c:	51 05       	cpc	r21, r1
     e1e:	09 f1       	breq	.+66     	; 0xe62 <free+0x9c>
     e20:	da 01       	movw	r26, r20
     e22:	f3 cf       	rjmp	.-26     	; 0xe0a <free+0x44>
     e24:	b3 83       	std	Z+3, r27	; 0x03
     e26:	a2 83       	std	Z+2, r26	; 0x02
     e28:	40 81       	ld	r20, Z
     e2a:	51 81       	ldd	r21, Z+1	; 0x01
     e2c:	84 0f       	add	r24, r20
     e2e:	95 1f       	adc	r25, r21
     e30:	8a 17       	cp	r24, r26
     e32:	9b 07       	cpc	r25, r27
     e34:	71 f4       	brne	.+28     	; 0xe52 <free+0x8c>
     e36:	8d 91       	ld	r24, X+
     e38:	9c 91       	ld	r25, X
     e3a:	11 97       	sbiw	r26, 0x01	; 1
     e3c:	84 0f       	add	r24, r20
     e3e:	95 1f       	adc	r25, r21
     e40:	02 96       	adiw	r24, 0x02	; 2
     e42:	91 83       	std	Z+1, r25	; 0x01
     e44:	80 83       	st	Z, r24
     e46:	12 96       	adiw	r26, 0x02	; 2
     e48:	8d 91       	ld	r24, X+
     e4a:	9c 91       	ld	r25, X
     e4c:	13 97       	sbiw	r26, 0x03	; 3
     e4e:	93 83       	std	Z+3, r25	; 0x03
     e50:	82 83       	std	Z+2, r24	; 0x02
     e52:	21 15       	cp	r18, r1
     e54:	31 05       	cpc	r19, r1
     e56:	29 f4       	brne	.+10     	; 0xe62 <free+0x9c>
     e58:	f0 93 07 03 	sts	0x0307, r31
     e5c:	e0 93 06 03 	sts	0x0306, r30
     e60:	3e c0       	rjmp	.+124    	; 0xede <free+0x118>
     e62:	d9 01       	movw	r26, r18
     e64:	13 96       	adiw	r26, 0x03	; 3
     e66:	fc 93       	st	X, r31
     e68:	ee 93       	st	-X, r30
     e6a:	12 97       	sbiw	r26, 0x02	; 2
     e6c:	4d 91       	ld	r20, X+
     e6e:	5d 91       	ld	r21, X+
     e70:	a4 0f       	add	r26, r20
     e72:	b5 1f       	adc	r27, r21
     e74:	ea 17       	cp	r30, r26
     e76:	fb 07       	cpc	r31, r27
     e78:	79 f4       	brne	.+30     	; 0xe98 <free+0xd2>
     e7a:	80 81       	ld	r24, Z
     e7c:	91 81       	ldd	r25, Z+1	; 0x01
     e7e:	84 0f       	add	r24, r20
     e80:	95 1f       	adc	r25, r21
     e82:	02 96       	adiw	r24, 0x02	; 2
     e84:	d9 01       	movw	r26, r18
     e86:	11 96       	adiw	r26, 0x01	; 1
     e88:	9c 93       	st	X, r25
     e8a:	8e 93       	st	-X, r24
     e8c:	82 81       	ldd	r24, Z+2	; 0x02
     e8e:	93 81       	ldd	r25, Z+3	; 0x03
     e90:	13 96       	adiw	r26, 0x03	; 3
     e92:	9c 93       	st	X, r25
     e94:	8e 93       	st	-X, r24
     e96:	12 97       	sbiw	r26, 0x02	; 2
     e98:	e0 e0       	ldi	r30, 0x00	; 0
     e9a:	f0 e0       	ldi	r31, 0x00	; 0
     e9c:	8a 81       	ldd	r24, Y+2	; 0x02
     e9e:	9b 81       	ldd	r25, Y+3	; 0x03
     ea0:	00 97       	sbiw	r24, 0x00	; 0
     ea2:	19 f0       	breq	.+6      	; 0xeaa <free+0xe4>
     ea4:	fe 01       	movw	r30, r28
     ea6:	ec 01       	movw	r28, r24
     ea8:	f9 cf       	rjmp	.-14     	; 0xe9c <free+0xd6>
     eaa:	ce 01       	movw	r24, r28
     eac:	02 96       	adiw	r24, 0x02	; 2
     eae:	28 81       	ld	r18, Y
     eb0:	39 81       	ldd	r19, Y+1	; 0x01
     eb2:	82 0f       	add	r24, r18
     eb4:	93 1f       	adc	r25, r19
     eb6:	20 91 04 03 	lds	r18, 0x0304
     eba:	30 91 05 03 	lds	r19, 0x0305
     ebe:	28 17       	cp	r18, r24
     ec0:	39 07       	cpc	r19, r25
     ec2:	69 f4       	brne	.+26     	; 0xede <free+0x118>
     ec4:	30 97       	sbiw	r30, 0x00	; 0
     ec6:	29 f4       	brne	.+10     	; 0xed2 <free+0x10c>
     ec8:	10 92 07 03 	sts	0x0307, r1
     ecc:	10 92 06 03 	sts	0x0306, r1
     ed0:	02 c0       	rjmp	.+4      	; 0xed6 <free+0x110>
     ed2:	13 82       	std	Z+3, r1	; 0x03
     ed4:	12 82       	std	Z+2, r1	; 0x02
     ed6:	d0 93 05 03 	sts	0x0305, r29
     eda:	c0 93 04 03 	sts	0x0304, r28
     ede:	df 91       	pop	r29
     ee0:	cf 91       	pop	r28
     ee2:	08 95       	ret

00000ee4 <strnlen_P>:
     ee4:	fc 01       	movw	r30, r24
     ee6:	05 90       	lpm	r0, Z+
     ee8:	61 50       	subi	r22, 0x01	; 1
     eea:	70 40       	sbci	r23, 0x00	; 0
     eec:	01 10       	cpse	r0, r1
     eee:	d8 f7       	brcc	.-10     	; 0xee6 <strnlen_P+0x2>
     ef0:	80 95       	com	r24
     ef2:	90 95       	com	r25
     ef4:	8e 0f       	add	r24, r30
     ef6:	9f 1f       	adc	r25, r31
     ef8:	08 95       	ret

00000efa <memset>:
     efa:	dc 01       	movw	r26, r24
     efc:	01 c0       	rjmp	.+2      	; 0xf00 <memset+0x6>
     efe:	6d 93       	st	X+, r22
     f00:	41 50       	subi	r20, 0x01	; 1
     f02:	50 40       	sbci	r21, 0x00	; 0
     f04:	e0 f7       	brcc	.-8      	; 0xefe <memset+0x4>
     f06:	08 95       	ret

00000f08 <strnlen>:
     f08:	fc 01       	movw	r30, r24
     f0a:	61 50       	subi	r22, 0x01	; 1
     f0c:	70 40       	sbci	r23, 0x00	; 0
     f0e:	01 90       	ld	r0, Z+
     f10:	01 10       	cpse	r0, r1
     f12:	d8 f7       	brcc	.-10     	; 0xf0a <strnlen+0x2>
     f14:	80 95       	com	r24
     f16:	90 95       	com	r25
     f18:	8e 0f       	add	r24, r30
     f1a:	9f 1f       	adc	r25, r31
     f1c:	08 95       	ret

00000f1e <fputc>:
     f1e:	0f 93       	push	r16
     f20:	1f 93       	push	r17
     f22:	cf 93       	push	r28
     f24:	df 93       	push	r29
     f26:	18 2f       	mov	r17, r24
     f28:	09 2f       	mov	r16, r25
     f2a:	eb 01       	movw	r28, r22
     f2c:	8b 81       	ldd	r24, Y+3	; 0x03
     f2e:	81 fd       	sbrc	r24, 1
     f30:	03 c0       	rjmp	.+6      	; 0xf38 <fputc+0x1a>
     f32:	8f ef       	ldi	r24, 0xFF	; 255
     f34:	9f ef       	ldi	r25, 0xFF	; 255
     f36:	20 c0       	rjmp	.+64     	; 0xf78 <fputc+0x5a>
     f38:	82 ff       	sbrs	r24, 2
     f3a:	10 c0       	rjmp	.+32     	; 0xf5c <fputc+0x3e>
     f3c:	4e 81       	ldd	r20, Y+6	; 0x06
     f3e:	5f 81       	ldd	r21, Y+7	; 0x07
     f40:	2c 81       	ldd	r18, Y+4	; 0x04
     f42:	3d 81       	ldd	r19, Y+5	; 0x05
     f44:	42 17       	cp	r20, r18
     f46:	53 07       	cpc	r21, r19
     f48:	7c f4       	brge	.+30     	; 0xf68 <fputc+0x4a>
     f4a:	e8 81       	ld	r30, Y
     f4c:	f9 81       	ldd	r31, Y+1	; 0x01
     f4e:	9f 01       	movw	r18, r30
     f50:	2f 5f       	subi	r18, 0xFF	; 255
     f52:	3f 4f       	sbci	r19, 0xFF	; 255
     f54:	39 83       	std	Y+1, r19	; 0x01
     f56:	28 83       	st	Y, r18
     f58:	10 83       	st	Z, r17
     f5a:	06 c0       	rjmp	.+12     	; 0xf68 <fputc+0x4a>
     f5c:	e8 85       	ldd	r30, Y+8	; 0x08
     f5e:	f9 85       	ldd	r31, Y+9	; 0x09
     f60:	81 2f       	mov	r24, r17
     f62:	09 95       	icall
     f64:	89 2b       	or	r24, r25
     f66:	29 f7       	brne	.-54     	; 0xf32 <fputc+0x14>
     f68:	2e 81       	ldd	r18, Y+6	; 0x06
     f6a:	3f 81       	ldd	r19, Y+7	; 0x07
     f6c:	2f 5f       	subi	r18, 0xFF	; 255
     f6e:	3f 4f       	sbci	r19, 0xFF	; 255
     f70:	3f 83       	std	Y+7, r19	; 0x07
     f72:	2e 83       	std	Y+6, r18	; 0x06
     f74:	81 2f       	mov	r24, r17
     f76:	90 2f       	mov	r25, r16
     f78:	df 91       	pop	r29
     f7a:	cf 91       	pop	r28
     f7c:	1f 91       	pop	r17
     f7e:	0f 91       	pop	r16
     f80:	08 95       	ret

00000f82 <__ultoa_invert>:
     f82:	fa 01       	movw	r30, r20
     f84:	aa 27       	eor	r26, r26
     f86:	28 30       	cpi	r18, 0x08	; 8
     f88:	51 f1       	breq	.+84     	; 0xfde <__ultoa_invert+0x5c>
     f8a:	20 31       	cpi	r18, 0x10	; 16
     f8c:	81 f1       	breq	.+96     	; 0xfee <__ultoa_invert+0x6c>
     f8e:	e8 94       	clt
     f90:	6f 93       	push	r22
     f92:	6e 7f       	andi	r22, 0xFE	; 254
     f94:	6e 5f       	subi	r22, 0xFE	; 254
     f96:	7f 4f       	sbci	r23, 0xFF	; 255
     f98:	8f 4f       	sbci	r24, 0xFF	; 255
     f9a:	9f 4f       	sbci	r25, 0xFF	; 255
     f9c:	af 4f       	sbci	r26, 0xFF	; 255
     f9e:	b1 e0       	ldi	r27, 0x01	; 1
     fa0:	3e d0       	rcall	.+124    	; 0x101e <__ultoa_invert+0x9c>
     fa2:	b4 e0       	ldi	r27, 0x04	; 4
     fa4:	3c d0       	rcall	.+120    	; 0x101e <__ultoa_invert+0x9c>
     fa6:	67 0f       	add	r22, r23
     fa8:	78 1f       	adc	r23, r24
     faa:	89 1f       	adc	r24, r25
     fac:	9a 1f       	adc	r25, r26
     fae:	a1 1d       	adc	r26, r1
     fb0:	68 0f       	add	r22, r24
     fb2:	79 1f       	adc	r23, r25
     fb4:	8a 1f       	adc	r24, r26
     fb6:	91 1d       	adc	r25, r1
     fb8:	a1 1d       	adc	r26, r1
     fba:	6a 0f       	add	r22, r26
     fbc:	71 1d       	adc	r23, r1
     fbe:	81 1d       	adc	r24, r1
     fc0:	91 1d       	adc	r25, r1
     fc2:	a1 1d       	adc	r26, r1
     fc4:	20 d0       	rcall	.+64     	; 0x1006 <__ultoa_invert+0x84>
     fc6:	09 f4       	brne	.+2      	; 0xfca <__ultoa_invert+0x48>
     fc8:	68 94       	set
     fca:	3f 91       	pop	r19
     fcc:	2a e0       	ldi	r18, 0x0A	; 10
     fce:	26 9f       	mul	r18, r22
     fd0:	11 24       	eor	r1, r1
     fd2:	30 19       	sub	r19, r0
     fd4:	30 5d       	subi	r19, 0xD0	; 208
     fd6:	31 93       	st	Z+, r19
     fd8:	de f6       	brtc	.-74     	; 0xf90 <__ultoa_invert+0xe>
     fda:	cf 01       	movw	r24, r30
     fdc:	08 95       	ret
     fde:	46 2f       	mov	r20, r22
     fe0:	47 70       	andi	r20, 0x07	; 7
     fe2:	40 5d       	subi	r20, 0xD0	; 208
     fe4:	41 93       	st	Z+, r20
     fe6:	b3 e0       	ldi	r27, 0x03	; 3
     fe8:	0f d0       	rcall	.+30     	; 0x1008 <__ultoa_invert+0x86>
     fea:	c9 f7       	brne	.-14     	; 0xfde <__ultoa_invert+0x5c>
     fec:	f6 cf       	rjmp	.-20     	; 0xfda <__ultoa_invert+0x58>
     fee:	46 2f       	mov	r20, r22
     ff0:	4f 70       	andi	r20, 0x0F	; 15
     ff2:	40 5d       	subi	r20, 0xD0	; 208
     ff4:	4a 33       	cpi	r20, 0x3A	; 58
     ff6:	18 f0       	brcs	.+6      	; 0xffe <__ultoa_invert+0x7c>
     ff8:	49 5d       	subi	r20, 0xD9	; 217
     ffa:	31 fd       	sbrc	r19, 1
     ffc:	40 52       	subi	r20, 0x20	; 32
     ffe:	41 93       	st	Z+, r20
    1000:	02 d0       	rcall	.+4      	; 0x1006 <__ultoa_invert+0x84>
    1002:	a9 f7       	brne	.-22     	; 0xfee <__ultoa_invert+0x6c>
    1004:	ea cf       	rjmp	.-44     	; 0xfda <__ultoa_invert+0x58>
    1006:	b4 e0       	ldi	r27, 0x04	; 4
    1008:	a6 95       	lsr	r26
    100a:	97 95       	ror	r25
    100c:	87 95       	ror	r24
    100e:	77 95       	ror	r23
    1010:	67 95       	ror	r22
    1012:	ba 95       	dec	r27
    1014:	c9 f7       	brne	.-14     	; 0x1008 <__ultoa_invert+0x86>
    1016:	00 97       	sbiw	r24, 0x00	; 0
    1018:	61 05       	cpc	r22, r1
    101a:	71 05       	cpc	r23, r1
    101c:	08 95       	ret
    101e:	9b 01       	movw	r18, r22
    1020:	ac 01       	movw	r20, r24
    1022:	0a 2e       	mov	r0, r26
    1024:	06 94       	lsr	r0
    1026:	57 95       	ror	r21
    1028:	47 95       	ror	r20
    102a:	37 95       	ror	r19
    102c:	27 95       	ror	r18
    102e:	ba 95       	dec	r27
    1030:	c9 f7       	brne	.-14     	; 0x1024 <__ultoa_invert+0xa2>
    1032:	62 0f       	add	r22, r18
    1034:	73 1f       	adc	r23, r19
    1036:	84 1f       	adc	r24, r20
    1038:	95 1f       	adc	r25, r21
    103a:	a0 1d       	adc	r26, r0
    103c:	08 95       	ret

0000103e <__prologue_saves__>:
    103e:	2f 92       	push	r2
    1040:	3f 92       	push	r3
    1042:	4f 92       	push	r4
    1044:	5f 92       	push	r5
    1046:	6f 92       	push	r6
    1048:	7f 92       	push	r7
    104a:	8f 92       	push	r8
    104c:	9f 92       	push	r9
    104e:	af 92       	push	r10
    1050:	bf 92       	push	r11
    1052:	cf 92       	push	r12
    1054:	df 92       	push	r13
    1056:	ef 92       	push	r14
    1058:	ff 92       	push	r15
    105a:	0f 93       	push	r16
    105c:	1f 93       	push	r17
    105e:	cf 93       	push	r28
    1060:	df 93       	push	r29
    1062:	cd b7       	in	r28, 0x3d	; 61
    1064:	de b7       	in	r29, 0x3e	; 62
    1066:	ca 1b       	sub	r28, r26
    1068:	db 0b       	sbc	r29, r27
    106a:	0f b6       	in	r0, 0x3f	; 63
    106c:	f8 94       	cli
    106e:	de bf       	out	0x3e, r29	; 62
    1070:	0f be       	out	0x3f, r0	; 63
    1072:	cd bf       	out	0x3d, r28	; 61
    1074:	09 94       	ijmp

00001076 <__epilogue_restores__>:
    1076:	2a 88       	ldd	r2, Y+18	; 0x12
    1078:	39 88       	ldd	r3, Y+17	; 0x11
    107a:	48 88       	ldd	r4, Y+16	; 0x10
    107c:	5f 84       	ldd	r5, Y+15	; 0x0f
    107e:	6e 84       	ldd	r6, Y+14	; 0x0e
    1080:	7d 84       	ldd	r7, Y+13	; 0x0d
    1082:	8c 84       	ldd	r8, Y+12	; 0x0c
    1084:	9b 84       	ldd	r9, Y+11	; 0x0b
    1086:	aa 84       	ldd	r10, Y+10	; 0x0a
    1088:	b9 84       	ldd	r11, Y+9	; 0x09
    108a:	c8 84       	ldd	r12, Y+8	; 0x08
    108c:	df 80       	ldd	r13, Y+7	; 0x07
    108e:	ee 80       	ldd	r14, Y+6	; 0x06
    1090:	fd 80       	ldd	r15, Y+5	; 0x05
    1092:	0c 81       	ldd	r16, Y+4	; 0x04
    1094:	1b 81       	ldd	r17, Y+3	; 0x03
    1096:	aa 81       	ldd	r26, Y+2	; 0x02
    1098:	b9 81       	ldd	r27, Y+1	; 0x01
    109a:	ce 0f       	add	r28, r30
    109c:	d1 1d       	adc	r29, r1
    109e:	0f b6       	in	r0, 0x3f	; 63
    10a0:	f8 94       	cli
    10a2:	de bf       	out	0x3e, r29	; 62
    10a4:	0f be       	out	0x3f, r0	; 63
    10a6:	cd bf       	out	0x3d, r28	; 61
    10a8:	ed 01       	movw	r28, r26
    10aa:	08 95       	ret

000010ac <_exit>:
    10ac:	f8 94       	cli

000010ae <__stop_program>:
    10ae:	ff cf       	rjmp	.-2      	; 0x10ae <__stop_program>
