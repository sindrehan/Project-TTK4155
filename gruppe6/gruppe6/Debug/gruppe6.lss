
gruppe6.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000090  00800100  00000e34  00000ec8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000e34  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          0000000e  00800190  00800190  00000f58  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000f58  2**0
                  CONTENTS, READONLY
  4 .debug_aranges 00000260  00000000  00000000  00000f88  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00002469  00000000  00000000  000011e8  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000d8f  00000000  00000000  00003651  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00000bd7  00000000  00000000  000043e0  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  000005a8  00000000  00000000  00004fb8  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    000006a5  00000000  00000000  00005560  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    000011d7  00000000  00000000  00005c05  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000238  00000000  00000000  00006ddc  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 f6 00 	jmp	0x1ec	; 0x1ec <__ctors_end>
   4:	0c 94 13 01 	jmp	0x226	; 0x226 <__bad_interrupt>
   8:	0c 94 13 01 	jmp	0x226	; 0x226 <__bad_interrupt>
   c:	0c 94 13 01 	jmp	0x226	; 0x226 <__bad_interrupt>
  10:	0c 94 13 01 	jmp	0x226	; 0x226 <__bad_interrupt>
  14:	0c 94 13 01 	jmp	0x226	; 0x226 <__bad_interrupt>
  18:	0c 94 13 01 	jmp	0x226	; 0x226 <__bad_interrupt>
  1c:	0c 94 13 01 	jmp	0x226	; 0x226 <__bad_interrupt>
  20:	0c 94 13 01 	jmp	0x226	; 0x226 <__bad_interrupt>
  24:	0c 94 13 01 	jmp	0x226	; 0x226 <__bad_interrupt>
  28:	0c 94 13 01 	jmp	0x226	; 0x226 <__bad_interrupt>
  2c:	0c 94 13 01 	jmp	0x226	; 0x226 <__bad_interrupt>
  30:	0c 94 13 01 	jmp	0x226	; 0x226 <__bad_interrupt>
  34:	0c 94 13 01 	jmp	0x226	; 0x226 <__bad_interrupt>
  38:	0c 94 13 01 	jmp	0x226	; 0x226 <__bad_interrupt>
  3c:	0c 94 13 01 	jmp	0x226	; 0x226 <__bad_interrupt>
  40:	0c 94 13 01 	jmp	0x226	; 0x226 <__bad_interrupt>
  44:	0c 94 13 01 	jmp	0x226	; 0x226 <__bad_interrupt>
  48:	0c 94 13 01 	jmp	0x226	; 0x226 <__bad_interrupt>
  4c:	0c 94 13 01 	jmp	0x226	; 0x226 <__bad_interrupt>
  50:	0c 94 13 01 	jmp	0x226	; 0x226 <__bad_interrupt>
  54:	0c 94 13 01 	jmp	0x226	; 0x226 <__bad_interrupt>
  58:	0c 94 13 01 	jmp	0x226	; 0x226 <__bad_interrupt>
  5c:	0c 94 13 01 	jmp	0x226	; 0x226 <__bad_interrupt>
  60:	0c 94 13 01 	jmp	0x226	; 0x226 <__bad_interrupt>
  64:	0c 94 13 01 	jmp	0x226	; 0x226 <__bad_interrupt>
  68:	0c 94 13 01 	jmp	0x226	; 0x226 <__bad_interrupt>
  6c:	0c 94 13 01 	jmp	0x226	; 0x226 <__bad_interrupt>

00000070 <__trampolines_end>:
  70:	00 00       	nop
  72:	00 00       	nop
  74:	00 5c       	subi	r16, 0xC0	; 192
  76:	00 00       	nop
  78:	0c 00       	.word	0x000c	; ????
  7a:	0c 00       	.word	0x000c	; ????
  7c:	7c 28       	or	r7, r12
  7e:	7c 28       	or	r7, r12
  80:	58 dc       	rcall	.-1872   	; 0xfffff932 <__eeprom_end+0xff7ef932>
  82:	68 00       	.word	0x0068	; ????
  84:	24 10       	cpse	r2, r4
  86:	48 00       	.word	0x0048	; ????
  88:	28 54       	subi	r18, 0x48	; 72
  8a:	28 40       	sbci	r18, 0x08	; 8
  8c:	00 0c       	add	r0, r0
  8e:	00 00       	nop
  90:	00 78       	andi	r16, 0x80	; 128
  92:	84 00       	.word	0x0084	; ????
  94:	84 78       	andi	r24, 0x84	; 132
  96:	00 00       	nop
  98:	54 38       	cpi	r21, 0x84	; 132
  9a:	54 00       	.word	0x0054	; ????
  9c:	10 7c       	andi	r17, 0xC0	; 192
  9e:	10 00       	.word	0x0010	; ????
  a0:	80 40       	sbci	r24, 0x00	; 0
  a2:	00 00       	nop
  a4:	10 10       	cpse	r1, r0
  a6:	10 00       	.word	0x0010	; ????
  a8:	00 40       	sbci	r16, 0x00	; 0
  aa:	00 00       	nop
  ac:	60 10       	cpse	r6, r0
  ae:	0c 00       	.word	0x000c	; ????
  b0:	38 54       	subi	r19, 0x48	; 72
  b2:	38 00       	.word	0x0038	; ????
  b4:	48 7c       	andi	r20, 0xC8	; 200
  b6:	40 00       	.word	0x0040	; ????
  b8:	48 64       	ori	r20, 0x48	; 72
  ba:	58 00       	.word	0x0058	; ????
  bc:	44 54       	subi	r20, 0x44	; 68
  be:	2c 00       	.word	0x002c	; ????
  c0:	1c 10       	cpse	r1, r12
  c2:	7c 00       	.word	0x007c	; ????
  c4:	5c 54       	subi	r21, 0x4C	; 76
  c6:	24 00       	.word	0x0024	; ????
  c8:	38 54       	subi	r19, 0x48	; 72
  ca:	24 00       	.word	0x0024	; ????
  cc:	64 14       	cp	r6, r4
  ce:	0c 00       	.word	0x000c	; ????
  d0:	68 54       	subi	r22, 0x48	; 72
  d2:	2c 00       	.word	0x002c	; ????
  d4:	48 54       	subi	r20, 0x48	; 72
  d6:	38 00       	.word	0x0038	; ????
  d8:	00 48       	sbci	r16, 0x80	; 128
  da:	00 00       	nop
  dc:	80 48       	sbci	r24, 0x80	; 128
  de:	00 00       	nop
  e0:	10 28       	or	r1, r0
  e2:	44 00       	.word	0x0044	; ????
  e4:	28 28       	or	r2, r8
  e6:	28 00       	.word	0x0028	; ????
  e8:	44 28       	or	r4, r4
  ea:	10 00       	.word	0x0010	; ????
  ec:	04 54       	subi	r16, 0x44	; 68
  ee:	08 00       	.word	0x0008	; ????
  f0:	38 44       	sbci	r19, 0x48	; 72
  f2:	5c 00       	.word	0x005c	; ????
  f4:	78 14       	cp	r7, r8
  f6:	78 00       	.word	0x0078	; ????
  f8:	7c 54       	subi	r23, 0x4C	; 76
  fa:	28 00       	.word	0x0028	; ????
  fc:	38 44       	sbci	r19, 0x48	; 72
  fe:	28 00       	.word	0x0028	; ????
 100:	7c 44       	sbci	r23, 0x4C	; 76
 102:	38 00       	.word	0x0038	; ????
 104:	7c 54       	subi	r23, 0x4C	; 76
 106:	44 00       	.word	0x0044	; ????
 108:	7c 14       	cp	r7, r12
 10a:	04 00       	.word	0x0004	; ????
 10c:	38 44       	sbci	r19, 0x48	; 72
 10e:	74 00       	.word	0x0074	; ????
 110:	7c 10       	cpse	r7, r12
 112:	7c 00       	.word	0x007c	; ????
 114:	44 7c       	andi	r20, 0xC4	; 196
 116:	44 00       	.word	0x0044	; ????
 118:	20 40       	sbci	r18, 0x00	; 0
 11a:	3c 00       	.word	0x003c	; ????
 11c:	7c 10       	cpse	r7, r12
 11e:	6c 00       	.word	0x006c	; ????
 120:	7c 40       	sbci	r23, 0x0C	; 12
 122:	40 00       	.word	0x0040	; ????
 124:	7c 18       	sub	r7, r12
 126:	7c 00       	.word	0x007c	; ????
 128:	78 10       	cpse	r7, r8
 12a:	3c 00       	.word	0x003c	; ????
 12c:	38 44       	sbci	r19, 0x48	; 72
 12e:	38 00       	.word	0x0038	; ????
 130:	7c 14       	cp	r7, r12
 132:	08 00       	.word	0x0008	; ????
 134:	38 44       	sbci	r19, 0x48	; 72
 136:	b8 00       	.word	0x00b8	; ????
 138:	7c 14       	cp	r7, r12
 13a:	68 00       	.word	0x0068	; ????
 13c:	48 54       	subi	r20, 0x48	; 72
 13e:	24 00       	.word	0x0024	; ????
 140:	04 7c       	andi	r16, 0xC4	; 196
 142:	04 00       	.word	0x0004	; ????
 144:	7c 40       	sbci	r23, 0x0C	; 12
 146:	7c 00       	.word	0x007c	; ????
 148:	3c 60       	ori	r19, 0x0C	; 12
 14a:	3c 00       	.word	0x003c	; ????
 14c:	7c 30       	cpi	r23, 0x0C	; 12
 14e:	7c 00       	.word	0x007c	; ????
 150:	6c 10       	cpse	r6, r12
 152:	6c 00       	.word	0x006c	; ????
 154:	0c 70       	andi	r16, 0x0C	; 12
 156:	0c 00       	.word	0x000c	; ????
 158:	64 54       	subi	r22, 0x44	; 68
 15a:	4c 00       	.word	0x004c	; ????
 15c:	00 7c       	andi	r16, 0xC0	; 192
 15e:	44 00       	.word	0x0044	; ????
 160:	0c 10       	cpse	r0, r12
 162:	60 00       	.word	0x0060	; ????
 164:	44 7c       	andi	r20, 0xC4	; 196
 166:	00 00       	nop
 168:	08 04       	cpc	r0, r8
 16a:	08 00       	.word	0x0008	; ????
 16c:	80 80       	ld	r8, Z
 16e:	80 00       	.word	0x0080	; ????
 170:	00 04       	cpc	r0, r0
 172:	08 00       	.word	0x0008	; ????
 174:	30 48       	sbci	r19, 0x80	; 128
 176:	78 00       	.word	0x0078	; ????
 178:	7c 48       	sbci	r23, 0x8C	; 140
 17a:	30 00       	.word	0x0030	; ????
 17c:	30 48       	sbci	r19, 0x80	; 128
 17e:	48 00       	.word	0x0048	; ????
 180:	30 48       	sbci	r19, 0x80	; 128
 182:	7c 00       	.word	0x007c	; ????
 184:	30 68       	ori	r19, 0x80	; 128
 186:	50 00       	.word	0x0050	; ????
 188:	10 78       	andi	r17, 0x80	; 128
 18a:	14 00       	.word	0x0014	; ????
 18c:	90 a8       	ldd	r9, Z+48	; 0x30
 18e:	78 00       	.word	0x0078	; ????
 190:	7c 08       	sbc	r7, r12
 192:	70 00       	.word	0x0070	; ????
 194:	50 74       	andi	r21, 0x40	; 64
 196:	40 00       	.word	0x0040	; ????
 198:	80 80       	ld	r8, Z
 19a:	74 00       	.word	0x0074	; ????
 19c:	7c 10       	cpse	r7, r12
 19e:	68 00       	.word	0x0068	; ????
 1a0:	44 7c       	andi	r20, 0xC4	; 196
 1a2:	40 00       	.word	0x0040	; ????
 1a4:	78 10       	cpse	r7, r8
 1a6:	78 00       	.word	0x0078	; ????
 1a8:	78 08       	sbc	r7, r8
 1aa:	70 00       	.word	0x0070	; ????
 1ac:	30 48       	sbci	r19, 0x80	; 128
 1ae:	30 00       	.word	0x0030	; ????
 1b0:	f8 28       	or	r15, r8
 1b2:	10 00       	.word	0x0010	; ????
 1b4:	30 48       	sbci	r19, 0x80	; 128
 1b6:	f8 00       	.word	0x00f8	; ????
 1b8:	78 10       	cpse	r7, r8
 1ba:	08 00       	.word	0x0008	; ????
 1bc:	50 58       	subi	r21, 0x80	; 128
 1be:	28 00       	.word	0x0028	; ????
 1c0:	08 3c       	cpi	r16, 0xC8	; 200
 1c2:	48 00       	.word	0x0048	; ????
 1c4:	38 40       	sbci	r19, 0x08	; 8
 1c6:	78 00       	.word	0x0078	; ????
 1c8:	38 40       	sbci	r19, 0x08	; 8
 1ca:	38 00       	.word	0x0038	; ????
 1cc:	78 20       	and	r7, r8
 1ce:	78 00       	.word	0x0078	; ????
 1d0:	48 30       	cpi	r20, 0x08	; 8
 1d2:	48 00       	.word	0x0048	; ????
 1d4:	98 a0       	ldd	r9, Y+32	; 0x20
 1d6:	78 00       	.word	0x0078	; ????
 1d8:	48 68       	ori	r20, 0x88	; 136
 1da:	58 00       	.word	0x0058	; ????
 1dc:	10 78       	andi	r17, 0x80	; 128
 1de:	84 00       	.word	0x0084	; ????
 1e0:	00 7c       	andi	r16, 0xC0	; 192
 1e2:	00 00       	nop
 1e4:	84 78       	andi	r24, 0x84	; 132
 1e6:	10 00       	.word	0x0010	; ????
 1e8:	08 04       	cpc	r0, r8
 1ea:	08 04       	cpc	r0, r8

000001ec <__ctors_end>:
 1ec:	11 24       	eor	r1, r1
 1ee:	1f be       	out	0x3f, r1	; 63
 1f0:	cf ef       	ldi	r28, 0xFF	; 255
 1f2:	d4 e0       	ldi	r29, 0x04	; 4
 1f4:	de bf       	out	0x3e, r29	; 62
 1f6:	cd bf       	out	0x3d, r28	; 61

000001f8 <__do_copy_data>:
 1f8:	11 e0       	ldi	r17, 0x01	; 1
 1fa:	a0 e0       	ldi	r26, 0x00	; 0
 1fc:	b1 e0       	ldi	r27, 0x01	; 1
 1fe:	e4 e3       	ldi	r30, 0x34	; 52
 200:	fe e0       	ldi	r31, 0x0E	; 14
 202:	02 c0       	rjmp	.+4      	; 0x208 <__do_copy_data+0x10>
 204:	05 90       	lpm	r0, Z+
 206:	0d 92       	st	X+, r0
 208:	a0 39       	cpi	r26, 0x90	; 144
 20a:	b1 07       	cpc	r27, r17
 20c:	d9 f7       	brne	.-10     	; 0x204 <__do_copy_data+0xc>

0000020e <__do_clear_bss>:
 20e:	21 e0       	ldi	r18, 0x01	; 1
 210:	a0 e9       	ldi	r26, 0x90	; 144
 212:	b1 e0       	ldi	r27, 0x01	; 1
 214:	01 c0       	rjmp	.+2      	; 0x218 <.do_clear_bss_start>

00000216 <.do_clear_bss_loop>:
 216:	1d 92       	st	X+, r1

00000218 <.do_clear_bss_start>:
 218:	ae 39       	cpi	r26, 0x9E	; 158
 21a:	b2 07       	cpc	r27, r18
 21c:	e1 f7       	brne	.-8      	; 0x216 <.do_clear_bss_loop>
 21e:	0e 94 16 05 	call	0xa2c	; 0xa2c <main>
 222:	0c 94 18 07 	jmp	0xe30	; 0xe30 <_exit>

00000226 <__bad_interrupt>:
 226:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000022a <ADC_init>:
 22a:	85 b7       	in	r24, 0x35	; 53
 22c:	80 68       	ori	r24, 0x80	; 128
 22e:	85 bf       	out	0x35, r24	; 53
 230:	80 b7       	in	r24, 0x30	; 48
 232:	80 62       	ori	r24, 0x20	; 32
 234:	80 bf       	out	0x30, r24	; 48
 236:	bb 98       	cbi	0x17, 3	; 23
 238:	08 95       	ret

0000023a <ADC_read>:
 23a:	8c 5f       	subi	r24, 0xFC	; 252
 23c:	80 93 00 14 	sts	0x1400, r24
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 240:	80 e1       	ldi	r24, 0x10	; 16
 242:	8a 95       	dec	r24
 244:	f1 f7       	brne	.-4      	; 0x242 <ADC_read+0x8>
 246:	00 c0       	rjmp	.+0      	; 0x248 <ADC_read+0xe>
 248:	b3 99       	sbic	0x16, 3	; 22
 24a:	fe cf       	rjmp	.-4      	; 0x248 <ADC_read+0xe>
 24c:	80 91 00 14 	lds	r24, 0x1400
 250:	08 95       	ret

00000252 <can_init>:
 252:	cf 93       	push	r28
 254:	c8 2f       	mov	r28, r24
 256:	0e 94 09 05 	call	0xa12	; 0xa12 <SPI_init>
 25a:	0e 94 5f 01 	call	0x2be	; 0x2be <MCP2515_reset>
 25e:	4c 2f       	mov	r20, r28
 260:	60 ee       	ldi	r22, 0xE0	; 224
 262:	8f e0       	ldi	r24, 0x0F	; 15
 264:	0e 94 45 01 	call	0x28a	; 0x28a <MCP2515_bit_modify>
 268:	40 e6       	ldi	r20, 0x60	; 96
 26a:	60 e6       	ldi	r22, 0x60	; 96
 26c:	80 e6       	ldi	r24, 0x60	; 96
 26e:	0e 94 45 01 	call	0x28a	; 0x28a <MCP2515_bit_modify>
 272:	40 e0       	ldi	r20, 0x00	; 0
 274:	64 e0       	ldi	r22, 0x04	; 4
 276:	80 e6       	ldi	r24, 0x60	; 96
 278:	0e 94 45 01 	call	0x28a	; 0x28a <MCP2515_bit_modify>
 27c:	40 e0       	ldi	r20, 0x00	; 0
 27e:	6f ef       	ldi	r22, 0xFF	; 255
 280:	8b e2       	ldi	r24, 0x2B	; 43
 282:	0e 94 45 01 	call	0x28a	; 0x28a <MCP2515_bit_modify>
 286:	cf 91       	pop	r28
 288:	08 95       	ret

0000028a <MCP2515_bit_modify>:
 28a:	1f 93       	push	r17
 28c:	cf 93       	push	r28
 28e:	df 93       	push	r29
 290:	18 2f       	mov	r17, r24
 292:	d6 2f       	mov	r29, r22
 294:	c4 2f       	mov	r28, r20
 296:	0e 94 12 05 	call	0xa24	; 0xa24 <SPI_enable>
 29a:	85 e0       	ldi	r24, 0x05	; 5
 29c:	0e 94 0e 05 	call	0xa1c	; 0xa1c <SPI_transmit>
 2a0:	81 2f       	mov	r24, r17
 2a2:	0e 94 0e 05 	call	0xa1c	; 0xa1c <SPI_transmit>
 2a6:	8d 2f       	mov	r24, r29
 2a8:	0e 94 0e 05 	call	0xa1c	; 0xa1c <SPI_transmit>
 2ac:	8c 2f       	mov	r24, r28
 2ae:	0e 94 0e 05 	call	0xa1c	; 0xa1c <SPI_transmit>
 2b2:	0e 94 14 05 	call	0xa28	; 0xa28 <SPI_disable>
 2b6:	df 91       	pop	r29
 2b8:	cf 91       	pop	r28
 2ba:	1f 91       	pop	r17
 2bc:	08 95       	ret

000002be <MCP2515_reset>:
 2be:	0e 94 12 05 	call	0xa24	; 0xa24 <SPI_enable>
 2c2:	80 ec       	ldi	r24, 0xC0	; 192
 2c4:	0e 94 0e 05 	call	0xa1c	; 0xa1c <SPI_transmit>
 2c8:	0e 94 14 05 	call	0xa28	; 0xa28 <SPI_disable>
 2cc:	08 95       	ret

000002ce <menu_player_select>:
	- Kontrolltype
	
*/

void menu_player_select(uint8_t choice, can_message_t* setup){
	(*setup).data[0] = choice;
 2ce:	fb 01       	movw	r30, r22
 2d0:	82 83       	std	Z+2, r24	; 0x02
 2d2:	08 95       	ret

000002d4 <menu_arrow_index>:
	//}
//}


uint8_t menu_arrow_index(menuitem* m){
	for(uint8_t i = 0; i < m->submenus.number; i++){
 2d4:	dc 01       	movw	r26, r24
 2d6:	13 96       	adiw	r26, 0x03	; 3
 2d8:	2c 91       	ld	r18, X
 2da:	13 97       	sbiw	r26, 0x03	; 3
 2dc:	22 23       	and	r18, r18
 2de:	b9 f0       	breq	.+46     	; 0x30e <menu_arrow_index+0x3a>
		if(m->submenus.entries[i]->arrow_flag){
 2e0:	14 96       	adiw	r26, 0x04	; 4
 2e2:	ed 91       	ld	r30, X+
 2e4:	fc 91       	ld	r31, X
 2e6:	15 97       	sbiw	r26, 0x05	; 5
 2e8:	a0 81       	ld	r26, Z
 2ea:	b1 81       	ldd	r27, Z+1	; 0x01
 2ec:	12 96       	adiw	r26, 0x02	; 2
 2ee:	8c 91       	ld	r24, X
 2f0:	81 11       	cpse	r24, r1
 2f2:	0f c0       	rjmp	.+30     	; 0x312 <menu_arrow_index+0x3e>
 2f4:	32 96       	adiw	r30, 0x02	; 2
 2f6:	06 c0       	rjmp	.+12     	; 0x304 <menu_arrow_index+0x30>
 2f8:	a1 91       	ld	r26, Z+
 2fa:	b1 91       	ld	r27, Z+
 2fc:	12 96       	adiw	r26, 0x02	; 2
 2fe:	9c 91       	ld	r25, X
 300:	91 11       	cpse	r25, r1
 302:	08 c0       	rjmp	.+16     	; 0x314 <menu_arrow_index+0x40>
	//}
//}


uint8_t menu_arrow_index(menuitem* m){
	for(uint8_t i = 0; i < m->submenus.number; i++){
 304:	8f 5f       	subi	r24, 0xFF	; 255
 306:	82 13       	cpse	r24, r18
 308:	f7 cf       	rjmp	.-18     	; 0x2f8 <menu_arrow_index+0x24>
		if(m->submenus.entries[i]->arrow_flag){
			return i;
		}
	}
	return 0;
 30a:	80 e0       	ldi	r24, 0x00	; 0
 30c:	08 95       	ret
 30e:	80 e0       	ldi	r24, 0x00	; 0
 310:	08 95       	ret
	//}
//}


uint8_t menu_arrow_index(menuitem* m){
	for(uint8_t i = 0; i < m->submenus.number; i++){
 312:	80 e0       	ldi	r24, 0x00	; 0
		if(m->submenus.entries[i]->arrow_flag){
			return i;
		}
	}
	return 0;
}
 314:	08 95       	ret

00000316 <menu_right>:

menuitem* menu_right(menuitem* m, can_message_t* setup){
 316:	0f 93       	push	r16
 318:	1f 93       	push	r17
 31a:	cf 93       	push	r28
 31c:	df 93       	push	r29
 31e:	ec 01       	movw	r28, r24
 320:	8b 01       	movw	r16, r22
	uint8_t arrow_index = menu_arrow_index(m);
 322:	0e 94 6a 01 	call	0x2d4	; 0x2d4 <menu_arrow_index>
	if(m->submenus.entries[arrow_index]->submenus.number != 0){
 326:	e8 2f       	mov	r30, r24
 328:	f0 e0       	ldi	r31, 0x00	; 0
 32a:	ee 0f       	add	r30, r30
 32c:	ff 1f       	adc	r31, r31
 32e:	2c 81       	ldd	r18, Y+4	; 0x04
 330:	3d 81       	ldd	r19, Y+5	; 0x05
 332:	e2 0f       	add	r30, r18
 334:	f3 1f       	adc	r31, r19
 336:	01 90       	ld	r0, Z+
 338:	f0 81       	ld	r31, Z
 33a:	e0 2d       	mov	r30, r0
 33c:	93 81       	ldd	r25, Z+3	; 0x03
 33e:	91 11       	cpse	r25, r1
 340:	08 c0       	rjmp	.+16     	; 0x352 <menu_right+0x3c>
		return m->submenus.entries[arrow_index];
	} else {
		m->submenus.entries[arrow_index]->fn(arrow_index, setup);
 342:	00 84       	ldd	r0, Z+8	; 0x08
 344:	f1 85       	ldd	r31, Z+9	; 0x09
 346:	e0 2d       	mov	r30, r0
 348:	b8 01       	movw	r22, r16
 34a:	09 95       	icall
		return m->parent;
 34c:	8e 81       	ldd	r24, Y+6	; 0x06
 34e:	9f 81       	ldd	r25, Y+7	; 0x07
 350:	02 c0       	rjmp	.+4      	; 0x356 <menu_right+0x40>
}

menuitem* menu_right(menuitem* m, can_message_t* setup){
	uint8_t arrow_index = menu_arrow_index(m);
	if(m->submenus.entries[arrow_index]->submenus.number != 0){
		return m->submenus.entries[arrow_index];
 352:	8e 2f       	mov	r24, r30
 354:	9f 2f       	mov	r25, r31
	} else {
		m->submenus.entries[arrow_index]->fn(arrow_index, setup);
		return m->parent;
	}
}
 356:	df 91       	pop	r29
 358:	cf 91       	pop	r28
 35a:	1f 91       	pop	r17
 35c:	0f 91       	pop	r16
 35e:	08 95       	ret

00000360 <menu_up>:
	} else {
		return m;
	}
}

void menu_up(menuitem* m){
 360:	cf 93       	push	r28
 362:	df 93       	push	r29
 364:	ec 01       	movw	r28, r24
	uint8_t arrow_index = menu_arrow_index(m);
 366:	0e 94 6a 01 	call	0x2d4	; 0x2d4 <menu_arrow_index>
	if(arrow_index > 0){
 36a:	88 23       	and	r24, r24
 36c:	b1 f0       	breq	.+44     	; 0x39a <menu_up+0x3a>
		m->submenus.entries[arrow_index]->arrow_flag = 0;
 36e:	90 e0       	ldi	r25, 0x00	; 0
 370:	88 0f       	add	r24, r24
 372:	99 1f       	adc	r25, r25
 374:	ec 81       	ldd	r30, Y+4	; 0x04
 376:	fd 81       	ldd	r31, Y+5	; 0x05
 378:	e8 0f       	add	r30, r24
 37a:	f9 1f       	adc	r31, r25
 37c:	01 90       	ld	r0, Z+
 37e:	f0 81       	ld	r31, Z
 380:	e0 2d       	mov	r30, r0
 382:	12 82       	std	Z+2, r1	; 0x02
		m->submenus.entries[arrow_index-1]->arrow_flag = 1;
 384:	ec 81       	ldd	r30, Y+4	; 0x04
 386:	fd 81       	ldd	r31, Y+5	; 0x05
 388:	8e 0f       	add	r24, r30
 38a:	9f 1f       	adc	r25, r31
 38c:	fc 01       	movw	r30, r24
 38e:	32 97       	sbiw	r30, 0x02	; 2
 390:	01 90       	ld	r0, Z+
 392:	f0 81       	ld	r31, Z
 394:	e0 2d       	mov	r30, r0
 396:	81 e0       	ldi	r24, 0x01	; 1
 398:	82 83       	std	Z+2, r24	; 0x02
	}
}
 39a:	df 91       	pop	r29
 39c:	cf 91       	pop	r28
 39e:	08 95       	ret

000003a0 <menu_down>:

void menu_down(menuitem* m){
 3a0:	cf 93       	push	r28
 3a2:	df 93       	push	r29
 3a4:	ec 01       	movw	r28, r24
	uint8_t arrow_index = menu_arrow_index(m);
 3a6:	0e 94 6a 01 	call	0x2d4	; 0x2d4 <menu_arrow_index>
	if(arrow_index < m->submenus.number - 1){
 3aa:	48 2f       	mov	r20, r24
 3ac:	50 e0       	ldi	r21, 0x00	; 0
 3ae:	2b 81       	ldd	r18, Y+3	; 0x03
 3b0:	30 e0       	ldi	r19, 0x00	; 0
 3b2:	21 50       	subi	r18, 0x01	; 1
 3b4:	31 09       	sbc	r19, r1
 3b6:	42 17       	cp	r20, r18
 3b8:	53 07       	cpc	r21, r19
 3ba:	ac f4       	brge	.+42     	; 0x3e6 <menu_down+0x46>
		m->submenus.entries[arrow_index]->arrow_flag = 0;
 3bc:	ca 01       	movw	r24, r20
 3be:	88 0f       	add	r24, r24
 3c0:	99 1f       	adc	r25, r25
 3c2:	ec 81       	ldd	r30, Y+4	; 0x04
 3c4:	fd 81       	ldd	r31, Y+5	; 0x05
 3c6:	e8 0f       	add	r30, r24
 3c8:	f9 1f       	adc	r31, r25
 3ca:	01 90       	ld	r0, Z+
 3cc:	f0 81       	ld	r31, Z
 3ce:	e0 2d       	mov	r30, r0
 3d0:	12 82       	std	Z+2, r1	; 0x02
		m->submenus.entries[arrow_index+1]->arrow_flag = 1;
 3d2:	2c 81       	ldd	r18, Y+4	; 0x04
 3d4:	3d 81       	ldd	r19, Y+5	; 0x05
 3d6:	f9 01       	movw	r30, r18
 3d8:	e8 0f       	add	r30, r24
 3da:	f9 1f       	adc	r31, r25
 3dc:	02 80       	ldd	r0, Z+2	; 0x02
 3de:	f3 81       	ldd	r31, Z+3	; 0x03
 3e0:	e0 2d       	mov	r30, r0
 3e2:	81 e0       	ldi	r24, 0x01	; 1
 3e4:	82 83       	std	Z+2, r24	; 0x02
	}
}
 3e6:	df 91       	pop	r29
 3e8:	cf 91       	pop	r28
 3ea:	08 95       	ret

000003ec <menu_new>:

menuitem* menu_new(char* name, uint8_t numSubmenus, void fn(uint8_t, can_message_t*)){
 3ec:	df 92       	push	r13
 3ee:	ef 92       	push	r14
 3f0:	ff 92       	push	r15
 3f2:	0f 93       	push	r16
 3f4:	1f 93       	push	r17
 3f6:	cf 93       	push	r28
 3f8:	df 93       	push	r29
 3fa:	8c 01       	movw	r16, r24
 3fc:	d6 2e       	mov	r13, r22
 3fe:	7a 01       	movw	r14, r20
	menuitem* m = malloc(sizeof(menuitem));
 400:	8a e0       	ldi	r24, 0x0A	; 10
 402:	90 e0       	ldi	r25, 0x00	; 0
 404:	0e 94 83 05 	call	0xb06	; 0xb06 <malloc>
 408:	ec 01       	movw	r28, r24
	memset(m, 0, sizeof(menuitem));
 40a:	8a e0       	ldi	r24, 0x0A	; 10
 40c:	fe 01       	movw	r30, r28
 40e:	11 92       	st	Z+, r1
 410:	8a 95       	dec	r24
 412:	e9 f7       	brne	.-6      	; 0x40e <menu_new+0x22>
	
	m->submenus.entries = malloc(sizeof(menuitem*) * numSubmenus);
 414:	8d 2d       	mov	r24, r13
 416:	90 e0       	ldi	r25, 0x00	; 0
 418:	88 0f       	add	r24, r24
 41a:	99 1f       	adc	r25, r25
 41c:	0e 94 83 05 	call	0xb06	; 0xb06 <malloc>
 420:	9d 83       	std	Y+5, r25	; 0x05
 422:	8c 83       	std	Y+4, r24	; 0x04
	m->submenus.number = numSubmenus;
 424:	db 82       	std	Y+3, r13	; 0x03
	m->fn = fn;
 426:	f9 86       	std	Y+9, r15	; 0x09
 428:	e8 86       	std	Y+8, r14	; 0x08
	m->name = name;
 42a:	19 83       	std	Y+1, r17	; 0x01
 42c:	08 83       	st	Y, r16
	
	return m;
}
 42e:	ce 01       	movw	r24, r28
 430:	df 91       	pop	r29
 432:	cf 91       	pop	r28
 434:	1f 91       	pop	r17
 436:	0f 91       	pop	r16
 438:	ff 90       	pop	r15
 43a:	ef 90       	pop	r14
 43c:	df 90       	pop	r13
 43e:	08 95       	ret

00000440 <menu_assign_parents_stdArrow>:

	menu_assign_parents_stdArrow(main_menu);
	return main_menu;
}

void menu_assign_parents_stdArrow(menuitem* m){
 440:	0f 93       	push	r16
 442:	1f 93       	push	r17
 444:	cf 93       	push	r28
 446:	df 93       	push	r29
 448:	ec 01       	movw	r28, r24
	for(uint8_t idx = 0; idx < m->submenus.number; idx++){
 44a:	8b 81       	ldd	r24, Y+3	; 0x03
 44c:	88 23       	and	r24, r24
 44e:	39 f1       	breq	.+78     	; 0x49e <menu_assign_parents_stdArrow+0x5e>
 450:	10 e0       	ldi	r17, 0x00	; 0
		m->submenus.entries[idx]->parent = m;
		if (idx == 0){
			m->submenus.entries[0]->arrow_flag = 1;	
 452:	01 e0       	ldi	r16, 0x01	; 1
	return main_menu;
}

void menu_assign_parents_stdArrow(menuitem* m){
	for(uint8_t idx = 0; idx < m->submenus.number; idx++){
		m->submenus.entries[idx]->parent = m;
 454:	81 2f       	mov	r24, r17
 456:	90 e0       	ldi	r25, 0x00	; 0
 458:	88 0f       	add	r24, r24
 45a:	99 1f       	adc	r25, r25
 45c:	ec 81       	ldd	r30, Y+4	; 0x04
 45e:	fd 81       	ldd	r31, Y+5	; 0x05
 460:	e8 0f       	add	r30, r24
 462:	f9 1f       	adc	r31, r25
 464:	01 90       	ld	r0, Z+
 466:	f0 81       	ld	r31, Z
 468:	e0 2d       	mov	r30, r0
 46a:	d7 83       	std	Z+7, r29	; 0x07
 46c:	c6 83       	std	Z+6, r28	; 0x06
		if (idx == 0){
 46e:	11 11       	cpse	r17, r1
 470:	06 c0       	rjmp	.+12     	; 0x47e <menu_assign_parents_stdArrow+0x3e>
			m->submenus.entries[0]->arrow_flag = 1;	
 472:	ec 81       	ldd	r30, Y+4	; 0x04
 474:	fd 81       	ldd	r31, Y+5	; 0x05
 476:	01 90       	ld	r0, Z+
 478:	f0 81       	ld	r31, Z
 47a:	e0 2d       	mov	r30, r0
 47c:	02 83       	std	Z+2, r16	; 0x02
		}
		if(m->submenus.number > 0){
 47e:	2b 81       	ldd	r18, Y+3	; 0x03
 480:	22 23       	and	r18, r18
 482:	69 f0       	breq	.+26     	; 0x49e <menu_assign_parents_stdArrow+0x5e>
			menu_assign_parents_stdArrow(m->submenus.entries[idx]);
 484:	2c 81       	ldd	r18, Y+4	; 0x04
 486:	3d 81       	ldd	r19, Y+5	; 0x05
 488:	f9 01       	movw	r30, r18
 48a:	e8 0f       	add	r30, r24
 48c:	f9 1f       	adc	r31, r25
 48e:	80 81       	ld	r24, Z
 490:	91 81       	ldd	r25, Z+1	; 0x01
 492:	0e 94 20 02 	call	0x440	; 0x440 <menu_assign_parents_stdArrow>
	menu_assign_parents_stdArrow(main_menu);
	return main_menu;
}

void menu_assign_parents_stdArrow(menuitem* m){
	for(uint8_t idx = 0; idx < m->submenus.number; idx++){
 496:	1f 5f       	subi	r17, 0xFF	; 255
 498:	8b 81       	ldd	r24, Y+3	; 0x03
 49a:	18 17       	cp	r17, r24
 49c:	d8 f2       	brcs	.-74     	; 0x454 <menu_assign_parents_stdArrow+0x14>
		}
		if(m->submenus.number > 0){
			menu_assign_parents_stdArrow(m->submenus.entries[idx]);
		}
	}
}
 49e:	df 91       	pop	r29
 4a0:	cf 91       	pop	r28
 4a2:	1f 91       	pop	r17
 4a4:	0f 91       	pop	r16
 4a6:	08 95       	ret

000004a8 <menu_init>:

void menu_player_select(uint8_t choice, can_message_t* setup){
	(*setup).data[0] = choice;
}

menuitem* menu_init(){
 4a8:	0f 93       	push	r16
 4aa:	1f 93       	push	r17
 4ac:	cf 93       	push	r28
 4ae:	df 93       	push	r29

	menuitem* main_menu = menu_new("Main menu", 2, NULL);
 4b0:	40 e0       	ldi	r20, 0x00	; 0
 4b2:	50 e0       	ldi	r21, 0x00	; 0
 4b4:	62 e0       	ldi	r22, 0x02	; 2
 4b6:	89 e0       	ldi	r24, 0x09	; 9
 4b8:	91 e0       	ldi	r25, 0x01	; 1
 4ba:	0e 94 f6 01 	call	0x3ec	; 0x3ec <menu_new>
 4be:	ec 01       	movw	r28, r24
		main_menu->submenus.entries[0] = menu_new("New game", 2, NULL);
 4c0:	0c 81       	ldd	r16, Y+4	; 0x04
 4c2:	1d 81       	ldd	r17, Y+5	; 0x05
 4c4:	40 e0       	ldi	r20, 0x00	; 0
 4c6:	50 e0       	ldi	r21, 0x00	; 0
 4c8:	62 e0       	ldi	r22, 0x02	; 2
 4ca:	83 e1       	ldi	r24, 0x13	; 19
 4cc:	91 e0       	ldi	r25, 0x01	; 1
 4ce:	0e 94 f6 01 	call	0x3ec	; 0x3ec <menu_new>
 4d2:	f8 01       	movw	r30, r16
 4d4:	91 83       	std	Z+1, r25	; 0x01
 4d6:	80 83       	st	Z, r24
			main_menu->submenus.entries[0]->submenus.entries[0] = menu_new("Single player", 0, &menu_player_select); //FUNKSJON
 4d8:	ec 81       	ldd	r30, Y+4	; 0x04
 4da:	fd 81       	ldd	r31, Y+5	; 0x05
 4dc:	01 90       	ld	r0, Z+
 4de:	f0 81       	ld	r31, Z
 4e0:	e0 2d       	mov	r30, r0
 4e2:	04 81       	ldd	r16, Z+4	; 0x04
 4e4:	15 81       	ldd	r17, Z+5	; 0x05
 4e6:	47 e6       	ldi	r20, 0x67	; 103
 4e8:	51 e0       	ldi	r21, 0x01	; 1
 4ea:	60 e0       	ldi	r22, 0x00	; 0
 4ec:	8c e1       	ldi	r24, 0x1C	; 28
 4ee:	91 e0       	ldi	r25, 0x01	; 1
 4f0:	0e 94 f6 01 	call	0x3ec	; 0x3ec <menu_new>
 4f4:	f8 01       	movw	r30, r16
 4f6:	91 83       	std	Z+1, r25	; 0x01
 4f8:	80 83       	st	Z, r24
			main_menu->submenus.entries[0]->submenus.entries[1] = menu_new("Double player", 0, &menu_player_select); //FUNKSJON
 4fa:	ec 81       	ldd	r30, Y+4	; 0x04
 4fc:	fd 81       	ldd	r31, Y+5	; 0x05
 4fe:	01 90       	ld	r0, Z+
 500:	f0 81       	ld	r31, Z
 502:	e0 2d       	mov	r30, r0
 504:	04 81       	ldd	r16, Z+4	; 0x04
 506:	15 81       	ldd	r17, Z+5	; 0x05
 508:	47 e6       	ldi	r20, 0x67	; 103
 50a:	51 e0       	ldi	r21, 0x01	; 1
 50c:	60 e0       	ldi	r22, 0x00	; 0
 50e:	8a e2       	ldi	r24, 0x2A	; 42
 510:	91 e0       	ldi	r25, 0x01	; 1
 512:	0e 94 f6 01 	call	0x3ec	; 0x3ec <menu_new>
 516:	f8 01       	movw	r30, r16
 518:	93 83       	std	Z+3, r25	; 0x03
 51a:	82 83       	std	Z+2, r24	; 0x02

		main_menu->submenus.entries[1] = menu_new("Options", 2, NULL);
 51c:	0c 81       	ldd	r16, Y+4	; 0x04
 51e:	1d 81       	ldd	r17, Y+5	; 0x05
 520:	40 e0       	ldi	r20, 0x00	; 0
 522:	50 e0       	ldi	r21, 0x00	; 0
 524:	62 e0       	ldi	r22, 0x02	; 2
 526:	88 e3       	ldi	r24, 0x38	; 56
 528:	91 e0       	ldi	r25, 0x01	; 1
 52a:	0e 94 f6 01 	call	0x3ec	; 0x3ec <menu_new>
 52e:	f8 01       	movw	r30, r16
 530:	93 83       	std	Z+3, r25	; 0x03
 532:	82 83       	std	Z+2, r24	; 0x02
			main_menu->submenus.entries[1]->submenus.entries[0] = menu_new("Controller", 2, NULL);
 534:	ec 81       	ldd	r30, Y+4	; 0x04
 536:	fd 81       	ldd	r31, Y+5	; 0x05
 538:	02 80       	ldd	r0, Z+2	; 0x02
 53a:	f3 81       	ldd	r31, Z+3	; 0x03
 53c:	e0 2d       	mov	r30, r0
 53e:	04 81       	ldd	r16, Z+4	; 0x04
 540:	15 81       	ldd	r17, Z+5	; 0x05
 542:	40 e0       	ldi	r20, 0x00	; 0
 544:	50 e0       	ldi	r21, 0x00	; 0
 546:	62 e0       	ldi	r22, 0x02	; 2
 548:	80 e4       	ldi	r24, 0x40	; 64
 54a:	91 e0       	ldi	r25, 0x01	; 1
 54c:	0e 94 f6 01 	call	0x3ec	; 0x3ec <menu_new>
 550:	f8 01       	movw	r30, r16
 552:	91 83       	std	Z+1, r25	; 0x01
 554:	80 83       	st	Z, r24
				main_menu->submenus.entries[1]->submenus.entries[0]->submenus.entries[0] = menu_new("Dualshock3", 0, NULL); //FUNKSJON
 556:	ec 81       	ldd	r30, Y+4	; 0x04
 558:	fd 81       	ldd	r31, Y+5	; 0x05
 55a:	02 80       	ldd	r0, Z+2	; 0x02
 55c:	f3 81       	ldd	r31, Z+3	; 0x03
 55e:	e0 2d       	mov	r30, r0
 560:	04 80       	ldd	r0, Z+4	; 0x04
 562:	f5 81       	ldd	r31, Z+5	; 0x05
 564:	e0 2d       	mov	r30, r0
 566:	01 90       	ld	r0, Z+
 568:	f0 81       	ld	r31, Z
 56a:	e0 2d       	mov	r30, r0
 56c:	04 81       	ldd	r16, Z+4	; 0x04
 56e:	15 81       	ldd	r17, Z+5	; 0x05
 570:	40 e0       	ldi	r20, 0x00	; 0
 572:	50 e0       	ldi	r21, 0x00	; 0
 574:	60 e0       	ldi	r22, 0x00	; 0
 576:	8b e4       	ldi	r24, 0x4B	; 75
 578:	91 e0       	ldi	r25, 0x01	; 1
 57a:	0e 94 f6 01 	call	0x3ec	; 0x3ec <menu_new>
 57e:	f8 01       	movw	r30, r16
 580:	91 83       	std	Z+1, r25	; 0x01
 582:	80 83       	st	Z, r24
				main_menu->submenus.entries[1]->submenus.entries[0]->submenus.entries[1] = menu_new("Multifunction Card", 0, NULL); //FUNKSJON
 584:	ec 81       	ldd	r30, Y+4	; 0x04
 586:	fd 81       	ldd	r31, Y+5	; 0x05
 588:	02 80       	ldd	r0, Z+2	; 0x02
 58a:	f3 81       	ldd	r31, Z+3	; 0x03
 58c:	e0 2d       	mov	r30, r0
 58e:	04 80       	ldd	r0, Z+4	; 0x04
 590:	f5 81       	ldd	r31, Z+5	; 0x05
 592:	e0 2d       	mov	r30, r0
 594:	01 90       	ld	r0, Z+
 596:	f0 81       	ld	r31, Z
 598:	e0 2d       	mov	r30, r0
 59a:	04 81       	ldd	r16, Z+4	; 0x04
 59c:	15 81       	ldd	r17, Z+5	; 0x05
 59e:	40 e0       	ldi	r20, 0x00	; 0
 5a0:	50 e0       	ldi	r21, 0x00	; 0
 5a2:	60 e0       	ldi	r22, 0x00	; 0
 5a4:	86 e5       	ldi	r24, 0x56	; 86
 5a6:	91 e0       	ldi	r25, 0x01	; 1
 5a8:	0e 94 f6 01 	call	0x3ec	; 0x3ec <menu_new>
 5ac:	f8 01       	movw	r30, r16
 5ae:	93 83       	std	Z+3, r25	; 0x03
 5b0:	82 83       	std	Z+2, r24	; 0x02
			main_menu->submenus.entries[1]->submenus.entries[1] = menu_new("Method of control", 2, NULL);
 5b2:	ec 81       	ldd	r30, Y+4	; 0x04
 5b4:	fd 81       	ldd	r31, Y+5	; 0x05
 5b6:	02 80       	ldd	r0, Z+2	; 0x02
 5b8:	f3 81       	ldd	r31, Z+3	; 0x03
 5ba:	e0 2d       	mov	r30, r0
 5bc:	04 81       	ldd	r16, Z+4	; 0x04
 5be:	15 81       	ldd	r17, Z+5	; 0x05
 5c0:	40 e0       	ldi	r20, 0x00	; 0
 5c2:	50 e0       	ldi	r21, 0x00	; 0
 5c4:	62 e0       	ldi	r22, 0x02	; 2
 5c6:	89 e6       	ldi	r24, 0x69	; 105
 5c8:	91 e0       	ldi	r25, 0x01	; 1
 5ca:	0e 94 f6 01 	call	0x3ec	; 0x3ec <menu_new>
 5ce:	f8 01       	movw	r30, r16
 5d0:	93 83       	std	Z+3, r25	; 0x03
 5d2:	82 83       	std	Z+2, r24	; 0x02
				main_menu->submenus.entries[1]->submenus.entries[1]->submenus.entries[0] = menu_new("Speed", 0, NULL); //FUNKSJON
 5d4:	ec 81       	ldd	r30, Y+4	; 0x04
 5d6:	fd 81       	ldd	r31, Y+5	; 0x05
 5d8:	02 80       	ldd	r0, Z+2	; 0x02
 5da:	f3 81       	ldd	r31, Z+3	; 0x03
 5dc:	e0 2d       	mov	r30, r0
 5de:	04 80       	ldd	r0, Z+4	; 0x04
 5e0:	f5 81       	ldd	r31, Z+5	; 0x05
 5e2:	e0 2d       	mov	r30, r0
 5e4:	02 80       	ldd	r0, Z+2	; 0x02
 5e6:	f3 81       	ldd	r31, Z+3	; 0x03
 5e8:	e0 2d       	mov	r30, r0
 5ea:	04 81       	ldd	r16, Z+4	; 0x04
 5ec:	15 81       	ldd	r17, Z+5	; 0x05
 5ee:	40 e0       	ldi	r20, 0x00	; 0
 5f0:	50 e0       	ldi	r21, 0x00	; 0
 5f2:	60 e0       	ldi	r22, 0x00	; 0
 5f4:	8b e7       	ldi	r24, 0x7B	; 123
 5f6:	91 e0       	ldi	r25, 0x01	; 1
 5f8:	0e 94 f6 01 	call	0x3ec	; 0x3ec <menu_new>
 5fc:	f8 01       	movw	r30, r16
 5fe:	91 83       	std	Z+1, r25	; 0x01
 600:	80 83       	st	Z, r24
				main_menu->submenus.entries[1]->submenus.entries[1]->submenus.entries[1] = menu_new("Position", 0, NULL); //FUNKSJON
 602:	ec 81       	ldd	r30, Y+4	; 0x04
 604:	fd 81       	ldd	r31, Y+5	; 0x05
 606:	02 80       	ldd	r0, Z+2	; 0x02
 608:	f3 81       	ldd	r31, Z+3	; 0x03
 60a:	e0 2d       	mov	r30, r0
 60c:	04 80       	ldd	r0, Z+4	; 0x04
 60e:	f5 81       	ldd	r31, Z+5	; 0x05
 610:	e0 2d       	mov	r30, r0
 612:	02 80       	ldd	r0, Z+2	; 0x02
 614:	f3 81       	ldd	r31, Z+3	; 0x03
 616:	e0 2d       	mov	r30, r0
 618:	04 81       	ldd	r16, Z+4	; 0x04
 61a:	15 81       	ldd	r17, Z+5	; 0x05
 61c:	40 e0       	ldi	r20, 0x00	; 0
 61e:	50 e0       	ldi	r21, 0x00	; 0
 620:	60 e0       	ldi	r22, 0x00	; 0
 622:	81 e8       	ldi	r24, 0x81	; 129
 624:	91 e0       	ldi	r25, 0x01	; 1
 626:	0e 94 f6 01 	call	0x3ec	; 0x3ec <menu_new>
 62a:	f8 01       	movw	r30, r16
 62c:	93 83       	std	Z+3, r25	; 0x03
 62e:	82 83       	std	Z+2, r24	; 0x02

	menu_assign_parents_stdArrow(main_menu);
 630:	ce 01       	movw	r24, r28
 632:	0e 94 20 02 	call	0x440	; 0x440 <menu_assign_parents_stdArrow>
	return main_menu;
}
 636:	ce 01       	movw	r24, r28
 638:	df 91       	pop	r29
 63a:	cf 91       	pop	r28
 63c:	1f 91       	pop	r17
 63e:	0f 91       	pop	r16
 640:	08 95       	ret

00000642 <menu_print>:
	}
}


void menu_print(menuitem* m)
{
 642:	ff 92       	push	r15
 644:	0f 93       	push	r16
 646:	1f 93       	push	r17
 648:	cf 93       	push	r28
 64a:	df 93       	push	r29
 64c:	ec 01       	movw	r28, r24
	OLED_pos(0,0);
 64e:	60 e0       	ldi	r22, 0x00	; 0
 650:	80 e0       	ldi	r24, 0x00	; 0
 652:	0e 94 91 04 	call	0x922	; 0x922 <OLED_pos>
	OLED_print_string(m->name);
 656:	88 81       	ld	r24, Y
 658:	99 81       	ldd	r25, Y+1	; 0x01
 65a:	0e 94 e7 04 	call	0x9ce	; 0x9ce <OLED_print_string>
	OLED_clear_rest_of_line();
 65e:	0e 94 9a 04 	call	0x934	; 0x934 <OLED_clear_rest_of_line>
	for (uint8_t i = 0; i < m->submenus.number; i++){
 662:	8b 81       	ldd	r24, Y+3	; 0x03
 664:	88 23       	and	r24, r24
 666:	89 f1       	breq	.+98     	; 0x6ca <menu_print+0x88>
 668:	00 e0       	ldi	r16, 0x00	; 0
		OLED_pos(i+1,0);
 66a:	ff 24       	eor	r15, r15
 66c:	f3 94       	inc	r15
 66e:	f0 0e       	add	r15, r16
 670:	60 e0       	ldi	r22, 0x00	; 0
 672:	8f 2d       	mov	r24, r15
 674:	0e 94 91 04 	call	0x922	; 0x922 <OLED_pos>
		if(m->submenus.entries[i]->arrow_flag){
 678:	10 e0       	ldi	r17, 0x00	; 0
 67a:	00 0f       	add	r16, r16
 67c:	11 1f       	adc	r17, r17
 67e:	ec 81       	ldd	r30, Y+4	; 0x04
 680:	fd 81       	ldd	r31, Y+5	; 0x05
 682:	e0 0f       	add	r30, r16
 684:	f1 1f       	adc	r31, r17
 686:	01 90       	ld	r0, Z+
 688:	f0 81       	ld	r31, Z
 68a:	e0 2d       	mov	r30, r0
 68c:	82 81       	ldd	r24, Z+2	; 0x02
 68e:	88 23       	and	r24, r24
 690:	29 f0       	breq	.+10     	; 0x69c <menu_print+0x5a>
			OLED_print_string("->");
 692:	8a e8       	ldi	r24, 0x8A	; 138
 694:	91 e0       	ldi	r25, 0x01	; 1
 696:	0e 94 e7 04 	call	0x9ce	; 0x9ce <OLED_print_string>
 69a:	04 c0       	rjmp	.+8      	; 0x6a4 <menu_print+0x62>
		}
		else{
			OLED_print_string("  ");
 69c:	8d e8       	ldi	r24, 0x8D	; 141
 69e:	91 e0       	ldi	r25, 0x01	; 1
 6a0:	0e 94 e7 04 	call	0x9ce	; 0x9ce <OLED_print_string>
		}		
		OLED_print_string(m->submenus.entries[i]->name);
 6a4:	2c 81       	ldd	r18, Y+4	; 0x04
 6a6:	3d 81       	ldd	r19, Y+5	; 0x05
 6a8:	f9 01       	movw	r30, r18
 6aa:	e0 0f       	add	r30, r16
 6ac:	f1 1f       	adc	r31, r17
 6ae:	01 90       	ld	r0, Z+
 6b0:	f0 81       	ld	r31, Z
 6b2:	e0 2d       	mov	r30, r0
 6b4:	80 81       	ld	r24, Z
 6b6:	91 81       	ldd	r25, Z+1	; 0x01
 6b8:	0e 94 e7 04 	call	0x9ce	; 0x9ce <OLED_print_string>
		OLED_clear_rest_of_line();
 6bc:	0e 94 9a 04 	call	0x934	; 0x934 <OLED_clear_rest_of_line>
void menu_print(menuitem* m)
{
	OLED_pos(0,0);
	OLED_print_string(m->name);
	OLED_clear_rest_of_line();
	for (uint8_t i = 0; i < m->submenus.number; i++){
 6c0:	8b 81       	ldd	r24, Y+3	; 0x03
 6c2:	f8 16       	cp	r15, r24
 6c4:	10 f4       	brcc	.+4      	; 0x6ca <menu_print+0x88>
 6c6:	0f 2d       	mov	r16, r15
 6c8:	d0 cf       	rjmp	.-96     	; 0x66a <menu_print+0x28>
			OLED_print_string("  ");
		}		
		OLED_print_string(m->submenus.entries[i]->name);
		OLED_clear_rest_of_line();
	}
}
 6ca:	df 91       	pop	r29
 6cc:	cf 91       	pop	r28
 6ce:	1f 91       	pop	r17
 6d0:	0f 91       	pop	r16
 6d2:	ff 90       	pop	r15
 6d4:	08 95       	ret

000006d6 <menu_move>:

menuitem* menu_move(menuitem* m, uint8_t* prev_dir, can_message_t* setup){	
 6d6:	ef 92       	push	r14
 6d8:	ff 92       	push	r15
 6da:	0f 93       	push	r16
 6dc:	1f 93       	push	r17
 6de:	cf 93       	push	r28
 6e0:	df 93       	push	r29
 6e2:	ec 01       	movw	r28, r24
 6e4:	8b 01       	movw	r16, r22
 6e6:	7a 01       	movw	r14, r20
	switch(Joy_getDirection()){
 6e8:	0e 94 10 04 	call	0x820	; 0x820 <Joy_getDirection>
 6ec:	81 30       	cpi	r24, 0x01	; 1
 6ee:	f1 f0       	breq	.+60     	; 0x72c <menu_move+0x56>
 6f0:	40 f1       	brcs	.+80     	; 0x742 <menu_move+0x6c>
 6f2:	82 30       	cpi	r24, 0x02	; 2
 6f4:	19 f0       	breq	.+6      	; 0x6fc <menu_move+0x26>
 6f6:	83 30       	cpi	r24, 0x03	; 3
 6f8:	69 f0       	breq	.+26     	; 0x714 <menu_move+0x3e>
 6fa:	33 c0       	rjmp	.+102    	; 0x762 <menu_move+0x8c>
		case UP:
			if (*prev_dir == NEUTRAL){
 6fc:	f8 01       	movw	r30, r16
 6fe:	80 81       	ld	r24, Z
 700:	84 30       	cpi	r24, 0x04	; 4
 702:	a9 f5       	brne	.+106    	; 0x76e <menu_move+0x98>
				*prev_dir = UP;
 704:	82 e0       	ldi	r24, 0x02	; 2
 706:	80 83       	st	Z, r24
				menu_up(m);
 708:	ce 01       	movw	r24, r28
 70a:	0e 94 b0 01 	call	0x360	; 0x360 <menu_up>
			}
			return m;
 70e:	8c 2f       	mov	r24, r28
 710:	9d 2f       	mov	r25, r29
 712:	38 c0       	rjmp	.+112    	; 0x784 <menu_move+0xae>
			break;
		case DOWN:
			if (*prev_dir == NEUTRAL){
 714:	f8 01       	movw	r30, r16
 716:	80 81       	ld	r24, Z
 718:	84 30       	cpi	r24, 0x04	; 4
 71a:	61 f5       	brne	.+88     	; 0x774 <menu_move+0x9e>
				*prev_dir = DOWN;
 71c:	83 e0       	ldi	r24, 0x03	; 3
 71e:	80 83       	st	Z, r24
				menu_down(m);
 720:	ce 01       	movw	r24, r28
 722:	0e 94 d0 01 	call	0x3a0	; 0x3a0 <menu_down>
			}
			return m;
 726:	8c 2f       	mov	r24, r28
 728:	9d 2f       	mov	r25, r29
 72a:	2c c0       	rjmp	.+88     	; 0x784 <menu_move+0xae>
			break;
		case RIGHT:
			if (*prev_dir == NEUTRAL){
 72c:	f8 01       	movw	r30, r16
 72e:	80 81       	ld	r24, Z
 730:	84 30       	cpi	r24, 0x04	; 4
 732:	19 f5       	brne	.+70     	; 0x77a <menu_move+0xa4>
				*prev_dir = RIGHT;
 734:	81 e0       	ldi	r24, 0x01	; 1
 736:	80 83       	st	Z, r24
				return menu_right(m, setup);
 738:	b7 01       	movw	r22, r14
 73a:	ce 01       	movw	r24, r28
 73c:	0e 94 8b 01 	call	0x316	; 0x316 <menu_right>
 740:	21 c0       	rjmp	.+66     	; 0x784 <menu_move+0xae>
			}
			break;
		case LEFT:
			if (*prev_dir == NEUTRAL){
 742:	f8 01       	movw	r30, r16
 744:	80 81       	ld	r24, Z
 746:	84 30       	cpi	r24, 0x04	; 4
 748:	d9 f4       	brne	.+54     	; 0x780 <menu_move+0xaa>
				*prev_dir = LEFT;
 74a:	10 82       	st	Z, r1
		return m->parent;
	}
}

menuitem* menu_left(menuitem* m){
	if(m->parent){
 74c:	2e 81       	ldd	r18, Y+6	; 0x06
 74e:	3f 81       	ldd	r19, Y+7	; 0x07
 750:	21 15       	cp	r18, r1
 752:	31 05       	cpc	r19, r1
 754:	19 f0       	breq	.+6      	; 0x75c <menu_move+0x86>
		return m->parent;
 756:	82 2f       	mov	r24, r18
 758:	93 2f       	mov	r25, r19
 75a:	14 c0       	rjmp	.+40     	; 0x784 <menu_move+0xae>
	} else {
		return m;
 75c:	8c 2f       	mov	r24, r28
 75e:	9d 2f       	mov	r25, r29
			}
			break;
		case LEFT:
			if (*prev_dir == NEUTRAL){
				*prev_dir = LEFT;
				return menu_left(m);
 760:	11 c0       	rjmp	.+34     	; 0x784 <menu_move+0xae>
			}
			break;
		default:
			*prev_dir = NEUTRAL;
 762:	84 e0       	ldi	r24, 0x04	; 4
 764:	f8 01       	movw	r30, r16
 766:	80 83       	st	Z, r24
			
		break;
	}
	return m;
 768:	8c 2f       	mov	r24, r28
 76a:	9d 2f       	mov	r25, r29
			}
			break;
		default:
			*prev_dir = NEUTRAL;
			
		break;
 76c:	0b c0       	rjmp	.+22     	; 0x784 <menu_move+0xae>
		case UP:
			if (*prev_dir == NEUTRAL){
				*prev_dir = UP;
				menu_up(m);
			}
			return m;
 76e:	8c 2f       	mov	r24, r28
 770:	9d 2f       	mov	r25, r29
 772:	08 c0       	rjmp	.+16     	; 0x784 <menu_move+0xae>
		case DOWN:
			if (*prev_dir == NEUTRAL){
				*prev_dir = DOWN;
				menu_down(m);
			}
			return m;
 774:	8c 2f       	mov	r24, r28
 776:	9d 2f       	mov	r25, r29
 778:	05 c0       	rjmp	.+10     	; 0x784 <menu_move+0xae>
		default:
			*prev_dir = NEUTRAL;
			
		break;
	}
	return m;
 77a:	8c 2f       	mov	r24, r28
 77c:	9d 2f       	mov	r25, r29
 77e:	02 c0       	rjmp	.+4      	; 0x784 <menu_move+0xae>
 780:	8c 2f       	mov	r24, r28
 782:	9d 2f       	mov	r25, r29
}
 784:	df 91       	pop	r29
 786:	cf 91       	pop	r28
 788:	1f 91       	pop	r17
 78a:	0f 91       	pop	r16
 78c:	ff 90       	pop	r15
 78e:	ef 90       	pop	r14
 790:	08 95       	ret

00000792 <JOY_calibrate>:
 792:	80 e0       	ldi	r24, 0x00	; 0
 794:	0e 94 1d 01 	call	0x23a	; 0x23a <ADC_read>
 798:	80 93 90 01 	sts	0x0190, r24
 79c:	81 e0       	ldi	r24, 0x01	; 1
 79e:	0e 94 1d 01 	call	0x23a	; 0x23a <ADC_read>
 7a2:	80 93 91 01 	sts	0x0191, r24
 7a6:	08 95       	ret

000007a8 <JOY_init>:
 7a8:	0e 94 15 01 	call	0x22a	; 0x22a <ADC_init>
 7ac:	87 b3       	in	r24, 0x17	; 23
 7ae:	88 7f       	andi	r24, 0xF8	; 248
 7b0:	87 bb       	out	0x17, r24	; 23
 7b2:	88 b3       	in	r24, 0x18	; 24
 7b4:	87 60       	ori	r24, 0x07	; 7
 7b6:	88 bb       	out	0x18, r24	; 24
 7b8:	0e 94 c9 03 	call	0x792	; 0x792 <JOY_calibrate>
 7bc:	08 95       	ret

000007be <JOY_getPosition>:
 7be:	0f 93       	push	r16
 7c0:	1f 93       	push	r17
 7c2:	cf 93       	push	r28
 7c4:	df 93       	push	r29
 7c6:	80 e0       	ldi	r24, 0x00	; 0
 7c8:	0e 94 1d 01 	call	0x23a	; 0x23a <ADC_read>
 7cc:	28 2f       	mov	r18, r24
 7ce:	30 e0       	ldi	r19, 0x00	; 0
 7d0:	80 91 90 01 	lds	r24, 0x0190
 7d4:	28 1b       	sub	r18, r24
 7d6:	31 09       	sbc	r19, r1
 7d8:	14 e6       	ldi	r17, 0x64	; 100
 7da:	12 9f       	mul	r17, r18
 7dc:	c0 01       	movw	r24, r0
 7de:	13 9f       	mul	r17, r19
 7e0:	90 0d       	add	r25, r0
 7e2:	11 24       	eor	r1, r1
 7e4:	cf e7       	ldi	r28, 0x7F	; 127
 7e6:	d0 e0       	ldi	r29, 0x00	; 0
 7e8:	be 01       	movw	r22, r28
 7ea:	0e 94 5b 05 	call	0xab6	; 0xab6 <__divmodhi4>
 7ee:	06 2f       	mov	r16, r22
 7f0:	81 e0       	ldi	r24, 0x01	; 1
 7f2:	0e 94 1d 01 	call	0x23a	; 0x23a <ADC_read>
 7f6:	48 2f       	mov	r20, r24
 7f8:	50 e0       	ldi	r21, 0x00	; 0
 7fa:	80 91 91 01 	lds	r24, 0x0191
 7fe:	48 1b       	sub	r20, r24
 800:	51 09       	sbc	r21, r1
 802:	14 9f       	mul	r17, r20
 804:	c0 01       	movw	r24, r0
 806:	15 9f       	mul	r17, r21
 808:	90 0d       	add	r25, r0
 80a:	11 24       	eor	r1, r1
 80c:	be 01       	movw	r22, r28
 80e:	0e 94 5b 05 	call	0xab6	; 0xab6 <__divmodhi4>
 812:	96 2f       	mov	r25, r22
 814:	80 2f       	mov	r24, r16
 816:	df 91       	pop	r29
 818:	cf 91       	pop	r28
 81a:	1f 91       	pop	r17
 81c:	0f 91       	pop	r16
 81e:	08 95       	ret

00000820 <Joy_getDirection>:
 820:	0e 94 df 03 	call	0x7be	; 0x7be <JOY_getPosition>
 824:	83 3d       	cpi	r24, 0xD3	; 211
 826:	44 f0       	brlt	.+16     	; 0x838 <Joy_getDirection+0x18>
 828:	8e 32       	cpi	r24, 0x2E	; 46
 82a:	44 f4       	brge	.+16     	; 0x83c <Joy_getDirection+0x1c>
 82c:	9e 32       	cpi	r25, 0x2E	; 46
 82e:	44 f4       	brge	.+16     	; 0x840 <Joy_getDirection+0x20>
 830:	93 3d       	cpi	r25, 0xD3	; 211
 832:	44 f4       	brge	.+16     	; 0x844 <Joy_getDirection+0x24>
 834:	83 e0       	ldi	r24, 0x03	; 3
 836:	08 95       	ret
 838:	80 e0       	ldi	r24, 0x00	; 0
 83a:	08 95       	ret
 83c:	81 e0       	ldi	r24, 0x01	; 1
 83e:	08 95       	ret
 840:	82 e0       	ldi	r24, 0x02	; 2
 842:	08 95       	ret
 844:	84 e0       	ldi	r24, 0x04	; 4
 846:	08 95       	ret

00000848 <OLED_go_to_page>:
 848:	90 eb       	ldi	r25, 0xB0	; 176
 84a:	98 0f       	add	r25, r24
 84c:	90 93 00 10 	sts	0x1000, r25
 850:	80 93 92 01 	sts	0x0192, r24
 854:	08 95       	ret

00000856 <OLED_clear_page>:
 856:	0e 94 24 04 	call	0x848	; 0x848 <OLED_go_to_page>
 85a:	80 e8       	ldi	r24, 0x80	; 128
 85c:	90 e0       	ldi	r25, 0x00	; 0
 85e:	e0 e0       	ldi	r30, 0x00	; 0
 860:	f2 e1       	ldi	r31, 0x12	; 18
 862:	10 82       	st	Z, r1
 864:	01 97       	sbiw	r24, 0x01	; 1
 866:	00 97       	sbiw	r24, 0x00	; 0
 868:	e1 f7       	brne	.-8      	; 0x862 <OLED_clear_page+0xc>
 86a:	08 95       	ret

0000086c <OLED_reset>:
 86c:	cf 93       	push	r28
 86e:	c0 e0       	ldi	r28, 0x00	; 0
 870:	8c 2f       	mov	r24, r28
 872:	0e 94 2b 04 	call	0x856	; 0x856 <OLED_clear_page>
 876:	cf 5f       	subi	r28, 0xFF	; 255
 878:	c8 30       	cpi	r28, 0x08	; 8
 87a:	d1 f7       	brne	.-12     	; 0x870 <OLED_reset+0x4>
 87c:	cf 91       	pop	r28
 87e:	08 95       	ret

00000880 <OLED_go_to_col>:
 880:	98 2f       	mov	r25, r24
 882:	9f 70       	andi	r25, 0x0F	; 15
 884:	28 2f       	mov	r18, r24
 886:	22 95       	swap	r18
 888:	2f 70       	andi	r18, 0x0F	; 15
 88a:	20 5f       	subi	r18, 0xF0	; 240
 88c:	e0 e0       	ldi	r30, 0x00	; 0
 88e:	f0 e1       	ldi	r31, 0x10	; 16
 890:	20 83       	st	Z, r18
 892:	90 83       	st	Z, r25
 894:	80 93 93 01 	sts	0x0193, r24
 898:	08 95       	ret

0000089a <OLED_home>:
 89a:	80 e0       	ldi	r24, 0x00	; 0
 89c:	0e 94 24 04 	call	0x848	; 0x848 <OLED_go_to_page>
 8a0:	80 e0       	ldi	r24, 0x00	; 0
 8a2:	0e 94 40 04 	call	0x880	; 0x880 <OLED_go_to_col>
 8a6:	08 95       	ret

000008a8 <OLED_init>:
 8a8:	85 b7       	in	r24, 0x35	; 53
 8aa:	80 68       	ori	r24, 0x80	; 128
 8ac:	85 bf       	out	0x35, r24	; 53
 8ae:	80 b7       	in	r24, 0x30	; 48
 8b0:	80 62       	ori	r24, 0x20	; 32
 8b2:	80 bf       	out	0x30, r24	; 48
 8b4:	e0 e0       	ldi	r30, 0x00	; 0
 8b6:	f0 e1       	ldi	r31, 0x10	; 16
 8b8:	8e ea       	ldi	r24, 0xAE	; 174
 8ba:	80 83       	st	Z, r24
 8bc:	81 ea       	ldi	r24, 0xA1	; 161
 8be:	80 83       	st	Z, r24
 8c0:	8a ed       	ldi	r24, 0xDA	; 218
 8c2:	80 83       	st	Z, r24
 8c4:	82 e1       	ldi	r24, 0x12	; 18
 8c6:	80 83       	st	Z, r24
 8c8:	88 ec       	ldi	r24, 0xC8	; 200
 8ca:	80 83       	st	Z, r24
 8cc:	88 ea       	ldi	r24, 0xA8	; 168
 8ce:	80 83       	st	Z, r24
 8d0:	8f e3       	ldi	r24, 0x3F	; 63
 8d2:	80 83       	st	Z, r24
 8d4:	85 ed       	ldi	r24, 0xD5	; 213
 8d6:	80 83       	st	Z, r24
 8d8:	80 e8       	ldi	r24, 0x80	; 128
 8da:	80 83       	st	Z, r24
 8dc:	81 e8       	ldi	r24, 0x81	; 129
 8de:	80 83       	st	Z, r24
 8e0:	80 e5       	ldi	r24, 0x50	; 80
 8e2:	80 83       	st	Z, r24
 8e4:	89 ed       	ldi	r24, 0xD9	; 217
 8e6:	80 83       	st	Z, r24
 8e8:	81 e2       	ldi	r24, 0x21	; 33
 8ea:	80 83       	st	Z, r24
 8ec:	80 e2       	ldi	r24, 0x20	; 32
 8ee:	80 83       	st	Z, r24
 8f0:	82 e0       	ldi	r24, 0x02	; 2
 8f2:	80 83       	st	Z, r24
 8f4:	8b ed       	ldi	r24, 0xDB	; 219
 8f6:	80 83       	st	Z, r24
 8f8:	80 e3       	ldi	r24, 0x30	; 48
 8fa:	80 83       	st	Z, r24
 8fc:	8d ea       	ldi	r24, 0xAD	; 173
 8fe:	80 83       	st	Z, r24
 900:	10 82       	st	Z, r1
 902:	84 ea       	ldi	r24, 0xA4	; 164
 904:	80 83       	st	Z, r24
 906:	86 ea       	ldi	r24, 0xA6	; 166
 908:	80 83       	st	Z, r24
 90a:	8f ea       	ldi	r24, 0xAF	; 175
 90c:	80 83       	st	Z, r24
 90e:	80 eb       	ldi	r24, 0xB0	; 176
 910:	80 83       	st	Z, r24
 912:	10 82       	st	Z, r1
 914:	80 e1       	ldi	r24, 0x10	; 16
 916:	80 83       	st	Z, r24
 918:	0e 94 36 04 	call	0x86c	; 0x86c <OLED_reset>
 91c:	0e 94 4d 04 	call	0x89a	; 0x89a <OLED_home>
 920:	08 95       	ret

00000922 <OLED_pos>:
 922:	cf 93       	push	r28
 924:	c6 2f       	mov	r28, r22
 926:	0e 94 24 04 	call	0x848	; 0x848 <OLED_go_to_page>
 92a:	8c 2f       	mov	r24, r28
 92c:	0e 94 40 04 	call	0x880	; 0x880 <OLED_go_to_col>
 930:	cf 91       	pop	r28
 932:	08 95       	ret

00000934 <OLED_clear_rest_of_line>:
 934:	80 91 93 01 	lds	r24, 0x0193
 938:	90 e0       	ldi	r25, 0x00	; 0
 93a:	80 38       	cpi	r24, 0x80	; 128
 93c:	91 05       	cpc	r25, r1
 93e:	3c f4       	brge	.+14     	; 0x94e <OLED_clear_rest_of_line+0x1a>
 940:	e0 e0       	ldi	r30, 0x00	; 0
 942:	f2 e1       	ldi	r31, 0x12	; 18
 944:	10 82       	st	Z, r1
 946:	01 96       	adiw	r24, 0x01	; 1
 948:	80 38       	cpi	r24, 0x80	; 128
 94a:	91 05       	cpc	r25, r1
 94c:	d9 f7       	brne	.-10     	; 0x944 <OLED_clear_rest_of_line+0x10>
 94e:	10 92 93 01 	sts	0x0193, r1
 952:	08 95       	ret

00000954 <OLED_print>:
 954:	8a 30       	cpi	r24, 0x0A	; 10
 956:	41 f0       	breq	.+16     	; 0x968 <OLED_print+0x14>
 958:	90 91 08 01 	lds	r25, 0x0108
 95c:	49 2f       	mov	r20, r25
 95e:	50 e0       	ldi	r21, 0x00	; 0
 960:	14 16       	cp	r1, r20
 962:	15 06       	cpc	r1, r21
 964:	24 f0       	brlt	.+8      	; 0x96e <OLED_print+0x1a>
 966:	25 c0       	rjmp	.+74     	; 0x9b2 <OLED_print+0x5e>
 968:	0e 94 9a 04 	call	0x934	; 0x934 <OLED_clear_rest_of_line>
 96c:	08 95       	ret
 96e:	20 e0       	ldi	r18, 0x00	; 0
 970:	30 e0       	ldi	r19, 0x00	; 0
 972:	68 2f       	mov	r22, r24
 974:	70 e0       	ldi	r23, 0x00	; 0
 976:	60 52       	subi	r22, 0x20	; 32
 978:	71 09       	sbc	r23, r1
 97a:	a0 e0       	ldi	r26, 0x00	; 0
 97c:	b2 e1       	ldi	r27, 0x12	; 18
 97e:	46 9f       	mul	r20, r22
 980:	f0 01       	movw	r30, r0
 982:	47 9f       	mul	r20, r23
 984:	f0 0d       	add	r31, r0
 986:	56 9f       	mul	r21, r22
 988:	f0 0d       	add	r31, r0
 98a:	11 24       	eor	r1, r1
 98c:	e2 0f       	add	r30, r18
 98e:	f3 1f       	adc	r31, r19
 990:	80 91 06 01 	lds	r24, 0x0106
 994:	90 91 07 01 	lds	r25, 0x0107
 998:	e8 0f       	add	r30, r24
 99a:	f9 1f       	adc	r31, r25
 99c:	e4 91       	lpm	r30, Z
 99e:	ec 93       	st	X, r30
 9a0:	2f 5f       	subi	r18, 0xFF	; 255
 9a2:	3f 4f       	sbci	r19, 0xFF	; 255
 9a4:	90 91 08 01 	lds	r25, 0x0108
 9a8:	49 2f       	mov	r20, r25
 9aa:	50 e0       	ldi	r21, 0x00	; 0
 9ac:	24 17       	cp	r18, r20
 9ae:	35 07       	cpc	r19, r21
 9b0:	34 f3       	brlt	.-52     	; 0x97e <OLED_print+0x2a>
 9b2:	80 91 93 01 	lds	r24, 0x0193
 9b6:	48 0f       	add	r20, r24
 9b8:	51 1d       	adc	r21, r1
 9ba:	40 38       	cpi	r20, 0x80	; 128
 9bc:	51 05       	cpc	r21, r1
 9be:	1c f0       	brlt	.+6      	; 0x9c6 <OLED_print+0x72>
 9c0:	10 92 93 01 	sts	0x0193, r1
 9c4:	08 95       	ret
 9c6:	98 0f       	add	r25, r24
 9c8:	90 93 93 01 	sts	0x0193, r25
 9cc:	08 95       	ret

000009ce <OLED_print_string>:
 9ce:	ef 92       	push	r14
 9d0:	ff 92       	push	r15
 9d2:	0f 93       	push	r16
 9d4:	1f 93       	push	r17
 9d6:	cf 93       	push	r28
 9d8:	df 93       	push	r29
 9da:	8c 01       	movw	r16, r24
 9dc:	7c 01       	movw	r14, r24
 9de:	c0 e0       	ldi	r28, 0x00	; 0
 9e0:	d0 e0       	ldi	r29, 0x00	; 0
 9e2:	06 c0       	rjmp	.+12     	; 0x9f0 <OLED_print_string+0x22>
 9e4:	f7 01       	movw	r30, r14
 9e6:	81 91       	ld	r24, Z+
 9e8:	7f 01       	movw	r14, r30
 9ea:	0e 94 aa 04 	call	0x954	; 0x954 <OLED_print>
 9ee:	21 96       	adiw	r28, 0x01	; 1
 9f0:	f8 01       	movw	r30, r16
 9f2:	01 90       	ld	r0, Z+
 9f4:	00 20       	and	r0, r0
 9f6:	e9 f7       	brne	.-6      	; 0x9f2 <OLED_print_string+0x24>
 9f8:	31 97       	sbiw	r30, 0x01	; 1
 9fa:	e0 1b       	sub	r30, r16
 9fc:	f1 0b       	sbc	r31, r17
 9fe:	ce 17       	cp	r28, r30
 a00:	df 07       	cpc	r29, r31
 a02:	80 f3       	brcs	.-32     	; 0x9e4 <OLED_print_string+0x16>
 a04:	df 91       	pop	r29
 a06:	cf 91       	pop	r28
 a08:	1f 91       	pop	r17
 a0a:	0f 91       	pop	r16
 a0c:	ff 90       	pop	r15
 a0e:	ef 90       	pop	r14
 a10:	08 95       	ret

00000a12 <SPI_init>:
#include "SPI_driver.h"

void SPI_init(void){
	/* Set MOSI, SCK and SS output, all others input */
	DDRB = (1<<PB5)|(1<<PB7)|(1<<PB4);
 a12:	80 eb       	ldi	r24, 0xB0	; 176
 a14:	87 bb       	out	0x17, r24	; 23
	/* Enable SPI, Master, set clock rate fck/16 */
	SPCR = (1<<SPE)|(1<<MSTR)|(1<<SPR0);
 a16:	81 e5       	ldi	r24, 0x51	; 81
 a18:	8d b9       	out	0x0d, r24	; 13
 a1a:	08 95       	ret

00000a1c <SPI_transmit>:
}

void SPI_transmit(char cData){
	/* Start transmission */
	SPDR = cData;
 a1c:	8f b9       	out	0x0f, r24	; 15
	/* Wait for transmission complete */
	while(!(SPSR & (1<<SPIF)));
 a1e:	77 9b       	sbis	0x0e, 7	; 14
 a20:	fe cf       	rjmp	.-4      	; 0xa1e <SPI_transmit+0x2>
}
 a22:	08 95       	ret

00000a24 <SPI_enable>:
	SPI_transmit(0x00);
	return SPDR;
}

void SPI_enable(){
		PORTB &= ~(1<<PINB4);
 a24:	c4 98       	cbi	0x18, 4	; 24
 a26:	08 95       	ret

00000a28 <SPI_disable>:
}

void SPI_disable(){
	PORTB |= (1<<PINB4);
 a28:	c4 9a       	sbi	0x18, 4	; 24
 a2a:	08 95       	ret

00000a2c <main>:
#include "oled_driver.h"



int main(void)
{	
 a2c:	cf 93       	push	r28
 a2e:	df 93       	push	r29
 a30:	cd b7       	in	r28, 0x3d	; 61
 a32:	de b7       	in	r29, 0x3e	; 62
 a34:	2b 97       	sbiw	r28, 0x0b	; 11
 a36:	0f b6       	in	r0, 0x3f	; 63
 a38:	f8 94       	cli
 a3a:	de bf       	out	0x3e, r29	; 62
 a3c:	0f be       	out	0x3f, r0	; 63
 a3e:	cd bf       	out	0x3d, r28	; 61
	int ubrr = (F_CPU/16/9600)-1;
	UART_Init(ubrr);
 a40:	8f e1       	ldi	r24, 0x1F	; 31
 a42:	90 e0       	ldi	r25, 0x00	; 0
 a44:	0e 94 50 05 	call	0xaa0	; 0xaa0 <UART_Init>
	
	can_init(MODE_NORMAL);
 a48:	80 e0       	ldi	r24, 0x00	; 0
 a4a:	0e 94 29 01 	call	0x252	; 0x252 <can_init>
	JOY_init();
 a4e:	0e 94 d4 03 	call	0x7a8	; 0x7a8 <JOY_init>
	OLED_init();
 a52:	0e 94 54 04 	call	0x8a8	; 0x8a8 <OLED_init>
	menuitem* current_menu = menu_init();
 a56:	0e 94 54 02 	call	0x4a8	; 0x4a8 <menu_init>
 a5a:	8c 01       	movw	r16, r24
	uint8_t prev_dir = NEUTRAL;
 a5c:	84 e0       	ldi	r24, 0x04	; 4
 a5e:	89 83       	std	Y+1, r24	; 0x01
				 //0,		//Joybutton
				 //0,0,	//Left/Right slider
				 //},
	//};
	//
	can_message_t setup = (can_message_t){
 a60:	fe 01       	movw	r30, r28
 a62:	32 96       	adiw	r30, 0x02	; 2
 a64:	9a e0       	ldi	r25, 0x0A	; 10
 a66:	df 01       	movw	r26, r30
 a68:	1d 92       	st	X+, r1
 a6a:	9a 95       	dec	r25
 a6c:	e9 f7       	brne	.-6      	; 0xa68 <main+0x3c>
 a6e:	92 e0       	ldi	r25, 0x02	; 2
 a70:	9a 83       	std	Y+2, r25	; 0x02
 a72:	8b 83       	std	Y+3, r24	; 0x03
		//commands.data[4] = JOY_button(2);
		//commands.data[5] = ADC_read(2);
		//commands.data[6] = ADC_read(3);
		//can_transmit(commands);

		menu_print(current_menu);
 a74:	c8 01       	movw	r24, r16
 a76:	0e 94 21 03 	call	0x642	; 0x642 <menu_print>
		//printf("HEI\n");
		current_menu = menu_move(current_menu, &prev_dir, &setup);
 a7a:	ae 01       	movw	r20, r28
 a7c:	4e 5f       	subi	r20, 0xFE	; 254
 a7e:	5f 4f       	sbci	r21, 0xFF	; 255
 a80:	be 01       	movw	r22, r28
 a82:	6f 5f       	subi	r22, 0xFF	; 255
 a84:	7f 4f       	sbci	r23, 0xFF	; 255
 a86:	c8 01       	movw	r24, r16
 a88:	0e 94 6b 03 	call	0x6d6	; 0x6d6 <menu_move>
 a8c:	8c 01       	movw	r16, r24
 a8e:	f2 cf       	rjmp	.-28     	; 0xa74 <main+0x48>

00000a90 <UART_Transmit>:
 a90:	5d 9b       	sbis	0x0b, 5	; 11
 a92:	fe cf       	rjmp	.-4      	; 0xa90 <UART_Transmit>
 a94:	8c b9       	out	0x0c, r24	; 12
 a96:	08 95       	ret

00000a98 <UART_Receive>:
 a98:	5f 9b       	sbis	0x0b, 7	; 11
 a9a:	fe cf       	rjmp	.-4      	; 0xa98 <UART_Receive>
 a9c:	8c b1       	in	r24, 0x0c	; 12
 a9e:	08 95       	ret

00000aa0 <UART_Init>:
 aa0:	90 bd       	out	0x20, r25	; 32
 aa2:	89 b9       	out	0x09, r24	; 9
 aa4:	88 e1       	ldi	r24, 0x18	; 24
 aa6:	8a b9       	out	0x0a, r24	; 10
 aa8:	6c e4       	ldi	r22, 0x4C	; 76
 aaa:	75 e0       	ldi	r23, 0x05	; 5
 aac:	88 e4       	ldi	r24, 0x48	; 72
 aae:	95 e0       	ldi	r25, 0x05	; 5
 ab0:	0e 94 aa 06 	call	0xd54	; 0xd54 <fdevopen>
 ab4:	08 95       	ret

00000ab6 <__divmodhi4>:
 ab6:	97 fb       	bst	r25, 7
 ab8:	07 2e       	mov	r0, r23
 aba:	16 f4       	brtc	.+4      	; 0xac0 <__divmodhi4+0xa>
 abc:	00 94       	com	r0
 abe:	07 d0       	rcall	.+14     	; 0xace <__divmodhi4_neg1>
 ac0:	77 fd       	sbrc	r23, 7
 ac2:	09 d0       	rcall	.+18     	; 0xad6 <__divmodhi4_neg2>
 ac4:	0e 94 6f 05 	call	0xade	; 0xade <__udivmodhi4>
 ac8:	07 fc       	sbrc	r0, 7
 aca:	05 d0       	rcall	.+10     	; 0xad6 <__divmodhi4_neg2>
 acc:	3e f4       	brtc	.+14     	; 0xadc <__divmodhi4_exit>

00000ace <__divmodhi4_neg1>:
 ace:	90 95       	com	r25
 ad0:	81 95       	neg	r24
 ad2:	9f 4f       	sbci	r25, 0xFF	; 255
 ad4:	08 95       	ret

00000ad6 <__divmodhi4_neg2>:
 ad6:	70 95       	com	r23
 ad8:	61 95       	neg	r22
 ada:	7f 4f       	sbci	r23, 0xFF	; 255

00000adc <__divmodhi4_exit>:
 adc:	08 95       	ret

00000ade <__udivmodhi4>:
 ade:	aa 1b       	sub	r26, r26
 ae0:	bb 1b       	sub	r27, r27
 ae2:	51 e1       	ldi	r21, 0x11	; 17
 ae4:	07 c0       	rjmp	.+14     	; 0xaf4 <__udivmodhi4_ep>

00000ae6 <__udivmodhi4_loop>:
 ae6:	aa 1f       	adc	r26, r26
 ae8:	bb 1f       	adc	r27, r27
 aea:	a6 17       	cp	r26, r22
 aec:	b7 07       	cpc	r27, r23
 aee:	10 f0       	brcs	.+4      	; 0xaf4 <__udivmodhi4_ep>
 af0:	a6 1b       	sub	r26, r22
 af2:	b7 0b       	sbc	r27, r23

00000af4 <__udivmodhi4_ep>:
 af4:	88 1f       	adc	r24, r24
 af6:	99 1f       	adc	r25, r25
 af8:	5a 95       	dec	r21
 afa:	a9 f7       	brne	.-22     	; 0xae6 <__udivmodhi4_loop>
 afc:	80 95       	com	r24
 afe:	90 95       	com	r25
 b00:	bc 01       	movw	r22, r24
 b02:	cd 01       	movw	r24, r26
 b04:	08 95       	ret

00000b06 <malloc>:
 b06:	cf 93       	push	r28
 b08:	df 93       	push	r29
 b0a:	82 30       	cpi	r24, 0x02	; 2
 b0c:	91 05       	cpc	r25, r1
 b0e:	10 f4       	brcc	.+4      	; 0xb14 <malloc+0xe>
 b10:	82 e0       	ldi	r24, 0x02	; 2
 b12:	90 e0       	ldi	r25, 0x00	; 0
 b14:	e0 91 96 01 	lds	r30, 0x0196
 b18:	f0 91 97 01 	lds	r31, 0x0197
 b1c:	20 e0       	ldi	r18, 0x00	; 0
 b1e:	30 e0       	ldi	r19, 0x00	; 0
 b20:	a0 e0       	ldi	r26, 0x00	; 0
 b22:	b0 e0       	ldi	r27, 0x00	; 0
 b24:	30 97       	sbiw	r30, 0x00	; 0
 b26:	39 f1       	breq	.+78     	; 0xb76 <malloc+0x70>
 b28:	40 81       	ld	r20, Z
 b2a:	51 81       	ldd	r21, Z+1	; 0x01
 b2c:	48 17       	cp	r20, r24
 b2e:	59 07       	cpc	r21, r25
 b30:	b8 f0       	brcs	.+46     	; 0xb60 <malloc+0x5a>
 b32:	48 17       	cp	r20, r24
 b34:	59 07       	cpc	r21, r25
 b36:	71 f4       	brne	.+28     	; 0xb54 <malloc+0x4e>
 b38:	82 81       	ldd	r24, Z+2	; 0x02
 b3a:	93 81       	ldd	r25, Z+3	; 0x03
 b3c:	10 97       	sbiw	r26, 0x00	; 0
 b3e:	29 f0       	breq	.+10     	; 0xb4a <malloc+0x44>
 b40:	13 96       	adiw	r26, 0x03	; 3
 b42:	9c 93       	st	X, r25
 b44:	8e 93       	st	-X, r24
 b46:	12 97       	sbiw	r26, 0x02	; 2
 b48:	2c c0       	rjmp	.+88     	; 0xba2 <malloc+0x9c>
 b4a:	90 93 97 01 	sts	0x0197, r25
 b4e:	80 93 96 01 	sts	0x0196, r24
 b52:	27 c0       	rjmp	.+78     	; 0xba2 <malloc+0x9c>
 b54:	21 15       	cp	r18, r1
 b56:	31 05       	cpc	r19, r1
 b58:	31 f0       	breq	.+12     	; 0xb66 <malloc+0x60>
 b5a:	42 17       	cp	r20, r18
 b5c:	53 07       	cpc	r21, r19
 b5e:	18 f0       	brcs	.+6      	; 0xb66 <malloc+0x60>
 b60:	a9 01       	movw	r20, r18
 b62:	db 01       	movw	r26, r22
 b64:	01 c0       	rjmp	.+2      	; 0xb68 <malloc+0x62>
 b66:	ef 01       	movw	r28, r30
 b68:	9a 01       	movw	r18, r20
 b6a:	bd 01       	movw	r22, r26
 b6c:	df 01       	movw	r26, r30
 b6e:	02 80       	ldd	r0, Z+2	; 0x02
 b70:	f3 81       	ldd	r31, Z+3	; 0x03
 b72:	e0 2d       	mov	r30, r0
 b74:	d7 cf       	rjmp	.-82     	; 0xb24 <malloc+0x1e>
 b76:	21 15       	cp	r18, r1
 b78:	31 05       	cpc	r19, r1
 b7a:	f9 f0       	breq	.+62     	; 0xbba <malloc+0xb4>
 b7c:	28 1b       	sub	r18, r24
 b7e:	39 0b       	sbc	r19, r25
 b80:	24 30       	cpi	r18, 0x04	; 4
 b82:	31 05       	cpc	r19, r1
 b84:	80 f4       	brcc	.+32     	; 0xba6 <malloc+0xa0>
 b86:	8a 81       	ldd	r24, Y+2	; 0x02
 b88:	9b 81       	ldd	r25, Y+3	; 0x03
 b8a:	61 15       	cp	r22, r1
 b8c:	71 05       	cpc	r23, r1
 b8e:	21 f0       	breq	.+8      	; 0xb98 <malloc+0x92>
 b90:	fb 01       	movw	r30, r22
 b92:	93 83       	std	Z+3, r25	; 0x03
 b94:	82 83       	std	Z+2, r24	; 0x02
 b96:	04 c0       	rjmp	.+8      	; 0xba0 <malloc+0x9a>
 b98:	90 93 97 01 	sts	0x0197, r25
 b9c:	80 93 96 01 	sts	0x0196, r24
 ba0:	fe 01       	movw	r30, r28
 ba2:	32 96       	adiw	r30, 0x02	; 2
 ba4:	44 c0       	rjmp	.+136    	; 0xc2e <malloc+0x128>
 ba6:	fe 01       	movw	r30, r28
 ba8:	e2 0f       	add	r30, r18
 baa:	f3 1f       	adc	r31, r19
 bac:	81 93       	st	Z+, r24
 bae:	91 93       	st	Z+, r25
 bb0:	22 50       	subi	r18, 0x02	; 2
 bb2:	31 09       	sbc	r19, r1
 bb4:	39 83       	std	Y+1, r19	; 0x01
 bb6:	28 83       	st	Y, r18
 bb8:	3a c0       	rjmp	.+116    	; 0xc2e <malloc+0x128>
 bba:	20 91 94 01 	lds	r18, 0x0194
 bbe:	30 91 95 01 	lds	r19, 0x0195
 bc2:	23 2b       	or	r18, r19
 bc4:	41 f4       	brne	.+16     	; 0xbd6 <malloc+0xd0>
 bc6:	20 91 02 01 	lds	r18, 0x0102
 bca:	30 91 03 01 	lds	r19, 0x0103
 bce:	30 93 95 01 	sts	0x0195, r19
 bd2:	20 93 94 01 	sts	0x0194, r18
 bd6:	20 91 00 01 	lds	r18, 0x0100
 bda:	30 91 01 01 	lds	r19, 0x0101
 bde:	21 15       	cp	r18, r1
 be0:	31 05       	cpc	r19, r1
 be2:	41 f4       	brne	.+16     	; 0xbf4 <malloc+0xee>
 be4:	2d b7       	in	r18, 0x3d	; 61
 be6:	3e b7       	in	r19, 0x3e	; 62
 be8:	40 91 04 01 	lds	r20, 0x0104
 bec:	50 91 05 01 	lds	r21, 0x0105
 bf0:	24 1b       	sub	r18, r20
 bf2:	35 0b       	sbc	r19, r21
 bf4:	e0 91 94 01 	lds	r30, 0x0194
 bf8:	f0 91 95 01 	lds	r31, 0x0195
 bfc:	e2 17       	cp	r30, r18
 bfe:	f3 07       	cpc	r31, r19
 c00:	a0 f4       	brcc	.+40     	; 0xc2a <malloc+0x124>
 c02:	2e 1b       	sub	r18, r30
 c04:	3f 0b       	sbc	r19, r31
 c06:	28 17       	cp	r18, r24
 c08:	39 07       	cpc	r19, r25
 c0a:	78 f0       	brcs	.+30     	; 0xc2a <malloc+0x124>
 c0c:	ac 01       	movw	r20, r24
 c0e:	4e 5f       	subi	r20, 0xFE	; 254
 c10:	5f 4f       	sbci	r21, 0xFF	; 255
 c12:	24 17       	cp	r18, r20
 c14:	35 07       	cpc	r19, r21
 c16:	48 f0       	brcs	.+18     	; 0xc2a <malloc+0x124>
 c18:	4e 0f       	add	r20, r30
 c1a:	5f 1f       	adc	r21, r31
 c1c:	50 93 95 01 	sts	0x0195, r21
 c20:	40 93 94 01 	sts	0x0194, r20
 c24:	81 93       	st	Z+, r24
 c26:	91 93       	st	Z+, r25
 c28:	02 c0       	rjmp	.+4      	; 0xc2e <malloc+0x128>
 c2a:	e0 e0       	ldi	r30, 0x00	; 0
 c2c:	f0 e0       	ldi	r31, 0x00	; 0
 c2e:	cf 01       	movw	r24, r30
 c30:	df 91       	pop	r29
 c32:	cf 91       	pop	r28
 c34:	08 95       	ret

00000c36 <free>:
 c36:	cf 93       	push	r28
 c38:	df 93       	push	r29
 c3a:	00 97       	sbiw	r24, 0x00	; 0
 c3c:	09 f4       	brne	.+2      	; 0xc40 <free+0xa>
 c3e:	87 c0       	rjmp	.+270    	; 0xd4e <free+0x118>
 c40:	fc 01       	movw	r30, r24
 c42:	32 97       	sbiw	r30, 0x02	; 2
 c44:	13 82       	std	Z+3, r1	; 0x03
 c46:	12 82       	std	Z+2, r1	; 0x02
 c48:	c0 91 96 01 	lds	r28, 0x0196
 c4c:	d0 91 97 01 	lds	r29, 0x0197
 c50:	20 97       	sbiw	r28, 0x00	; 0
 c52:	81 f4       	brne	.+32     	; 0xc74 <free+0x3e>
 c54:	20 81       	ld	r18, Z
 c56:	31 81       	ldd	r19, Z+1	; 0x01
 c58:	28 0f       	add	r18, r24
 c5a:	39 1f       	adc	r19, r25
 c5c:	80 91 94 01 	lds	r24, 0x0194
 c60:	90 91 95 01 	lds	r25, 0x0195
 c64:	82 17       	cp	r24, r18
 c66:	93 07       	cpc	r25, r19
 c68:	79 f5       	brne	.+94     	; 0xcc8 <free+0x92>
 c6a:	f0 93 95 01 	sts	0x0195, r31
 c6e:	e0 93 94 01 	sts	0x0194, r30
 c72:	6d c0       	rjmp	.+218    	; 0xd4e <free+0x118>
 c74:	de 01       	movw	r26, r28
 c76:	20 e0       	ldi	r18, 0x00	; 0
 c78:	30 e0       	ldi	r19, 0x00	; 0
 c7a:	ae 17       	cp	r26, r30
 c7c:	bf 07       	cpc	r27, r31
 c7e:	50 f4       	brcc	.+20     	; 0xc94 <free+0x5e>
 c80:	12 96       	adiw	r26, 0x02	; 2
 c82:	4d 91       	ld	r20, X+
 c84:	5c 91       	ld	r21, X
 c86:	13 97       	sbiw	r26, 0x03	; 3
 c88:	9d 01       	movw	r18, r26
 c8a:	41 15       	cp	r20, r1
 c8c:	51 05       	cpc	r21, r1
 c8e:	09 f1       	breq	.+66     	; 0xcd2 <free+0x9c>
 c90:	da 01       	movw	r26, r20
 c92:	f3 cf       	rjmp	.-26     	; 0xc7a <free+0x44>
 c94:	b3 83       	std	Z+3, r27	; 0x03
 c96:	a2 83       	std	Z+2, r26	; 0x02
 c98:	40 81       	ld	r20, Z
 c9a:	51 81       	ldd	r21, Z+1	; 0x01
 c9c:	84 0f       	add	r24, r20
 c9e:	95 1f       	adc	r25, r21
 ca0:	8a 17       	cp	r24, r26
 ca2:	9b 07       	cpc	r25, r27
 ca4:	71 f4       	brne	.+28     	; 0xcc2 <free+0x8c>
 ca6:	8d 91       	ld	r24, X+
 ca8:	9c 91       	ld	r25, X
 caa:	11 97       	sbiw	r26, 0x01	; 1
 cac:	84 0f       	add	r24, r20
 cae:	95 1f       	adc	r25, r21
 cb0:	02 96       	adiw	r24, 0x02	; 2
 cb2:	91 83       	std	Z+1, r25	; 0x01
 cb4:	80 83       	st	Z, r24
 cb6:	12 96       	adiw	r26, 0x02	; 2
 cb8:	8d 91       	ld	r24, X+
 cba:	9c 91       	ld	r25, X
 cbc:	13 97       	sbiw	r26, 0x03	; 3
 cbe:	93 83       	std	Z+3, r25	; 0x03
 cc0:	82 83       	std	Z+2, r24	; 0x02
 cc2:	21 15       	cp	r18, r1
 cc4:	31 05       	cpc	r19, r1
 cc6:	29 f4       	brne	.+10     	; 0xcd2 <free+0x9c>
 cc8:	f0 93 97 01 	sts	0x0197, r31
 ccc:	e0 93 96 01 	sts	0x0196, r30
 cd0:	3e c0       	rjmp	.+124    	; 0xd4e <free+0x118>
 cd2:	d9 01       	movw	r26, r18
 cd4:	13 96       	adiw	r26, 0x03	; 3
 cd6:	fc 93       	st	X, r31
 cd8:	ee 93       	st	-X, r30
 cda:	12 97       	sbiw	r26, 0x02	; 2
 cdc:	4d 91       	ld	r20, X+
 cde:	5d 91       	ld	r21, X+
 ce0:	a4 0f       	add	r26, r20
 ce2:	b5 1f       	adc	r27, r21
 ce4:	ea 17       	cp	r30, r26
 ce6:	fb 07       	cpc	r31, r27
 ce8:	79 f4       	brne	.+30     	; 0xd08 <free+0xd2>
 cea:	80 81       	ld	r24, Z
 cec:	91 81       	ldd	r25, Z+1	; 0x01
 cee:	84 0f       	add	r24, r20
 cf0:	95 1f       	adc	r25, r21
 cf2:	02 96       	adiw	r24, 0x02	; 2
 cf4:	d9 01       	movw	r26, r18
 cf6:	11 96       	adiw	r26, 0x01	; 1
 cf8:	9c 93       	st	X, r25
 cfa:	8e 93       	st	-X, r24
 cfc:	82 81       	ldd	r24, Z+2	; 0x02
 cfe:	93 81       	ldd	r25, Z+3	; 0x03
 d00:	13 96       	adiw	r26, 0x03	; 3
 d02:	9c 93       	st	X, r25
 d04:	8e 93       	st	-X, r24
 d06:	12 97       	sbiw	r26, 0x02	; 2
 d08:	e0 e0       	ldi	r30, 0x00	; 0
 d0a:	f0 e0       	ldi	r31, 0x00	; 0
 d0c:	8a 81       	ldd	r24, Y+2	; 0x02
 d0e:	9b 81       	ldd	r25, Y+3	; 0x03
 d10:	00 97       	sbiw	r24, 0x00	; 0
 d12:	19 f0       	breq	.+6      	; 0xd1a <free+0xe4>
 d14:	fe 01       	movw	r30, r28
 d16:	ec 01       	movw	r28, r24
 d18:	f9 cf       	rjmp	.-14     	; 0xd0c <free+0xd6>
 d1a:	ce 01       	movw	r24, r28
 d1c:	02 96       	adiw	r24, 0x02	; 2
 d1e:	28 81       	ld	r18, Y
 d20:	39 81       	ldd	r19, Y+1	; 0x01
 d22:	82 0f       	add	r24, r18
 d24:	93 1f       	adc	r25, r19
 d26:	20 91 94 01 	lds	r18, 0x0194
 d2a:	30 91 95 01 	lds	r19, 0x0195
 d2e:	28 17       	cp	r18, r24
 d30:	39 07       	cpc	r19, r25
 d32:	69 f4       	brne	.+26     	; 0xd4e <free+0x118>
 d34:	30 97       	sbiw	r30, 0x00	; 0
 d36:	29 f4       	brne	.+10     	; 0xd42 <free+0x10c>
 d38:	10 92 97 01 	sts	0x0197, r1
 d3c:	10 92 96 01 	sts	0x0196, r1
 d40:	02 c0       	rjmp	.+4      	; 0xd46 <free+0x110>
 d42:	13 82       	std	Z+3, r1	; 0x03
 d44:	12 82       	std	Z+2, r1	; 0x02
 d46:	d0 93 95 01 	sts	0x0195, r29
 d4a:	c0 93 94 01 	sts	0x0194, r28
 d4e:	df 91       	pop	r29
 d50:	cf 91       	pop	r28
 d52:	08 95       	ret

00000d54 <fdevopen>:
 d54:	0f 93       	push	r16
 d56:	1f 93       	push	r17
 d58:	cf 93       	push	r28
 d5a:	df 93       	push	r29
 d5c:	ec 01       	movw	r28, r24
 d5e:	8b 01       	movw	r16, r22
 d60:	00 97       	sbiw	r24, 0x00	; 0
 d62:	31 f4       	brne	.+12     	; 0xd70 <fdevopen+0x1c>
 d64:	61 15       	cp	r22, r1
 d66:	71 05       	cpc	r23, r1
 d68:	19 f4       	brne	.+6      	; 0xd70 <fdevopen+0x1c>
 d6a:	80 e0       	ldi	r24, 0x00	; 0
 d6c:	90 e0       	ldi	r25, 0x00	; 0
 d6e:	38 c0       	rjmp	.+112    	; 0xde0 <fdevopen+0x8c>
 d70:	6e e0       	ldi	r22, 0x0E	; 14
 d72:	70 e0       	ldi	r23, 0x00	; 0
 d74:	81 e0       	ldi	r24, 0x01	; 1
 d76:	90 e0       	ldi	r25, 0x00	; 0
 d78:	0e 94 f5 06 	call	0xdea	; 0xdea <calloc>
 d7c:	fc 01       	movw	r30, r24
 d7e:	00 97       	sbiw	r24, 0x00	; 0
 d80:	a1 f3       	breq	.-24     	; 0xd6a <fdevopen+0x16>
 d82:	80 e8       	ldi	r24, 0x80	; 128
 d84:	83 83       	std	Z+3, r24	; 0x03
 d86:	01 15       	cp	r16, r1
 d88:	11 05       	cpc	r17, r1
 d8a:	71 f0       	breq	.+28     	; 0xda8 <fdevopen+0x54>
 d8c:	13 87       	std	Z+11, r17	; 0x0b
 d8e:	02 87       	std	Z+10, r16	; 0x0a
 d90:	81 e8       	ldi	r24, 0x81	; 129
 d92:	83 83       	std	Z+3, r24	; 0x03
 d94:	80 91 98 01 	lds	r24, 0x0198
 d98:	90 91 99 01 	lds	r25, 0x0199
 d9c:	89 2b       	or	r24, r25
 d9e:	21 f4       	brne	.+8      	; 0xda8 <fdevopen+0x54>
 da0:	f0 93 99 01 	sts	0x0199, r31
 da4:	e0 93 98 01 	sts	0x0198, r30
 da8:	20 97       	sbiw	r28, 0x00	; 0
 daa:	c9 f0       	breq	.+50     	; 0xdde <fdevopen+0x8a>
 dac:	d1 87       	std	Z+9, r29	; 0x09
 dae:	c0 87       	std	Z+8, r28	; 0x08
 db0:	83 81       	ldd	r24, Z+3	; 0x03
 db2:	82 60       	ori	r24, 0x02	; 2
 db4:	83 83       	std	Z+3, r24	; 0x03
 db6:	80 91 9a 01 	lds	r24, 0x019A
 dba:	90 91 9b 01 	lds	r25, 0x019B
 dbe:	89 2b       	or	r24, r25
 dc0:	71 f4       	brne	.+28     	; 0xdde <fdevopen+0x8a>
 dc2:	f0 93 9b 01 	sts	0x019B, r31
 dc6:	e0 93 9a 01 	sts	0x019A, r30
 dca:	80 91 9c 01 	lds	r24, 0x019C
 dce:	90 91 9d 01 	lds	r25, 0x019D
 dd2:	89 2b       	or	r24, r25
 dd4:	21 f4       	brne	.+8      	; 0xdde <fdevopen+0x8a>
 dd6:	f0 93 9d 01 	sts	0x019D, r31
 dda:	e0 93 9c 01 	sts	0x019C, r30
 dde:	cf 01       	movw	r24, r30
 de0:	df 91       	pop	r29
 de2:	cf 91       	pop	r28
 de4:	1f 91       	pop	r17
 de6:	0f 91       	pop	r16
 de8:	08 95       	ret

00000dea <calloc>:
 dea:	0f 93       	push	r16
 dec:	1f 93       	push	r17
 dee:	cf 93       	push	r28
 df0:	df 93       	push	r29
 df2:	86 9f       	mul	r24, r22
 df4:	80 01       	movw	r16, r0
 df6:	87 9f       	mul	r24, r23
 df8:	10 0d       	add	r17, r0
 dfa:	96 9f       	mul	r25, r22
 dfc:	10 0d       	add	r17, r0
 dfe:	11 24       	eor	r1, r1
 e00:	c8 01       	movw	r24, r16
 e02:	0e 94 83 05 	call	0xb06	; 0xb06 <malloc>
 e06:	ec 01       	movw	r28, r24
 e08:	00 97       	sbiw	r24, 0x00	; 0
 e0a:	29 f0       	breq	.+10     	; 0xe16 <calloc+0x2c>
 e0c:	a8 01       	movw	r20, r16
 e0e:	60 e0       	ldi	r22, 0x00	; 0
 e10:	70 e0       	ldi	r23, 0x00	; 0
 e12:	0e 94 11 07 	call	0xe22	; 0xe22 <memset>
 e16:	ce 01       	movw	r24, r28
 e18:	df 91       	pop	r29
 e1a:	cf 91       	pop	r28
 e1c:	1f 91       	pop	r17
 e1e:	0f 91       	pop	r16
 e20:	08 95       	ret

00000e22 <memset>:
 e22:	dc 01       	movw	r26, r24
 e24:	01 c0       	rjmp	.+2      	; 0xe28 <memset+0x6>
 e26:	6d 93       	st	X+, r22
 e28:	41 50       	subi	r20, 0x01	; 1
 e2a:	50 40       	sbci	r21, 0x00	; 0
 e2c:	e0 f7       	brcc	.-8      	; 0xe26 <memset+0x4>
 e2e:	08 95       	ret

00000e30 <_exit>:
 e30:	f8 94       	cli

00000e32 <__stop_program>:
 e32:	ff cf       	rjmp	.-2      	; 0xe32 <__stop_program>
