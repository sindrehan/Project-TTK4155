
gruppe6.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         000000b8  00800100  0000167c  00001710  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         0000167c  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          0000000e  008001b8  008001b8  000017c8  2**0
                  ALLOC
  3 .comment      0000005c  00000000  00000000  000017c8  2**0
                  CONTENTS, READONLY
  4 .debug_aranges 00000278  00000000  00000000  00001824  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00002756  00000000  00000000  00001a9c  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000e34  00000000  00000000  000041f2  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00000c9c  00000000  00000000  00005026  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000610  00000000  00000000  00005cc4  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000715  00000000  00000000  000062d4  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00001336  00000000  00000000  000069e9  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000250  00000000  00000000  00007d1f  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 f6 00 	jmp	0x1ec	; 0x1ec <__ctors_end>
       4:	0c 94 13 01 	jmp	0x226	; 0x226 <__bad_interrupt>
       8:	0c 94 13 01 	jmp	0x226	; 0x226 <__bad_interrupt>
       c:	0c 94 13 01 	jmp	0x226	; 0x226 <__bad_interrupt>
      10:	0c 94 13 01 	jmp	0x226	; 0x226 <__bad_interrupt>
      14:	0c 94 13 01 	jmp	0x226	; 0x226 <__bad_interrupt>
      18:	0c 94 13 01 	jmp	0x226	; 0x226 <__bad_interrupt>
      1c:	0c 94 13 01 	jmp	0x226	; 0x226 <__bad_interrupt>
      20:	0c 94 13 01 	jmp	0x226	; 0x226 <__bad_interrupt>
      24:	0c 94 13 01 	jmp	0x226	; 0x226 <__bad_interrupt>
      28:	0c 94 13 01 	jmp	0x226	; 0x226 <__bad_interrupt>
      2c:	0c 94 13 01 	jmp	0x226	; 0x226 <__bad_interrupt>
      30:	0c 94 13 01 	jmp	0x226	; 0x226 <__bad_interrupt>
      34:	0c 94 13 01 	jmp	0x226	; 0x226 <__bad_interrupt>
      38:	0c 94 13 01 	jmp	0x226	; 0x226 <__bad_interrupt>
      3c:	0c 94 13 01 	jmp	0x226	; 0x226 <__bad_interrupt>
      40:	0c 94 13 01 	jmp	0x226	; 0x226 <__bad_interrupt>
      44:	0c 94 13 01 	jmp	0x226	; 0x226 <__bad_interrupt>
      48:	0c 94 13 01 	jmp	0x226	; 0x226 <__bad_interrupt>
      4c:	0c 94 13 01 	jmp	0x226	; 0x226 <__bad_interrupt>
      50:	0c 94 13 01 	jmp	0x226	; 0x226 <__bad_interrupt>
      54:	0c 94 13 01 	jmp	0x226	; 0x226 <__bad_interrupt>
      58:	0c 94 13 01 	jmp	0x226	; 0x226 <__bad_interrupt>
      5c:	0c 94 13 01 	jmp	0x226	; 0x226 <__bad_interrupt>
      60:	0c 94 13 01 	jmp	0x226	; 0x226 <__bad_interrupt>
      64:	0c 94 13 01 	jmp	0x226	; 0x226 <__bad_interrupt>
      68:	0c 94 13 01 	jmp	0x226	; 0x226 <__bad_interrupt>
      6c:	0c 94 13 01 	jmp	0x226	; 0x226 <__bad_interrupt>

00000070 <__trampolines_end>:
      70:	00 00       	nop
      72:	00 00       	nop
      74:	00 5c       	subi	r16, 0xC0	; 192
      76:	00 00       	nop
      78:	0c 00       	.word	0x000c	; ????
      7a:	0c 00       	.word	0x000c	; ????
      7c:	7c 28       	or	r7, r12
      7e:	7c 28       	or	r7, r12
      80:	58 dc       	rcall	.-1872   	; 0xfffff932 <__eeprom_end+0xff7ef932>
      82:	68 00       	.word	0x0068	; ????
      84:	24 10       	cpse	r2, r4
      86:	48 00       	.word	0x0048	; ????
      88:	28 54       	subi	r18, 0x48	; 72
      8a:	28 40       	sbci	r18, 0x08	; 8
      8c:	00 0c       	add	r0, r0
      8e:	00 00       	nop
      90:	00 78       	andi	r16, 0x80	; 128
      92:	84 00       	.word	0x0084	; ????
      94:	84 78       	andi	r24, 0x84	; 132
      96:	00 00       	nop
      98:	54 38       	cpi	r21, 0x84	; 132
      9a:	54 00       	.word	0x0054	; ????
      9c:	10 7c       	andi	r17, 0xC0	; 192
      9e:	10 00       	.word	0x0010	; ????
      a0:	80 40       	sbci	r24, 0x00	; 0
      a2:	00 00       	nop
      a4:	10 10       	cpse	r1, r0
      a6:	10 00       	.word	0x0010	; ????
      a8:	00 40       	sbci	r16, 0x00	; 0
      aa:	00 00       	nop
      ac:	60 10       	cpse	r6, r0
      ae:	0c 00       	.word	0x000c	; ????
      b0:	38 54       	subi	r19, 0x48	; 72
      b2:	38 00       	.word	0x0038	; ????
      b4:	48 7c       	andi	r20, 0xC8	; 200
      b6:	40 00       	.word	0x0040	; ????
      b8:	48 64       	ori	r20, 0x48	; 72
      ba:	58 00       	.word	0x0058	; ????
      bc:	44 54       	subi	r20, 0x44	; 68
      be:	2c 00       	.word	0x002c	; ????
      c0:	1c 10       	cpse	r1, r12
      c2:	7c 00       	.word	0x007c	; ????
      c4:	5c 54       	subi	r21, 0x4C	; 76
      c6:	24 00       	.word	0x0024	; ????
      c8:	38 54       	subi	r19, 0x48	; 72
      ca:	24 00       	.word	0x0024	; ????
      cc:	64 14       	cp	r6, r4
      ce:	0c 00       	.word	0x000c	; ????
      d0:	68 54       	subi	r22, 0x48	; 72
      d2:	2c 00       	.word	0x002c	; ????
      d4:	48 54       	subi	r20, 0x48	; 72
      d6:	38 00       	.word	0x0038	; ????
      d8:	00 48       	sbci	r16, 0x80	; 128
      da:	00 00       	nop
      dc:	80 48       	sbci	r24, 0x80	; 128
      de:	00 00       	nop
      e0:	10 28       	or	r1, r0
      e2:	44 00       	.word	0x0044	; ????
      e4:	28 28       	or	r2, r8
      e6:	28 00       	.word	0x0028	; ????
      e8:	44 28       	or	r4, r4
      ea:	10 00       	.word	0x0010	; ????
      ec:	04 54       	subi	r16, 0x44	; 68
      ee:	08 00       	.word	0x0008	; ????
      f0:	38 44       	sbci	r19, 0x48	; 72
      f2:	5c 00       	.word	0x005c	; ????
      f4:	78 14       	cp	r7, r8
      f6:	78 00       	.word	0x0078	; ????
      f8:	7c 54       	subi	r23, 0x4C	; 76
      fa:	28 00       	.word	0x0028	; ????
      fc:	38 44       	sbci	r19, 0x48	; 72
      fe:	28 00       	.word	0x0028	; ????
     100:	7c 44       	sbci	r23, 0x4C	; 76
     102:	38 00       	.word	0x0038	; ????
     104:	7c 54       	subi	r23, 0x4C	; 76
     106:	44 00       	.word	0x0044	; ????
     108:	7c 14       	cp	r7, r12
     10a:	04 00       	.word	0x0004	; ????
     10c:	38 44       	sbci	r19, 0x48	; 72
     10e:	74 00       	.word	0x0074	; ????
     110:	7c 10       	cpse	r7, r12
     112:	7c 00       	.word	0x007c	; ????
     114:	44 7c       	andi	r20, 0xC4	; 196
     116:	44 00       	.word	0x0044	; ????
     118:	20 40       	sbci	r18, 0x00	; 0
     11a:	3c 00       	.word	0x003c	; ????
     11c:	7c 10       	cpse	r7, r12
     11e:	6c 00       	.word	0x006c	; ????
     120:	7c 40       	sbci	r23, 0x0C	; 12
     122:	40 00       	.word	0x0040	; ????
     124:	7c 18       	sub	r7, r12
     126:	7c 00       	.word	0x007c	; ????
     128:	78 10       	cpse	r7, r8
     12a:	3c 00       	.word	0x003c	; ????
     12c:	38 44       	sbci	r19, 0x48	; 72
     12e:	38 00       	.word	0x0038	; ????
     130:	7c 14       	cp	r7, r12
     132:	08 00       	.word	0x0008	; ????
     134:	38 44       	sbci	r19, 0x48	; 72
     136:	b8 00       	.word	0x00b8	; ????
     138:	7c 14       	cp	r7, r12
     13a:	68 00       	.word	0x0068	; ????
     13c:	48 54       	subi	r20, 0x48	; 72
     13e:	24 00       	.word	0x0024	; ????
     140:	04 7c       	andi	r16, 0xC4	; 196
     142:	04 00       	.word	0x0004	; ????
     144:	7c 40       	sbci	r23, 0x0C	; 12
     146:	7c 00       	.word	0x007c	; ????
     148:	3c 60       	ori	r19, 0x0C	; 12
     14a:	3c 00       	.word	0x003c	; ????
     14c:	7c 30       	cpi	r23, 0x0C	; 12
     14e:	7c 00       	.word	0x007c	; ????
     150:	6c 10       	cpse	r6, r12
     152:	6c 00       	.word	0x006c	; ????
     154:	0c 70       	andi	r16, 0x0C	; 12
     156:	0c 00       	.word	0x000c	; ????
     158:	64 54       	subi	r22, 0x44	; 68
     15a:	4c 00       	.word	0x004c	; ????
     15c:	00 7c       	andi	r16, 0xC0	; 192
     15e:	44 00       	.word	0x0044	; ????
     160:	0c 10       	cpse	r0, r12
     162:	60 00       	.word	0x0060	; ????
     164:	44 7c       	andi	r20, 0xC4	; 196
     166:	00 00       	nop
     168:	08 04       	cpc	r0, r8
     16a:	08 00       	.word	0x0008	; ????
     16c:	80 80       	ld	r8, Z
     16e:	80 00       	.word	0x0080	; ????
     170:	00 04       	cpc	r0, r0
     172:	08 00       	.word	0x0008	; ????
     174:	30 48       	sbci	r19, 0x80	; 128
     176:	78 00       	.word	0x0078	; ????
     178:	7c 48       	sbci	r23, 0x8C	; 140
     17a:	30 00       	.word	0x0030	; ????
     17c:	30 48       	sbci	r19, 0x80	; 128
     17e:	48 00       	.word	0x0048	; ????
     180:	30 48       	sbci	r19, 0x80	; 128
     182:	7c 00       	.word	0x007c	; ????
     184:	30 68       	ori	r19, 0x80	; 128
     186:	50 00       	.word	0x0050	; ????
     188:	10 78       	andi	r17, 0x80	; 128
     18a:	14 00       	.word	0x0014	; ????
     18c:	90 a8       	ldd	r9, Z+48	; 0x30
     18e:	78 00       	.word	0x0078	; ????
     190:	7c 08       	sbc	r7, r12
     192:	70 00       	.word	0x0070	; ????
     194:	50 74       	andi	r21, 0x40	; 64
     196:	40 00       	.word	0x0040	; ????
     198:	80 80       	ld	r8, Z
     19a:	74 00       	.word	0x0074	; ????
     19c:	7c 10       	cpse	r7, r12
     19e:	68 00       	.word	0x0068	; ????
     1a0:	44 7c       	andi	r20, 0xC4	; 196
     1a2:	40 00       	.word	0x0040	; ????
     1a4:	78 10       	cpse	r7, r8
     1a6:	78 00       	.word	0x0078	; ????
     1a8:	78 08       	sbc	r7, r8
     1aa:	70 00       	.word	0x0070	; ????
     1ac:	30 48       	sbci	r19, 0x80	; 128
     1ae:	30 00       	.word	0x0030	; ????
     1b0:	f8 28       	or	r15, r8
     1b2:	10 00       	.word	0x0010	; ????
     1b4:	30 48       	sbci	r19, 0x80	; 128
     1b6:	f8 00       	.word	0x00f8	; ????
     1b8:	78 10       	cpse	r7, r8
     1ba:	08 00       	.word	0x0008	; ????
     1bc:	50 58       	subi	r21, 0x80	; 128
     1be:	28 00       	.word	0x0028	; ????
     1c0:	08 3c       	cpi	r16, 0xC8	; 200
     1c2:	48 00       	.word	0x0048	; ????
     1c4:	38 40       	sbci	r19, 0x08	; 8
     1c6:	78 00       	.word	0x0078	; ????
     1c8:	38 40       	sbci	r19, 0x08	; 8
     1ca:	38 00       	.word	0x0038	; ????
     1cc:	78 20       	and	r7, r8
     1ce:	78 00       	.word	0x0078	; ????
     1d0:	48 30       	cpi	r20, 0x08	; 8
     1d2:	48 00       	.word	0x0048	; ????
     1d4:	98 a0       	ldd	r9, Y+32	; 0x20
     1d6:	78 00       	.word	0x0078	; ????
     1d8:	48 68       	ori	r20, 0x88	; 136
     1da:	58 00       	.word	0x0058	; ????
     1dc:	10 78       	andi	r17, 0x80	; 128
     1de:	84 00       	.word	0x0084	; ????
     1e0:	00 7c       	andi	r16, 0xC0	; 192
     1e2:	00 00       	nop
     1e4:	84 78       	andi	r24, 0x84	; 132
     1e6:	10 00       	.word	0x0010	; ????
     1e8:	08 04       	cpc	r0, r8
     1ea:	08 04       	cpc	r0, r8

000001ec <__ctors_end>:
     1ec:	11 24       	eor	r1, r1
     1ee:	1f be       	out	0x3f, r1	; 63
     1f0:	cf ef       	ldi	r28, 0xFF	; 255
     1f2:	d4 e0       	ldi	r29, 0x04	; 4
     1f4:	de bf       	out	0x3e, r29	; 62
     1f6:	cd bf       	out	0x3d, r28	; 61

000001f8 <__do_copy_data>:
     1f8:	11 e0       	ldi	r17, 0x01	; 1
     1fa:	a0 e0       	ldi	r26, 0x00	; 0
     1fc:	b1 e0       	ldi	r27, 0x01	; 1
     1fe:	ec e7       	ldi	r30, 0x7C	; 124
     200:	f6 e1       	ldi	r31, 0x16	; 22
     202:	02 c0       	rjmp	.+4      	; 0x208 <__do_copy_data+0x10>
     204:	05 90       	lpm	r0, Z+
     206:	0d 92       	st	X+, r0
     208:	a8 3b       	cpi	r26, 0xB8	; 184
     20a:	b1 07       	cpc	r27, r17
     20c:	d9 f7       	brne	.-10     	; 0x204 <__do_copy_data+0xc>

0000020e <__do_clear_bss>:
     20e:	21 e0       	ldi	r18, 0x01	; 1
     210:	a8 eb       	ldi	r26, 0xB8	; 184
     212:	b1 e0       	ldi	r27, 0x01	; 1
     214:	01 c0       	rjmp	.+2      	; 0x218 <.do_clear_bss_start>

00000216 <.do_clear_bss_loop>:
     216:	1d 92       	st	X+, r1

00000218 <.do_clear_bss_start>:
     218:	a6 3c       	cpi	r26, 0xC6	; 198
     21a:	b2 07       	cpc	r27, r18
     21c:	e1 f7       	brne	.-8      	; 0x216 <.do_clear_bss_loop>
     21e:	0e 94 3e 06 	call	0xc7c	; 0xc7c <main>
     222:	0c 94 3c 0b 	jmp	0x1678	; 0x1678 <_exit>

00000226 <__bad_interrupt>:
     226:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000022a <ADC_init>:
     22a:	85 b7       	in	r24, 0x35	; 53
     22c:	80 68       	ori	r24, 0x80	; 128
     22e:	85 bf       	out	0x35, r24	; 53
     230:	80 b7       	in	r24, 0x30	; 48
     232:	80 62       	ori	r24, 0x20	; 32
     234:	80 bf       	out	0x30, r24	; 48
     236:	bb 98       	cbi	0x17, 3	; 23
     238:	08 95       	ret

0000023a <ADC_read>:
     23a:	8c 5f       	subi	r24, 0xFC	; 252
     23c:	80 93 00 14 	sts	0x1400, r24
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     240:	80 e1       	ldi	r24, 0x10	; 16
     242:	8a 95       	dec	r24
     244:	f1 f7       	brne	.-4      	; 0x242 <ADC_read+0x8>
     246:	00 c0       	rjmp	.+0      	; 0x248 <ADC_read+0xe>
     248:	b3 99       	sbic	0x16, 3	; 22
     24a:	fe cf       	rjmp	.-4      	; 0x248 <ADC_read+0xe>
     24c:	80 91 00 14 	lds	r24, 0x1400
     250:	08 95       	ret

00000252 <can_init>:
     252:	cf 93       	push	r28
     254:	c8 2f       	mov	r28, r24
     256:	0e 94 2c 06 	call	0xc58	; 0xc58 <SPI_init>
     25a:	0e 94 f8 01 	call	0x3f0	; 0x3f0 <MCP2515_reset>
     25e:	4c 2f       	mov	r20, r28
     260:	60 ee       	ldi	r22, 0xE0	; 224
     262:	8f e0       	ldi	r24, 0x0F	; 15
     264:	0e 94 de 01 	call	0x3bc	; 0x3bc <MCP2515_bit_modify>
     268:	40 e6       	ldi	r20, 0x60	; 96
     26a:	60 e6       	ldi	r22, 0x60	; 96
     26c:	80 e6       	ldi	r24, 0x60	; 96
     26e:	0e 94 de 01 	call	0x3bc	; 0x3bc <MCP2515_bit_modify>
     272:	40 e0       	ldi	r20, 0x00	; 0
     274:	64 e0       	ldi	r22, 0x04	; 4
     276:	80 e6       	ldi	r24, 0x60	; 96
     278:	0e 94 de 01 	call	0x3bc	; 0x3bc <MCP2515_bit_modify>
     27c:	40 e0       	ldi	r20, 0x00	; 0
     27e:	6f ef       	ldi	r22, 0xFF	; 255
     280:	8b e2       	ldi	r24, 0x2B	; 43
     282:	0e 94 de 01 	call	0x3bc	; 0x3bc <MCP2515_bit_modify>
     286:	cf 91       	pop	r28
     288:	08 95       	ret

0000028a <can_transmit>:
     28a:	cf 92       	push	r12
     28c:	df 92       	push	r13
     28e:	ef 92       	push	r14
     290:	ff 92       	push	r15
     292:	0f 93       	push	r16
     294:	1f 93       	push	r17
     296:	cf 93       	push	r28
     298:	df 93       	push	r29
     29a:	cd b7       	in	r28, 0x3d	; 61
     29c:	de b7       	in	r29, 0x3e	; 62
     29e:	2a 97       	sbiw	r28, 0x0a	; 10
     2a0:	0f b6       	in	r0, 0x3f	; 63
     2a2:	f8 94       	cli
     2a4:	de bf       	out	0x3e, r29	; 62
     2a6:	0f be       	out	0x3f, r0	; 63
     2a8:	cd bf       	out	0x3d, r28	; 61
     2aa:	09 83       	std	Y+1, r16	; 0x01
     2ac:	c1 2e       	mov	r12, r17
     2ae:	1a 83       	std	Y+2, r17	; 0x02
     2b0:	2b 83       	std	Y+3, r18	; 0x03
     2b2:	3c 83       	std	Y+4, r19	; 0x04
     2b4:	4d 83       	std	Y+5, r20	; 0x05
     2b6:	5e 83       	std	Y+6, r21	; 0x06
     2b8:	6f 83       	std	Y+7, r22	; 0x07
     2ba:	78 87       	std	Y+8, r23	; 0x08
     2bc:	89 87       	std	Y+9, r24	; 0x09
     2be:	9a 87       	std	Y+10, r25	; 0x0a
     2c0:	80 e3       	ldi	r24, 0x30	; 48
     2c2:	0e 94 9f 01 	call	0x33e	; 0x33e <MCP2515_read>
     2c6:	83 fd       	sbrc	r24, 3
     2c8:	fb cf       	rjmp	.-10     	; 0x2c0 <can_transmit+0x36>
     2ca:	61 e3       	ldi	r22, 0x31	; 49
     2cc:	80 2f       	mov	r24, r16
     2ce:	86 95       	lsr	r24
     2d0:	86 95       	lsr	r24
     2d2:	86 95       	lsr	r24
     2d4:	0e 94 b1 01 	call	0x362	; 0x362 <MCP2515_write>
     2d8:	62 e3       	ldi	r22, 0x32	; 50
     2da:	80 2f       	mov	r24, r16
     2dc:	82 95       	swap	r24
     2de:	88 0f       	add	r24, r24
     2e0:	80 7e       	andi	r24, 0xE0	; 224
     2e2:	0e 94 b1 01 	call	0x362	; 0x362 <MCP2515_write>
     2e6:	65 e3       	ldi	r22, 0x35	; 53
     2e8:	8c 2d       	mov	r24, r12
     2ea:	0e 94 b1 01 	call	0x362	; 0x362 <MCP2515_write>
     2ee:	d1 2c       	mov	r13, r1
     2f0:	1c 14       	cp	r1, r12
     2f2:	1d 04       	cpc	r1, r13
     2f4:	94 f4       	brge	.+36     	; 0x31a <can_transmit+0x90>
     2f6:	7e 01       	movw	r14, r28
     2f8:	83 e0       	ldi	r24, 0x03	; 3
     2fa:	e8 0e       	add	r14, r24
     2fc:	f1 1c       	adc	r15, r1
     2fe:	00 e0       	ldi	r16, 0x00	; 0
     300:	10 e0       	ldi	r17, 0x00	; 0
     302:	66 e3       	ldi	r22, 0x36	; 54
     304:	60 0f       	add	r22, r16
     306:	f7 01       	movw	r30, r14
     308:	81 91       	ld	r24, Z+
     30a:	7f 01       	movw	r14, r30
     30c:	0e 94 b1 01 	call	0x362	; 0x362 <MCP2515_write>
     310:	0f 5f       	subi	r16, 0xFF	; 255
     312:	1f 4f       	sbci	r17, 0xFF	; 255
     314:	0c 15       	cp	r16, r12
     316:	1d 05       	cpc	r17, r13
     318:	a4 f3       	brlt	.-24     	; 0x302 <can_transmit+0x78>
     31a:	80 e0       	ldi	r24, 0x00	; 0
     31c:	0e 94 c5 01 	call	0x38a	; 0x38a <MCP2515_rts>
     320:	2a 96       	adiw	r28, 0x0a	; 10
     322:	0f b6       	in	r0, 0x3f	; 63
     324:	f8 94       	cli
     326:	de bf       	out	0x3e, r29	; 62
     328:	0f be       	out	0x3f, r0	; 63
     32a:	cd bf       	out	0x3d, r28	; 61
     32c:	df 91       	pop	r29
     32e:	cf 91       	pop	r28
     330:	1f 91       	pop	r17
     332:	0f 91       	pop	r16
     334:	ff 90       	pop	r15
     336:	ef 90       	pop	r14
     338:	df 90       	pop	r13
     33a:	cf 90       	pop	r12
     33c:	08 95       	ret

0000033e <MCP2515_read>:
     33e:	cf 93       	push	r28
     340:	c8 2f       	mov	r28, r24
     342:	0e 94 3a 06 	call	0xc74	; 0xc74 <SPI_enable>
     346:	83 e0       	ldi	r24, 0x03	; 3
     348:	0e 94 31 06 	call	0xc62	; 0xc62 <SPI_transmit>
     34c:	8c 2f       	mov	r24, r28
     34e:	0e 94 31 06 	call	0xc62	; 0xc62 <SPI_transmit>
     352:	0e 94 35 06 	call	0xc6a	; 0xc6a <SPI_receive>
     356:	c8 2f       	mov	r28, r24
     358:	0e 94 3c 06 	call	0xc78	; 0xc78 <SPI_disable>
     35c:	8c 2f       	mov	r24, r28
     35e:	cf 91       	pop	r28
     360:	08 95       	ret

00000362 <MCP2515_write>:
     362:	cf 93       	push	r28
     364:	df 93       	push	r29
     366:	c8 2f       	mov	r28, r24
     368:	d6 2f       	mov	r29, r22
     36a:	0e 94 3a 06 	call	0xc74	; 0xc74 <SPI_enable>
     36e:	82 e0       	ldi	r24, 0x02	; 2
     370:	0e 94 31 06 	call	0xc62	; 0xc62 <SPI_transmit>
     374:	8d 2f       	mov	r24, r29
     376:	0e 94 31 06 	call	0xc62	; 0xc62 <SPI_transmit>
     37a:	8c 2f       	mov	r24, r28
     37c:	0e 94 31 06 	call	0xc62	; 0xc62 <SPI_transmit>
     380:	0e 94 3c 06 	call	0xc78	; 0xc78 <SPI_disable>
     384:	df 91       	pop	r29
     386:	cf 91       	pop	r28
     388:	08 95       	ret

0000038a <MCP2515_rts>:
     38a:	cf 93       	push	r28
     38c:	c8 2f       	mov	r28, r24
     38e:	0e 94 3a 06 	call	0xc74	; 0xc74 <SPI_enable>
     392:	c1 30       	cpi	r28, 0x01	; 1
     394:	41 f0       	breq	.+16     	; 0x3a6 <MCP2515_rts+0x1c>
     396:	18 f0       	brcs	.+6      	; 0x39e <MCP2515_rts+0x14>
     398:	c2 30       	cpi	r28, 0x02	; 2
     39a:	49 f0       	breq	.+18     	; 0x3ae <MCP2515_rts+0x24>
     39c:	0b c0       	rjmp	.+22     	; 0x3b4 <MCP2515_rts+0x2a>
     39e:	81 e8       	ldi	r24, 0x81	; 129
     3a0:	0e 94 31 06 	call	0xc62	; 0xc62 <SPI_transmit>
     3a4:	07 c0       	rjmp	.+14     	; 0x3b4 <MCP2515_rts+0x2a>
     3a6:	82 e8       	ldi	r24, 0x82	; 130
     3a8:	0e 94 31 06 	call	0xc62	; 0xc62 <SPI_transmit>
     3ac:	03 c0       	rjmp	.+6      	; 0x3b4 <MCP2515_rts+0x2a>
     3ae:	84 e8       	ldi	r24, 0x84	; 132
     3b0:	0e 94 31 06 	call	0xc62	; 0xc62 <SPI_transmit>
     3b4:	0e 94 3c 06 	call	0xc78	; 0xc78 <SPI_disable>
     3b8:	cf 91       	pop	r28
     3ba:	08 95       	ret

000003bc <MCP2515_bit_modify>:
     3bc:	1f 93       	push	r17
     3be:	cf 93       	push	r28
     3c0:	df 93       	push	r29
     3c2:	18 2f       	mov	r17, r24
     3c4:	d6 2f       	mov	r29, r22
     3c6:	c4 2f       	mov	r28, r20
     3c8:	0e 94 3a 06 	call	0xc74	; 0xc74 <SPI_enable>
     3cc:	85 e0       	ldi	r24, 0x05	; 5
     3ce:	0e 94 31 06 	call	0xc62	; 0xc62 <SPI_transmit>
     3d2:	81 2f       	mov	r24, r17
     3d4:	0e 94 31 06 	call	0xc62	; 0xc62 <SPI_transmit>
     3d8:	8d 2f       	mov	r24, r29
     3da:	0e 94 31 06 	call	0xc62	; 0xc62 <SPI_transmit>
     3de:	8c 2f       	mov	r24, r28
     3e0:	0e 94 31 06 	call	0xc62	; 0xc62 <SPI_transmit>
     3e4:	0e 94 3c 06 	call	0xc78	; 0xc78 <SPI_disable>
     3e8:	df 91       	pop	r29
     3ea:	cf 91       	pop	r28
     3ec:	1f 91       	pop	r17
     3ee:	08 95       	ret

000003f0 <MCP2515_reset>:
     3f0:	0e 94 3a 06 	call	0xc74	; 0xc74 <SPI_enable>
     3f4:	80 ec       	ldi	r24, 0xC0	; 192
     3f6:	0e 94 31 06 	call	0xc62	; 0xc62 <SPI_transmit>
     3fa:	0e 94 3c 06 	call	0xc78	; 0xc78 <SPI_disable>
     3fe:	08 95       	ret

00000400 <menu_control_select>:
	can_transmit(msg_setup);
	OLED_reset();
}

void menu_control_select(uint8_t choice, uint8_t *setup){
	setup[1] = choice;
     400:	fb 01       	movw	r30, r22
     402:	81 83       	std	Z+1, r24	; 0x01
     404:	08 95       	ret

00000406 <menu_joystick_select>:
}

void menu_joystick_select(uint8_t choice, uint8_t *setup){
	setup[2] = choice;
     406:	fb 01       	movw	r30, r22
     408:	82 83       	std	Z+2, r24	; 0x02
     40a:	08 95       	ret

0000040c <menu_player_select>:
	m->name = name;
	
	return m;
}

void menu_player_select(uint8_t choice, uint8_t *setup){
     40c:	0f 93       	push	r16
     40e:	1f 93       	push	r17
     410:	cf 93       	push	r28
     412:	df 93       	push	r29
     414:	cd b7       	in	r28, 0x3d	; 61
     416:	de b7       	in	r29, 0x3e	; 62
     418:	2a 97       	sbiw	r28, 0x0a	; 10
     41a:	0f b6       	in	r0, 0x3f	; 63
     41c:	f8 94       	cli
     41e:	de bf       	out	0x3e, r29	; 62
     420:	0f be       	out	0x3f, r0	; 63
     422:	cd bf       	out	0x3d, r28	; 61
     424:	fb 01       	movw	r30, r22
	setup[0] = choice+1;
     426:	21 e0       	ldi	r18, 0x01	; 1
     428:	28 0f       	add	r18, r24
     42a:	20 83       	st	Z, r18
	can_message_t msg_setup = (can_message_t){
     42c:	ae 01       	movw	r20, r28
     42e:	4f 5f       	subi	r20, 0xFF	; 255
     430:	5f 4f       	sbci	r21, 0xFF	; 255
     432:	8a e0       	ldi	r24, 0x0A	; 10
     434:	da 01       	movw	r26, r20
     436:	1d 92       	st	X+, r1
     438:	8a 95       	dec	r24
     43a:	e9 f7       	brne	.-6      	; 0x436 <menu_player_select+0x2a>
     43c:	31 81       	ldd	r19, Z+1	; 0x01
     43e:	42 81       	ldd	r20, Z+2	; 0x02
		.data = {	setup[0],  //Players
					setup[1],	//Control type
					setup[2],	//Controller
		},
	};
	can_transmit(msg_setup);
     440:	02 e0       	ldi	r16, 0x02	; 2
     442:	13 e0       	ldi	r17, 0x03	; 3
     444:	5e 81       	ldd	r21, Y+6	; 0x06
     446:	6f 81       	ldd	r22, Y+7	; 0x07
     448:	78 85       	ldd	r23, Y+8	; 0x08
     44a:	89 85       	ldd	r24, Y+9	; 0x09
     44c:	9a 85       	ldd	r25, Y+10	; 0x0a
     44e:	0e 94 45 01 	call	0x28a	; 0x28a <can_transmit>
	OLED_reset();
     452:	0e 94 59 05 	call	0xab2	; 0xab2 <OLED_reset>
}
     456:	2a 96       	adiw	r28, 0x0a	; 10
     458:	0f b6       	in	r0, 0x3f	; 63
     45a:	f8 94       	cli
     45c:	de bf       	out	0x3e, r29	; 62
     45e:	0f be       	out	0x3f, r0	; 63
     460:	cd bf       	out	0x3d, r28	; 61
     462:	df 91       	pop	r29
     464:	cf 91       	pop	r28
     466:	1f 91       	pop	r17
     468:	0f 91       	pop	r16
     46a:	08 95       	ret

0000046c <menu_arrow_index>:

#include "menu.h"

uint8_t menu_arrow_index(menuitem* m){
	for(uint8_t i = 0; i < m->submenus.number; i++){
     46c:	dc 01       	movw	r26, r24
     46e:	13 96       	adiw	r26, 0x03	; 3
     470:	2c 91       	ld	r18, X
     472:	13 97       	sbiw	r26, 0x03	; 3
     474:	22 23       	and	r18, r18
     476:	b9 f0       	breq	.+46     	; 0x4a6 <menu_arrow_index+0x3a>
		if(m->submenus.entries[i]->arrow_flag){
     478:	14 96       	adiw	r26, 0x04	; 4
     47a:	ed 91       	ld	r30, X+
     47c:	fc 91       	ld	r31, X
     47e:	15 97       	sbiw	r26, 0x05	; 5
     480:	a0 81       	ld	r26, Z
     482:	b1 81       	ldd	r27, Z+1	; 0x01
     484:	12 96       	adiw	r26, 0x02	; 2
     486:	8c 91       	ld	r24, X
     488:	81 11       	cpse	r24, r1
     48a:	0f c0       	rjmp	.+30     	; 0x4aa <menu_arrow_index+0x3e>
     48c:	32 96       	adiw	r30, 0x02	; 2
     48e:	06 c0       	rjmp	.+12     	; 0x49c <menu_arrow_index+0x30>
     490:	a1 91       	ld	r26, Z+
     492:	b1 91       	ld	r27, Z+
     494:	12 96       	adiw	r26, 0x02	; 2
     496:	9c 91       	ld	r25, X
     498:	91 11       	cpse	r25, r1
     49a:	08 c0       	rjmp	.+16     	; 0x4ac <menu_arrow_index+0x40>

#include "menu.h"

uint8_t menu_arrow_index(menuitem* m){
	for(uint8_t i = 0; i < m->submenus.number; i++){
     49c:	8f 5f       	subi	r24, 0xFF	; 255
     49e:	82 13       	cpse	r24, r18
     4a0:	f7 cf       	rjmp	.-18     	; 0x490 <menu_arrow_index+0x24>
		if(m->submenus.entries[i]->arrow_flag){
			return i;
		}
	}
	return 0;
     4a2:	80 e0       	ldi	r24, 0x00	; 0
     4a4:	08 95       	ret
     4a6:	80 e0       	ldi	r24, 0x00	; 0
     4a8:	08 95       	ret

#include "menu.h"

uint8_t menu_arrow_index(menuitem* m){
	for(uint8_t i = 0; i < m->submenus.number; i++){
     4aa:	80 e0       	ldi	r24, 0x00	; 0
		if(m->submenus.entries[i]->arrow_flag){
			return i;
		}
	}
	return 0;
}
     4ac:	08 95       	ret

000004ae <menu_right>:

menuitem* menu_right(menuitem* m, uint8_t *setup){
     4ae:	0f 93       	push	r16
     4b0:	1f 93       	push	r17
     4b2:	cf 93       	push	r28
     4b4:	df 93       	push	r29
     4b6:	ec 01       	movw	r28, r24
     4b8:	8b 01       	movw	r16, r22
	uint8_t arrow_index = menu_arrow_index(m);
     4ba:	0e 94 36 02 	call	0x46c	; 0x46c <menu_arrow_index>
	if(m->submenus.entries[arrow_index]->submenus.number != 0){
     4be:	e8 2f       	mov	r30, r24
     4c0:	f0 e0       	ldi	r31, 0x00	; 0
     4c2:	ee 0f       	add	r30, r30
     4c4:	ff 1f       	adc	r31, r31
     4c6:	2c 81       	ldd	r18, Y+4	; 0x04
     4c8:	3d 81       	ldd	r19, Y+5	; 0x05
     4ca:	e2 0f       	add	r30, r18
     4cc:	f3 1f       	adc	r31, r19
     4ce:	01 90       	ld	r0, Z+
     4d0:	f0 81       	ld	r31, Z
     4d2:	e0 2d       	mov	r30, r0
     4d4:	93 81       	ldd	r25, Z+3	; 0x03
     4d6:	91 11       	cpse	r25, r1
     4d8:	08 c0       	rjmp	.+16     	; 0x4ea <menu_right+0x3c>
		return m->submenus.entries[arrow_index];
	} else {
		m->submenus.entries[arrow_index]->fn(arrow_index, setup);
     4da:	00 84       	ldd	r0, Z+8	; 0x08
     4dc:	f1 85       	ldd	r31, Z+9	; 0x09
     4de:	e0 2d       	mov	r30, r0
     4e0:	b8 01       	movw	r22, r16
     4e2:	09 95       	icall
		return m->parent;
     4e4:	8e 81       	ldd	r24, Y+6	; 0x06
     4e6:	9f 81       	ldd	r25, Y+7	; 0x07
     4e8:	02 c0       	rjmp	.+4      	; 0x4ee <menu_right+0x40>
}

menuitem* menu_right(menuitem* m, uint8_t *setup){
	uint8_t arrow_index = menu_arrow_index(m);
	if(m->submenus.entries[arrow_index]->submenus.number != 0){
		return m->submenus.entries[arrow_index];
     4ea:	8e 2f       	mov	r24, r30
     4ec:	9f 2f       	mov	r25, r31
	} else {
		m->submenus.entries[arrow_index]->fn(arrow_index, setup);
		return m->parent;
	}
}
     4ee:	df 91       	pop	r29
     4f0:	cf 91       	pop	r28
     4f2:	1f 91       	pop	r17
     4f4:	0f 91       	pop	r16
     4f6:	08 95       	ret

000004f8 <menu_up>:
	} else {
		return m;
	}
}

void menu_up(menuitem* m){
     4f8:	cf 93       	push	r28
     4fa:	df 93       	push	r29
     4fc:	ec 01       	movw	r28, r24
	uint8_t arrow_index = menu_arrow_index(m);
     4fe:	0e 94 36 02 	call	0x46c	; 0x46c <menu_arrow_index>
	if(arrow_index > 0){
     502:	88 23       	and	r24, r24
     504:	b1 f0       	breq	.+44     	; 0x532 <__stack+0x33>
		m->submenus.entries[arrow_index]->arrow_flag = 0;
     506:	90 e0       	ldi	r25, 0x00	; 0
     508:	88 0f       	add	r24, r24
     50a:	99 1f       	adc	r25, r25
     50c:	ec 81       	ldd	r30, Y+4	; 0x04
     50e:	fd 81       	ldd	r31, Y+5	; 0x05
     510:	e8 0f       	add	r30, r24
     512:	f9 1f       	adc	r31, r25
     514:	01 90       	ld	r0, Z+
     516:	f0 81       	ld	r31, Z
     518:	e0 2d       	mov	r30, r0
     51a:	12 82       	std	Z+2, r1	; 0x02
		m->submenus.entries[arrow_index-1]->arrow_flag = 1;
     51c:	ec 81       	ldd	r30, Y+4	; 0x04
     51e:	fd 81       	ldd	r31, Y+5	; 0x05
     520:	8e 0f       	add	r24, r30
     522:	9f 1f       	adc	r25, r31
     524:	fc 01       	movw	r30, r24
     526:	32 97       	sbiw	r30, 0x02	; 2
     528:	01 90       	ld	r0, Z+
     52a:	f0 81       	ld	r31, Z
     52c:	e0 2d       	mov	r30, r0
     52e:	81 e0       	ldi	r24, 0x01	; 1
     530:	82 83       	std	Z+2, r24	; 0x02
	}
}
     532:	df 91       	pop	r29
     534:	cf 91       	pop	r28
     536:	08 95       	ret

00000538 <menu_down>:

void menu_down(menuitem* m){
     538:	cf 93       	push	r28
     53a:	df 93       	push	r29
     53c:	ec 01       	movw	r28, r24
	uint8_t arrow_index = menu_arrow_index(m);
     53e:	0e 94 36 02 	call	0x46c	; 0x46c <menu_arrow_index>
	if(arrow_index < m->submenus.number - 1){
     542:	48 2f       	mov	r20, r24
     544:	50 e0       	ldi	r21, 0x00	; 0
     546:	2b 81       	ldd	r18, Y+3	; 0x03
     548:	30 e0       	ldi	r19, 0x00	; 0
     54a:	21 50       	subi	r18, 0x01	; 1
     54c:	31 09       	sbc	r19, r1
     54e:	42 17       	cp	r20, r18
     550:	53 07       	cpc	r21, r19
     552:	ac f4       	brge	.+42     	; 0x57e <menu_down+0x46>
		m->submenus.entries[arrow_index]->arrow_flag = 0;
     554:	ca 01       	movw	r24, r20
     556:	88 0f       	add	r24, r24
     558:	99 1f       	adc	r25, r25
     55a:	ec 81       	ldd	r30, Y+4	; 0x04
     55c:	fd 81       	ldd	r31, Y+5	; 0x05
     55e:	e8 0f       	add	r30, r24
     560:	f9 1f       	adc	r31, r25
     562:	01 90       	ld	r0, Z+
     564:	f0 81       	ld	r31, Z
     566:	e0 2d       	mov	r30, r0
     568:	12 82       	std	Z+2, r1	; 0x02
		m->submenus.entries[arrow_index+1]->arrow_flag = 1;
     56a:	2c 81       	ldd	r18, Y+4	; 0x04
     56c:	3d 81       	ldd	r19, Y+5	; 0x05
     56e:	f9 01       	movw	r30, r18
     570:	e8 0f       	add	r30, r24
     572:	f9 1f       	adc	r31, r25
     574:	02 80       	ldd	r0, Z+2	; 0x02
     576:	f3 81       	ldd	r31, Z+3	; 0x03
     578:	e0 2d       	mov	r30, r0
     57a:	81 e0       	ldi	r24, 0x01	; 1
     57c:	82 83       	std	Z+2, r24	; 0x02
	}
}
     57e:	df 91       	pop	r29
     580:	cf 91       	pop	r28
     582:	08 95       	ret

00000584 <menu_new>:

menuitem* menu_new(char* name, uint8_t numSubmenus, void fn(uint8_t, uint8_t *)){
     584:	df 92       	push	r13
     586:	ef 92       	push	r14
     588:	ff 92       	push	r15
     58a:	0f 93       	push	r16
     58c:	1f 93       	push	r17
     58e:	cf 93       	push	r28
     590:	df 93       	push	r29
     592:	8c 01       	movw	r16, r24
     594:	d6 2e       	mov	r13, r22
     596:	7a 01       	movw	r14, r20
	menuitem* m = malloc(sizeof(menuitem));
     598:	8a e0       	ldi	r24, 0x0A	; 10
     59a:	90 e0       	ldi	r25, 0x00	; 0
     59c:	0e 94 d6 06 	call	0xdac	; 0xdac <malloc>
     5a0:	ec 01       	movw	r28, r24
	memset(m, 0, sizeof(menuitem));
     5a2:	8a e0       	ldi	r24, 0x0A	; 10
     5a4:	fe 01       	movw	r30, r28
     5a6:	11 92       	st	Z+, r1
     5a8:	8a 95       	dec	r24
     5aa:	e9 f7       	brne	.-6      	; 0x5a6 <menu_new+0x22>
	
	m->submenus.entries = malloc(sizeof(menuitem*) * numSubmenus);
     5ac:	8d 2d       	mov	r24, r13
     5ae:	90 e0       	ldi	r25, 0x00	; 0
     5b0:	88 0f       	add	r24, r24
     5b2:	99 1f       	adc	r25, r25
     5b4:	0e 94 d6 06 	call	0xdac	; 0xdac <malloc>
     5b8:	9d 83       	std	Y+5, r25	; 0x05
     5ba:	8c 83       	std	Y+4, r24	; 0x04
	m->submenus.number = numSubmenus;
     5bc:	db 82       	std	Y+3, r13	; 0x03
	m->fn = fn;
     5be:	f9 86       	std	Y+9, r15	; 0x09
     5c0:	e8 86       	std	Y+8, r14	; 0x08
	m->name = name;
     5c2:	19 83       	std	Y+1, r17	; 0x01
     5c4:	08 83       	st	Y, r16
	
	return m;
}
     5c6:	ce 01       	movw	r24, r28
     5c8:	df 91       	pop	r29
     5ca:	cf 91       	pop	r28
     5cc:	1f 91       	pop	r17
     5ce:	0f 91       	pop	r16
     5d0:	ff 90       	pop	r15
     5d2:	ef 90       	pop	r14
     5d4:	df 90       	pop	r13
     5d6:	08 95       	ret

000005d8 <menu_assign_parents_stdArrow>:

	menu_assign_parents_stdArrow(main_menu);
	return main_menu;
}

void menu_assign_parents_stdArrow(menuitem* m){
     5d8:	0f 93       	push	r16
     5da:	1f 93       	push	r17
     5dc:	cf 93       	push	r28
     5de:	df 93       	push	r29
     5e0:	ec 01       	movw	r28, r24
	for(uint8_t idx = 0; idx < m->submenus.number; idx++){
     5e2:	8b 81       	ldd	r24, Y+3	; 0x03
     5e4:	88 23       	and	r24, r24
     5e6:	39 f1       	breq	.+78     	; 0x636 <menu_assign_parents_stdArrow+0x5e>
     5e8:	10 e0       	ldi	r17, 0x00	; 0
		m->submenus.entries[idx]->parent = m;
		if (idx == 0){
			m->submenus.entries[0]->arrow_flag = 1;	
     5ea:	01 e0       	ldi	r16, 0x01	; 1
	return main_menu;
}

void menu_assign_parents_stdArrow(menuitem* m){
	for(uint8_t idx = 0; idx < m->submenus.number; idx++){
		m->submenus.entries[idx]->parent = m;
     5ec:	81 2f       	mov	r24, r17
     5ee:	90 e0       	ldi	r25, 0x00	; 0
     5f0:	88 0f       	add	r24, r24
     5f2:	99 1f       	adc	r25, r25
     5f4:	ec 81       	ldd	r30, Y+4	; 0x04
     5f6:	fd 81       	ldd	r31, Y+5	; 0x05
     5f8:	e8 0f       	add	r30, r24
     5fa:	f9 1f       	adc	r31, r25
     5fc:	01 90       	ld	r0, Z+
     5fe:	f0 81       	ld	r31, Z
     600:	e0 2d       	mov	r30, r0
     602:	d7 83       	std	Z+7, r29	; 0x07
     604:	c6 83       	std	Z+6, r28	; 0x06
		if (idx == 0){
     606:	11 11       	cpse	r17, r1
     608:	06 c0       	rjmp	.+12     	; 0x616 <menu_assign_parents_stdArrow+0x3e>
			m->submenus.entries[0]->arrow_flag = 1;	
     60a:	ec 81       	ldd	r30, Y+4	; 0x04
     60c:	fd 81       	ldd	r31, Y+5	; 0x05
     60e:	01 90       	ld	r0, Z+
     610:	f0 81       	ld	r31, Z
     612:	e0 2d       	mov	r30, r0
     614:	02 83       	std	Z+2, r16	; 0x02
		}
		if(m->submenus.number > 0){
     616:	2b 81       	ldd	r18, Y+3	; 0x03
     618:	22 23       	and	r18, r18
     61a:	69 f0       	breq	.+26     	; 0x636 <menu_assign_parents_stdArrow+0x5e>
			menu_assign_parents_stdArrow(m->submenus.entries[idx]);
     61c:	2c 81       	ldd	r18, Y+4	; 0x04
     61e:	3d 81       	ldd	r19, Y+5	; 0x05
     620:	f9 01       	movw	r30, r18
     622:	e8 0f       	add	r30, r24
     624:	f9 1f       	adc	r31, r25
     626:	80 81       	ld	r24, Z
     628:	91 81       	ldd	r25, Z+1	; 0x01
     62a:	0e 94 ec 02 	call	0x5d8	; 0x5d8 <menu_assign_parents_stdArrow>
	menu_assign_parents_stdArrow(main_menu);
	return main_menu;
}

void menu_assign_parents_stdArrow(menuitem* m){
	for(uint8_t idx = 0; idx < m->submenus.number; idx++){
     62e:	1f 5f       	subi	r17, 0xFF	; 255
     630:	8b 81       	ldd	r24, Y+3	; 0x03
     632:	18 17       	cp	r17, r24
     634:	d8 f2       	brcs	.-74     	; 0x5ec <menu_assign_parents_stdArrow+0x14>
		}
		if(m->submenus.number > 0){
			menu_assign_parents_stdArrow(m->submenus.entries[idx]);
		}
	}
}
     636:	df 91       	pop	r29
     638:	cf 91       	pop	r28
     63a:	1f 91       	pop	r17
     63c:	0f 91       	pop	r16
     63e:	08 95       	ret

00000640 <menu_init>:

void menu_joystick_select(uint8_t choice, uint8_t *setup){
	setup[2] = choice;
}

menuitem* menu_init(){
     640:	0f 93       	push	r16
     642:	1f 93       	push	r17
     644:	cf 93       	push	r28
     646:	df 93       	push	r29

	menuitem* main_menu = menu_new("Main menu", 2, NULL);
     648:	40 e0       	ldi	r20, 0x00	; 0
     64a:	50 e0       	ldi	r21, 0x00	; 0
     64c:	62 e0       	ldi	r22, 0x02	; 2
     64e:	89 e0       	ldi	r24, 0x09	; 9
     650:	91 e0       	ldi	r25, 0x01	; 1
     652:	0e 94 c2 02 	call	0x584	; 0x584 <menu_new>
     656:	ec 01       	movw	r28, r24
		main_menu->submenus.entries[0] = menu_new("New game", 2, NULL);
     658:	0c 81       	ldd	r16, Y+4	; 0x04
     65a:	1d 81       	ldd	r17, Y+5	; 0x05
     65c:	40 e0       	ldi	r20, 0x00	; 0
     65e:	50 e0       	ldi	r21, 0x00	; 0
     660:	62 e0       	ldi	r22, 0x02	; 2
     662:	83 e1       	ldi	r24, 0x13	; 19
     664:	91 e0       	ldi	r25, 0x01	; 1
     666:	0e 94 c2 02 	call	0x584	; 0x584 <menu_new>
     66a:	f8 01       	movw	r30, r16
     66c:	91 83       	std	Z+1, r25	; 0x01
     66e:	80 83       	st	Z, r24
			main_menu->submenus.entries[0]->submenus.entries[0] = menu_new("Single player", 0, &menu_player_select); 
     670:	ec 81       	ldd	r30, Y+4	; 0x04
     672:	fd 81       	ldd	r31, Y+5	; 0x05
     674:	01 90       	ld	r0, Z+
     676:	f0 81       	ld	r31, Z
     678:	e0 2d       	mov	r30, r0
     67a:	04 81       	ldd	r16, Z+4	; 0x04
     67c:	15 81       	ldd	r17, Z+5	; 0x05
     67e:	46 e0       	ldi	r20, 0x06	; 6
     680:	52 e0       	ldi	r21, 0x02	; 2
     682:	60 e0       	ldi	r22, 0x00	; 0
     684:	8c e1       	ldi	r24, 0x1C	; 28
     686:	91 e0       	ldi	r25, 0x01	; 1
     688:	0e 94 c2 02 	call	0x584	; 0x584 <menu_new>
     68c:	f8 01       	movw	r30, r16
     68e:	91 83       	std	Z+1, r25	; 0x01
     690:	80 83       	st	Z, r24
			main_menu->submenus.entries[0]->submenus.entries[1] = menu_new("Double player", 0, &menu_player_select); 
     692:	ec 81       	ldd	r30, Y+4	; 0x04
     694:	fd 81       	ldd	r31, Y+5	; 0x05
     696:	01 90       	ld	r0, Z+
     698:	f0 81       	ld	r31, Z
     69a:	e0 2d       	mov	r30, r0
     69c:	04 81       	ldd	r16, Z+4	; 0x04
     69e:	15 81       	ldd	r17, Z+5	; 0x05
     6a0:	46 e0       	ldi	r20, 0x06	; 6
     6a2:	52 e0       	ldi	r21, 0x02	; 2
     6a4:	60 e0       	ldi	r22, 0x00	; 0
     6a6:	8a e2       	ldi	r24, 0x2A	; 42
     6a8:	91 e0       	ldi	r25, 0x01	; 1
     6aa:	0e 94 c2 02 	call	0x584	; 0x584 <menu_new>
     6ae:	f8 01       	movw	r30, r16
     6b0:	93 83       	std	Z+3, r25	; 0x03
     6b2:	82 83       	std	Z+2, r24	; 0x02

		main_menu->submenus.entries[1] = menu_new("Options", 2, NULL);
     6b4:	0c 81       	ldd	r16, Y+4	; 0x04
     6b6:	1d 81       	ldd	r17, Y+5	; 0x05
     6b8:	40 e0       	ldi	r20, 0x00	; 0
     6ba:	50 e0       	ldi	r21, 0x00	; 0
     6bc:	62 e0       	ldi	r22, 0x02	; 2
     6be:	88 e3       	ldi	r24, 0x38	; 56
     6c0:	91 e0       	ldi	r25, 0x01	; 1
     6c2:	0e 94 c2 02 	call	0x584	; 0x584 <menu_new>
     6c6:	f8 01       	movw	r30, r16
     6c8:	93 83       	std	Z+3, r25	; 0x03
     6ca:	82 83       	std	Z+2, r24	; 0x02
			main_menu->submenus.entries[1]->submenus.entries[0] = menu_new("Joystick type", 2, NULL);
     6cc:	ec 81       	ldd	r30, Y+4	; 0x04
     6ce:	fd 81       	ldd	r31, Y+5	; 0x05
     6d0:	02 80       	ldd	r0, Z+2	; 0x02
     6d2:	f3 81       	ldd	r31, Z+3	; 0x03
     6d4:	e0 2d       	mov	r30, r0
     6d6:	04 81       	ldd	r16, Z+4	; 0x04
     6d8:	15 81       	ldd	r17, Z+5	; 0x05
     6da:	40 e0       	ldi	r20, 0x00	; 0
     6dc:	50 e0       	ldi	r21, 0x00	; 0
     6de:	62 e0       	ldi	r22, 0x02	; 2
     6e0:	80 e4       	ldi	r24, 0x40	; 64
     6e2:	91 e0       	ldi	r25, 0x01	; 1
     6e4:	0e 94 c2 02 	call	0x584	; 0x584 <menu_new>
     6e8:	f8 01       	movw	r30, r16
     6ea:	91 83       	std	Z+1, r25	; 0x01
     6ec:	80 83       	st	Z, r24
				main_menu->submenus.entries[1]->submenus.entries[0]->submenus.entries[0] = menu_new("Dualshock3", 0, &menu_joystick_select);
     6ee:	ec 81       	ldd	r30, Y+4	; 0x04
     6f0:	fd 81       	ldd	r31, Y+5	; 0x05
     6f2:	02 80       	ldd	r0, Z+2	; 0x02
     6f4:	f3 81       	ldd	r31, Z+3	; 0x03
     6f6:	e0 2d       	mov	r30, r0
     6f8:	04 80       	ldd	r0, Z+4	; 0x04
     6fa:	f5 81       	ldd	r31, Z+5	; 0x05
     6fc:	e0 2d       	mov	r30, r0
     6fe:	01 90       	ld	r0, Z+
     700:	f0 81       	ld	r31, Z
     702:	e0 2d       	mov	r30, r0
     704:	04 81       	ldd	r16, Z+4	; 0x04
     706:	15 81       	ldd	r17, Z+5	; 0x05
     708:	43 e0       	ldi	r20, 0x03	; 3
     70a:	52 e0       	ldi	r21, 0x02	; 2
     70c:	60 e0       	ldi	r22, 0x00	; 0
     70e:	8e e4       	ldi	r24, 0x4E	; 78
     710:	91 e0       	ldi	r25, 0x01	; 1
     712:	0e 94 c2 02 	call	0x584	; 0x584 <menu_new>
     716:	f8 01       	movw	r30, r16
     718:	91 83       	std	Z+1, r25	; 0x01
     71a:	80 83       	st	Z, r24
				main_menu->submenus.entries[1]->submenus.entries[0]->submenus.entries[1] = menu_new("Multifunction Card", 0, &menu_joystick_select); 
     71c:	ec 81       	ldd	r30, Y+4	; 0x04
     71e:	fd 81       	ldd	r31, Y+5	; 0x05
     720:	02 80       	ldd	r0, Z+2	; 0x02
     722:	f3 81       	ldd	r31, Z+3	; 0x03
     724:	e0 2d       	mov	r30, r0
     726:	04 80       	ldd	r0, Z+4	; 0x04
     728:	f5 81       	ldd	r31, Z+5	; 0x05
     72a:	e0 2d       	mov	r30, r0
     72c:	01 90       	ld	r0, Z+
     72e:	f0 81       	ld	r31, Z
     730:	e0 2d       	mov	r30, r0
     732:	04 81       	ldd	r16, Z+4	; 0x04
     734:	15 81       	ldd	r17, Z+5	; 0x05
     736:	43 e0       	ldi	r20, 0x03	; 3
     738:	52 e0       	ldi	r21, 0x02	; 2
     73a:	60 e0       	ldi	r22, 0x00	; 0
     73c:	89 e5       	ldi	r24, 0x59	; 89
     73e:	91 e0       	ldi	r25, 0x01	; 1
     740:	0e 94 c2 02 	call	0x584	; 0x584 <menu_new>
     744:	f8 01       	movw	r30, r16
     746:	93 83       	std	Z+3, r25	; 0x03
     748:	82 83       	std	Z+2, r24	; 0x02
			main_menu->submenus.entries[1]->submenus.entries[1] = menu_new("Method of control", 2, NULL);
     74a:	ec 81       	ldd	r30, Y+4	; 0x04
     74c:	fd 81       	ldd	r31, Y+5	; 0x05
     74e:	02 80       	ldd	r0, Z+2	; 0x02
     750:	f3 81       	ldd	r31, Z+3	; 0x03
     752:	e0 2d       	mov	r30, r0
     754:	04 81       	ldd	r16, Z+4	; 0x04
     756:	15 81       	ldd	r17, Z+5	; 0x05
     758:	40 e0       	ldi	r20, 0x00	; 0
     75a:	50 e0       	ldi	r21, 0x00	; 0
     75c:	62 e0       	ldi	r22, 0x02	; 2
     75e:	8c e6       	ldi	r24, 0x6C	; 108
     760:	91 e0       	ldi	r25, 0x01	; 1
     762:	0e 94 c2 02 	call	0x584	; 0x584 <menu_new>
     766:	f8 01       	movw	r30, r16
     768:	93 83       	std	Z+3, r25	; 0x03
     76a:	82 83       	std	Z+2, r24	; 0x02
				main_menu->submenus.entries[1]->submenus.entries[1]->submenus.entries[0] = menu_new("Speed", 0, &menu_control_select);
     76c:	ec 81       	ldd	r30, Y+4	; 0x04
     76e:	fd 81       	ldd	r31, Y+5	; 0x05
     770:	02 80       	ldd	r0, Z+2	; 0x02
     772:	f3 81       	ldd	r31, Z+3	; 0x03
     774:	e0 2d       	mov	r30, r0
     776:	04 80       	ldd	r0, Z+4	; 0x04
     778:	f5 81       	ldd	r31, Z+5	; 0x05
     77a:	e0 2d       	mov	r30, r0
     77c:	02 80       	ldd	r0, Z+2	; 0x02
     77e:	f3 81       	ldd	r31, Z+3	; 0x03
     780:	e0 2d       	mov	r30, r0
     782:	04 81       	ldd	r16, Z+4	; 0x04
     784:	15 81       	ldd	r17, Z+5	; 0x05
     786:	40 e0       	ldi	r20, 0x00	; 0
     788:	52 e0       	ldi	r21, 0x02	; 2
     78a:	60 e0       	ldi	r22, 0x00	; 0
     78c:	8e e7       	ldi	r24, 0x7E	; 126
     78e:	91 e0       	ldi	r25, 0x01	; 1
     790:	0e 94 c2 02 	call	0x584	; 0x584 <menu_new>
     794:	f8 01       	movw	r30, r16
     796:	91 83       	std	Z+1, r25	; 0x01
     798:	80 83       	st	Z, r24
				main_menu->submenus.entries[1]->submenus.entries[1]->submenus.entries[1] = menu_new("Position", 0, &menu_control_select);
     79a:	ec 81       	ldd	r30, Y+4	; 0x04
     79c:	fd 81       	ldd	r31, Y+5	; 0x05
     79e:	02 80       	ldd	r0, Z+2	; 0x02
     7a0:	f3 81       	ldd	r31, Z+3	; 0x03
     7a2:	e0 2d       	mov	r30, r0
     7a4:	04 80       	ldd	r0, Z+4	; 0x04
     7a6:	f5 81       	ldd	r31, Z+5	; 0x05
     7a8:	e0 2d       	mov	r30, r0
     7aa:	02 80       	ldd	r0, Z+2	; 0x02
     7ac:	f3 81       	ldd	r31, Z+3	; 0x03
     7ae:	e0 2d       	mov	r30, r0
     7b0:	04 81       	ldd	r16, Z+4	; 0x04
     7b2:	15 81       	ldd	r17, Z+5	; 0x05
     7b4:	40 e0       	ldi	r20, 0x00	; 0
     7b6:	52 e0       	ldi	r21, 0x02	; 2
     7b8:	60 e0       	ldi	r22, 0x00	; 0
     7ba:	84 e8       	ldi	r24, 0x84	; 132
     7bc:	91 e0       	ldi	r25, 0x01	; 1
     7be:	0e 94 c2 02 	call	0x584	; 0x584 <menu_new>
     7c2:	f8 01       	movw	r30, r16
     7c4:	93 83       	std	Z+3, r25	; 0x03
     7c6:	82 83       	std	Z+2, r24	; 0x02

	menu_assign_parents_stdArrow(main_menu);
     7c8:	ce 01       	movw	r24, r28
     7ca:	0e 94 ec 02 	call	0x5d8	; 0x5d8 <menu_assign_parents_stdArrow>
	return main_menu;
}
     7ce:	ce 01       	movw	r24, r28
     7d0:	df 91       	pop	r29
     7d2:	cf 91       	pop	r28
     7d4:	1f 91       	pop	r17
     7d6:	0f 91       	pop	r16
     7d8:	08 95       	ret

000007da <menu_print>:
	}
}


void menu_print(menuitem* m)
{
     7da:	ff 92       	push	r15
     7dc:	0f 93       	push	r16
     7de:	1f 93       	push	r17
     7e0:	cf 93       	push	r28
     7e2:	df 93       	push	r29
     7e4:	ec 01       	movw	r28, r24
	OLED_pos(0,0);
     7e6:	60 e0       	ldi	r22, 0x00	; 0
     7e8:	80 e0       	ldi	r24, 0x00	; 0
     7ea:	0e 94 b4 05 	call	0xb68	; 0xb68 <OLED_pos>
	OLED_print_string(m->name);
     7ee:	88 81       	ld	r24, Y
     7f0:	99 81       	ldd	r25, Y+1	; 0x01
     7f2:	0e 94 0a 06 	call	0xc14	; 0xc14 <OLED_print_string>
	OLED_clear_rest_of_line();
     7f6:	0e 94 bd 05 	call	0xb7a	; 0xb7a <OLED_clear_rest_of_line>
	for (uint8_t i = 0; i < m->submenus.number; i++){
     7fa:	8b 81       	ldd	r24, Y+3	; 0x03
     7fc:	88 23       	and	r24, r24
     7fe:	89 f1       	breq	.+98     	; 0x862 <menu_print+0x88>
     800:	00 e0       	ldi	r16, 0x00	; 0
		OLED_pos(i+1,0);
     802:	ff 24       	eor	r15, r15
     804:	f3 94       	inc	r15
     806:	f0 0e       	add	r15, r16
     808:	60 e0       	ldi	r22, 0x00	; 0
     80a:	8f 2d       	mov	r24, r15
     80c:	0e 94 b4 05 	call	0xb68	; 0xb68 <OLED_pos>
		if(m->submenus.entries[i]->arrow_flag){
     810:	10 e0       	ldi	r17, 0x00	; 0
     812:	00 0f       	add	r16, r16
     814:	11 1f       	adc	r17, r17
     816:	ec 81       	ldd	r30, Y+4	; 0x04
     818:	fd 81       	ldd	r31, Y+5	; 0x05
     81a:	e0 0f       	add	r30, r16
     81c:	f1 1f       	adc	r31, r17
     81e:	01 90       	ld	r0, Z+
     820:	f0 81       	ld	r31, Z
     822:	e0 2d       	mov	r30, r0
     824:	82 81       	ldd	r24, Z+2	; 0x02
     826:	88 23       	and	r24, r24
     828:	29 f0       	breq	.+10     	; 0x834 <menu_print+0x5a>
			OLED_print_string("->");
     82a:	8d e8       	ldi	r24, 0x8D	; 141
     82c:	91 e0       	ldi	r25, 0x01	; 1
     82e:	0e 94 0a 06 	call	0xc14	; 0xc14 <OLED_print_string>
     832:	04 c0       	rjmp	.+8      	; 0x83c <menu_print+0x62>
		}
		else{
			OLED_print_string("  ");
     834:	80 e9       	ldi	r24, 0x90	; 144
     836:	91 e0       	ldi	r25, 0x01	; 1
     838:	0e 94 0a 06 	call	0xc14	; 0xc14 <OLED_print_string>
		}		
		OLED_print_string(m->submenus.entries[i]->name);
     83c:	2c 81       	ldd	r18, Y+4	; 0x04
     83e:	3d 81       	ldd	r19, Y+5	; 0x05
     840:	f9 01       	movw	r30, r18
     842:	e0 0f       	add	r30, r16
     844:	f1 1f       	adc	r31, r17
     846:	01 90       	ld	r0, Z+
     848:	f0 81       	ld	r31, Z
     84a:	e0 2d       	mov	r30, r0
     84c:	80 81       	ld	r24, Z
     84e:	91 81       	ldd	r25, Z+1	; 0x01
     850:	0e 94 0a 06 	call	0xc14	; 0xc14 <OLED_print_string>
		OLED_clear_rest_of_line();
     854:	0e 94 bd 05 	call	0xb7a	; 0xb7a <OLED_clear_rest_of_line>
void menu_print(menuitem* m)
{
	OLED_pos(0,0);
	OLED_print_string(m->name);
	OLED_clear_rest_of_line();
	for (uint8_t i = 0; i < m->submenus.number; i++){
     858:	8b 81       	ldd	r24, Y+3	; 0x03
     85a:	f8 16       	cp	r15, r24
     85c:	10 f4       	brcc	.+4      	; 0x862 <menu_print+0x88>
     85e:	0f 2d       	mov	r16, r15
     860:	d0 cf       	rjmp	.-96     	; 0x802 <menu_print+0x28>
			OLED_print_string("  ");
		}		
		OLED_print_string(m->submenus.entries[i]->name);
		OLED_clear_rest_of_line();
	}
}
     862:	df 91       	pop	r29
     864:	cf 91       	pop	r28
     866:	1f 91       	pop	r17
     868:	0f 91       	pop	r16
     86a:	ff 90       	pop	r15
     86c:	08 95       	ret

0000086e <menu_move>:

menuitem* menu_move(menuitem* m, uint8_t* prev_dir, uint8_t *setup)
{	
     86e:	ef 92       	push	r14
     870:	ff 92       	push	r15
     872:	0f 93       	push	r16
     874:	1f 93       	push	r17
     876:	cf 93       	push	r28
     878:	df 93       	push	r29
     87a:	ec 01       	movw	r28, r24
     87c:	8b 01       	movw	r16, r22
     87e:	7a 01       	movw	r14, r20
	switch(Joy_getDirection()){
     880:	0e 94 33 05 	call	0xa66	; 0xa66 <Joy_getDirection>
     884:	81 30       	cpi	r24, 0x01	; 1
     886:	f1 f0       	breq	.+60     	; 0x8c4 <menu_move+0x56>
     888:	40 f1       	brcs	.+80     	; 0x8da <menu_move+0x6c>
     88a:	82 30       	cpi	r24, 0x02	; 2
     88c:	19 f0       	breq	.+6      	; 0x894 <menu_move+0x26>
     88e:	83 30       	cpi	r24, 0x03	; 3
     890:	69 f0       	breq	.+26     	; 0x8ac <menu_move+0x3e>
     892:	33 c0       	rjmp	.+102    	; 0x8fa <menu_move+0x8c>
		case UP:
			if (*prev_dir == NEUTRAL){
     894:	f8 01       	movw	r30, r16
     896:	80 81       	ld	r24, Z
     898:	84 30       	cpi	r24, 0x04	; 4
     89a:	a9 f5       	brne	.+106    	; 0x906 <menu_move+0x98>
				*prev_dir = UP;
     89c:	82 e0       	ldi	r24, 0x02	; 2
     89e:	80 83       	st	Z, r24
				menu_up(m);
     8a0:	ce 01       	movw	r24, r28
     8a2:	0e 94 7c 02 	call	0x4f8	; 0x4f8 <menu_up>
			}
			return m;
     8a6:	8c 2f       	mov	r24, r28
     8a8:	9d 2f       	mov	r25, r29
     8aa:	38 c0       	rjmp	.+112    	; 0x91c <menu_move+0xae>
			break;
		case DOWN:
			if (*prev_dir == NEUTRAL){
     8ac:	f8 01       	movw	r30, r16
     8ae:	80 81       	ld	r24, Z
     8b0:	84 30       	cpi	r24, 0x04	; 4
     8b2:	61 f5       	brne	.+88     	; 0x90c <menu_move+0x9e>
				*prev_dir = DOWN;
     8b4:	83 e0       	ldi	r24, 0x03	; 3
     8b6:	80 83       	st	Z, r24
				menu_down(m);
     8b8:	ce 01       	movw	r24, r28
     8ba:	0e 94 9c 02 	call	0x538	; 0x538 <menu_down>
			}
			return m;
     8be:	8c 2f       	mov	r24, r28
     8c0:	9d 2f       	mov	r25, r29
     8c2:	2c c0       	rjmp	.+88     	; 0x91c <menu_move+0xae>
			break;
		case RIGHT:
			if (*prev_dir == NEUTRAL){
     8c4:	f8 01       	movw	r30, r16
     8c6:	80 81       	ld	r24, Z
     8c8:	84 30       	cpi	r24, 0x04	; 4
     8ca:	19 f5       	brne	.+70     	; 0x912 <menu_move+0xa4>
				*prev_dir = RIGHT;
     8cc:	81 e0       	ldi	r24, 0x01	; 1
     8ce:	80 83       	st	Z, r24
				return menu_right(m, setup);
     8d0:	b7 01       	movw	r22, r14
     8d2:	ce 01       	movw	r24, r28
     8d4:	0e 94 57 02 	call	0x4ae	; 0x4ae <menu_right>
     8d8:	21 c0       	rjmp	.+66     	; 0x91c <menu_move+0xae>
			}
			break;
		case LEFT:
			if (*prev_dir == NEUTRAL){
     8da:	f8 01       	movw	r30, r16
     8dc:	80 81       	ld	r24, Z
     8de:	84 30       	cpi	r24, 0x04	; 4
     8e0:	d9 f4       	brne	.+54     	; 0x918 <menu_move+0xaa>
				*prev_dir = LEFT;
     8e2:	10 82       	st	Z, r1
		return m->parent;
	}
}

menuitem* menu_left(menuitem* m){
	if(m->parent){
     8e4:	2e 81       	ldd	r18, Y+6	; 0x06
     8e6:	3f 81       	ldd	r19, Y+7	; 0x07
     8e8:	21 15       	cp	r18, r1
     8ea:	31 05       	cpc	r19, r1
     8ec:	19 f0       	breq	.+6      	; 0x8f4 <menu_move+0x86>
		return m->parent;
     8ee:	82 2f       	mov	r24, r18
     8f0:	93 2f       	mov	r25, r19
     8f2:	14 c0       	rjmp	.+40     	; 0x91c <menu_move+0xae>
	} else {
		return m;
     8f4:	8c 2f       	mov	r24, r28
     8f6:	9d 2f       	mov	r25, r29
			}
			break;
		case LEFT:
			if (*prev_dir == NEUTRAL){
				*prev_dir = LEFT;
				return menu_left(m);
     8f8:	11 c0       	rjmp	.+34     	; 0x91c <menu_move+0xae>
			}
			break;
		default:
			*prev_dir = NEUTRAL;
     8fa:	84 e0       	ldi	r24, 0x04	; 4
     8fc:	f8 01       	movw	r30, r16
     8fe:	80 83       	st	Z, r24
			
		break;
	}
	return m;
     900:	8c 2f       	mov	r24, r28
     902:	9d 2f       	mov	r25, r29
			}
			break;
		default:
			*prev_dir = NEUTRAL;
			
		break;
     904:	0b c0       	rjmp	.+22     	; 0x91c <menu_move+0xae>
		case UP:
			if (*prev_dir == NEUTRAL){
				*prev_dir = UP;
				menu_up(m);
			}
			return m;
     906:	8c 2f       	mov	r24, r28
     908:	9d 2f       	mov	r25, r29
     90a:	08 c0       	rjmp	.+16     	; 0x91c <menu_move+0xae>
		case DOWN:
			if (*prev_dir == NEUTRAL){
				*prev_dir = DOWN;
				menu_down(m);
			}
			return m;
     90c:	8c 2f       	mov	r24, r28
     90e:	9d 2f       	mov	r25, r29
     910:	05 c0       	rjmp	.+10     	; 0x91c <menu_move+0xae>
		default:
			*prev_dir = NEUTRAL;
			
		break;
	}
	return m;
     912:	8c 2f       	mov	r24, r28
     914:	9d 2f       	mov	r25, r29
     916:	02 c0       	rjmp	.+4      	; 0x91c <menu_move+0xae>
     918:	8c 2f       	mov	r24, r28
     91a:	9d 2f       	mov	r25, r29
}
     91c:	df 91       	pop	r29
     91e:	cf 91       	pop	r28
     920:	1f 91       	pop	r17
     922:	0f 91       	pop	r16
     924:	ff 90       	pop	r15
     926:	ef 90       	pop	r14
     928:	08 95       	ret

0000092a <menu_print_singleplayer>:


void menu_print_singleplayer(uint8_t *time)
{
     92a:	0f 93       	push	r16
     92c:	1f 93       	push	r17
     92e:	cf 93       	push	r28
     930:	df 93       	push	r29
     932:	cd b7       	in	r28, 0x3d	; 61
     934:	de b7       	in	r29, 0x3e	; 62
     936:	64 97       	sbiw	r28, 0x14	; 20
     938:	0f b6       	in	r0, 0x3f	; 63
     93a:	f8 94       	cli
     93c:	de bf       	out	0x3e, r29	; 62
     93e:	0f be       	out	0x3f, r0	; 63
     940:	cd bf       	out	0x3d, r28	; 61
     942:	8c 01       	movw	r16, r24
	OLED_pos(0,0);
     944:	60 e0       	ldi	r22, 0x00	; 0
     946:	80 e0       	ldi	r24, 0x00	; 0
     948:	0e 94 b4 05 	call	0xb68	; 0xb68 <OLED_pos>
	OLED_print_string("Single player\n");
     94c:	83 e9       	ldi	r24, 0x93	; 147
     94e:	91 e0       	ldi	r25, 0x01	; 1
     950:	0e 94 0a 06 	call	0xc14	; 0xc14 <OLED_print_string>
	OLED_pos(1,0);
     954:	60 e0       	ldi	r22, 0x00	; 0
     956:	81 e0       	ldi	r24, 0x01	; 1
     958:	0e 94 b4 05 	call	0xb68	; 0xb68 <OLED_pos>
	char str[20];
	sprintf(str, "Time: %02d:%02d:%02d\n", time[0], time[1], time[2]);
     95c:	f8 01       	movw	r30, r16
     95e:	82 81       	ldd	r24, Z+2	; 0x02
     960:	1f 92       	push	r1
     962:	8f 93       	push	r24
     964:	81 81       	ldd	r24, Z+1	; 0x01
     966:	1f 92       	push	r1
     968:	8f 93       	push	r24
     96a:	80 81       	ld	r24, Z
     96c:	1f 92       	push	r1
     96e:	8f 93       	push	r24
     970:	82 ea       	ldi	r24, 0xA2	; 162
     972:	91 e0       	ldi	r25, 0x01	; 1
     974:	9f 93       	push	r25
     976:	8f 93       	push	r24
     978:	8e 01       	movw	r16, r28
     97a:	0f 5f       	subi	r16, 0xFF	; 255
     97c:	1f 4f       	sbci	r17, 0xFF	; 255
     97e:	1f 93       	push	r17
     980:	0f 93       	push	r16
     982:	0e 94 48 08 	call	0x1090	; 0x1090 <sprintf>
	OLED_print_string(str);
     986:	c8 01       	movw	r24, r16
     988:	0e 94 0a 06 	call	0xc14	; 0xc14 <OLED_print_string>
     98c:	0f b6       	in	r0, 0x3f	; 63
     98e:	f8 94       	cli
     990:	de bf       	out	0x3e, r29	; 62
     992:	0f be       	out	0x3f, r0	; 63
     994:	cd bf       	out	0x3d, r28	; 61
	
	

}
     996:	64 96       	adiw	r28, 0x14	; 20
     998:	0f b6       	in	r0, 0x3f	; 63
     99a:	f8 94       	cli
     99c:	de bf       	out	0x3e, r29	; 62
     99e:	0f be       	out	0x3f, r0	; 63
     9a0:	cd bf       	out	0x3d, r28	; 61
     9a2:	df 91       	pop	r29
     9a4:	cf 91       	pop	r28
     9a6:	1f 91       	pop	r17
     9a8:	0f 91       	pop	r16
     9aa:	08 95       	ret

000009ac <JOY_calibrate>:
     9ac:	80 e0       	ldi	r24, 0x00	; 0
     9ae:	0e 94 1d 01 	call	0x23a	; 0x23a <ADC_read>
     9b2:	80 93 b8 01 	sts	0x01B8, r24
     9b6:	81 e0       	ldi	r24, 0x01	; 1
     9b8:	0e 94 1d 01 	call	0x23a	; 0x23a <ADC_read>
     9bc:	80 93 b9 01 	sts	0x01B9, r24
     9c0:	08 95       	ret

000009c2 <JOY_init>:
     9c2:	0e 94 15 01 	call	0x22a	; 0x22a <ADC_init>
     9c6:	87 b3       	in	r24, 0x17	; 23
     9c8:	88 7f       	andi	r24, 0xF8	; 248
     9ca:	87 bb       	out	0x17, r24	; 23
     9cc:	88 b3       	in	r24, 0x18	; 24
     9ce:	87 60       	ori	r24, 0x07	; 7
     9d0:	88 bb       	out	0x18, r24	; 24
     9d2:	0e 94 d6 04 	call	0x9ac	; 0x9ac <JOY_calibrate>
     9d6:	08 95       	ret

000009d8 <JOY_button>:
     9d8:	81 30       	cpi	r24, 0x01	; 1
     9da:	91 05       	cpc	r25, r1
     9dc:	41 f0       	breq	.+16     	; 0x9ee <JOY_button+0x16>
     9de:	82 30       	cpi	r24, 0x02	; 2
     9e0:	91 05       	cpc	r25, r1
     9e2:	49 f0       	breq	.+18     	; 0x9f6 <JOY_button+0x1e>
     9e4:	89 2b       	or	r24, r25
     9e6:	61 f4       	brne	.+24     	; 0xa00 <JOY_button+0x28>
     9e8:	86 b3       	in	r24, 0x16	; 22
     9ea:	81 70       	andi	r24, 0x01	; 1
     9ec:	08 95       	ret
     9ee:	86 b3       	in	r24, 0x16	; 22
     9f0:	86 95       	lsr	r24
     9f2:	81 70       	andi	r24, 0x01	; 1
     9f4:	08 95       	ret
     9f6:	86 b3       	in	r24, 0x16	; 22
     9f8:	82 fb       	bst	r24, 2
     9fa:	88 27       	eor	r24, r24
     9fc:	80 f9       	bld	r24, 0
     9fe:	08 95       	ret
     a00:	80 e0       	ldi	r24, 0x00	; 0
     a02:	08 95       	ret

00000a04 <JOY_getPosition>:
     a04:	0f 93       	push	r16
     a06:	1f 93       	push	r17
     a08:	cf 93       	push	r28
     a0a:	df 93       	push	r29
     a0c:	80 e0       	ldi	r24, 0x00	; 0
     a0e:	0e 94 1d 01 	call	0x23a	; 0x23a <ADC_read>
     a12:	28 2f       	mov	r18, r24
     a14:	30 e0       	ldi	r19, 0x00	; 0
     a16:	80 91 b8 01 	lds	r24, 0x01B8
     a1a:	28 1b       	sub	r18, r24
     a1c:	31 09       	sbc	r19, r1
     a1e:	14 e6       	ldi	r17, 0x64	; 100
     a20:	12 9f       	mul	r17, r18
     a22:	c0 01       	movw	r24, r0
     a24:	13 9f       	mul	r17, r19
     a26:	90 0d       	add	r25, r0
     a28:	11 24       	eor	r1, r1
     a2a:	cf e7       	ldi	r28, 0x7F	; 127
     a2c:	d0 e0       	ldi	r29, 0x00	; 0
     a2e:	be 01       	movw	r22, r28
     a30:	0e 94 ae 06 	call	0xd5c	; 0xd5c <__divmodhi4>
     a34:	06 2f       	mov	r16, r22
     a36:	81 e0       	ldi	r24, 0x01	; 1
     a38:	0e 94 1d 01 	call	0x23a	; 0x23a <ADC_read>
     a3c:	48 2f       	mov	r20, r24
     a3e:	50 e0       	ldi	r21, 0x00	; 0
     a40:	80 91 b9 01 	lds	r24, 0x01B9
     a44:	48 1b       	sub	r20, r24
     a46:	51 09       	sbc	r21, r1
     a48:	14 9f       	mul	r17, r20
     a4a:	c0 01       	movw	r24, r0
     a4c:	15 9f       	mul	r17, r21
     a4e:	90 0d       	add	r25, r0
     a50:	11 24       	eor	r1, r1
     a52:	be 01       	movw	r22, r28
     a54:	0e 94 ae 06 	call	0xd5c	; 0xd5c <__divmodhi4>
     a58:	96 2f       	mov	r25, r22
     a5a:	80 2f       	mov	r24, r16
     a5c:	df 91       	pop	r29
     a5e:	cf 91       	pop	r28
     a60:	1f 91       	pop	r17
     a62:	0f 91       	pop	r16
     a64:	08 95       	ret

00000a66 <Joy_getDirection>:
     a66:	0e 94 02 05 	call	0xa04	; 0xa04 <JOY_getPosition>
     a6a:	83 3d       	cpi	r24, 0xD3	; 211
     a6c:	44 f0       	brlt	.+16     	; 0xa7e <Joy_getDirection+0x18>
     a6e:	8e 32       	cpi	r24, 0x2E	; 46
     a70:	44 f4       	brge	.+16     	; 0xa82 <Joy_getDirection+0x1c>
     a72:	9e 32       	cpi	r25, 0x2E	; 46
     a74:	44 f4       	brge	.+16     	; 0xa86 <Joy_getDirection+0x20>
     a76:	93 3d       	cpi	r25, 0xD3	; 211
     a78:	44 f4       	brge	.+16     	; 0xa8a <Joy_getDirection+0x24>
     a7a:	83 e0       	ldi	r24, 0x03	; 3
     a7c:	08 95       	ret
     a7e:	80 e0       	ldi	r24, 0x00	; 0
     a80:	08 95       	ret
     a82:	81 e0       	ldi	r24, 0x01	; 1
     a84:	08 95       	ret
     a86:	82 e0       	ldi	r24, 0x02	; 2
     a88:	08 95       	ret
     a8a:	84 e0       	ldi	r24, 0x04	; 4
     a8c:	08 95       	ret

00000a8e <OLED_go_to_page>:
	*OLED_c = c; 
}

void OLED_go_to_page(char page)
{
	OLED_command(0xB0+page);
     a8e:	90 eb       	ldi	r25, 0xB0	; 176
     a90:	98 0f       	add	r25, r24
	OLED_home();
}	

void OLED_command(char c){
	volatile char* OLED_c = (char*) 0x1000;
	*OLED_c = c;
     a92:	90 93 00 10 	sts	0x1000, r25
}

void OLED_go_to_page(char page)
{
	OLED_command(0xB0+page);
	current_page = page;
     a96:	80 93 ba 01 	sts	0x01BA, r24
     a9a:	08 95       	ret

00000a9c <OLED_clear_page>:
}

void OLED_clear_page(char page){
	OLED_go_to_page(page);
     a9c:	0e 94 47 05 	call	0xa8e	; 0xa8e <OLED_go_to_page>
     aa0:	80 e8       	ldi	r24, 0x80	; 128
     aa2:	90 e0       	ldi	r25, 0x00	; 0
	*OLED_c = c;
}

void OLED_data(char c){
	volatile char* OLED_c = (char*) 0x1200;
	*OLED_c = c; 
     aa4:	e0 e0       	ldi	r30, 0x00	; 0
     aa6:	f2 e1       	ldi	r31, 0x12	; 18
     aa8:	10 82       	st	Z, r1
     aaa:	01 97       	sbiw	r24, 0x01	; 1
	current_page = page;
}

void OLED_clear_page(char page){
	OLED_go_to_page(page);
	for(int i = 0; i < 128; i++){
     aac:	00 97       	sbiw	r24, 0x00	; 0
     aae:	e1 f7       	brne	.-8      	; 0xaa8 <OLED_clear_page+0xc>
		OLED_data(0x00);
	}
}
     ab0:	08 95       	ret

00000ab2 <OLED_reset>:

void OLED_reset(){
     ab2:	cf 93       	push	r28
     ab4:	c0 e0       	ldi	r28, 0x00	; 0
	for (int i = 0; i < 8; i++){
		OLED_clear_page(i);
     ab6:	8c 2f       	mov	r24, r28
     ab8:	0e 94 4e 05 	call	0xa9c	; 0xa9c <OLED_clear_page>
     abc:	cf 5f       	subi	r28, 0xFF	; 255
		OLED_data(0x00);
	}
}

void OLED_reset(){
	for (int i = 0; i < 8; i++){
     abe:	c8 30       	cpi	r28, 0x08	; 8
     ac0:	d1 f7       	brne	.-12     	; 0xab6 <OLED_reset+0x4>
		OLED_clear_page(i);
	}
}
     ac2:	cf 91       	pop	r28
     ac4:	08 95       	ret

00000ac6 <OLED_go_to_col>:
}

void OLED_go_to_col(char column){
	char msb = column & 0b11110000;
	msb /= 0b10000;
	char lsb = column & 0b00001111;
     ac6:	98 2f       	mov	r25, r24
     ac8:	9f 70       	andi	r25, 0x0F	; 15
	OLED_go_to_col(column);
}

void OLED_go_to_col(char column){
	char msb = column & 0b11110000;
	msb /= 0b10000;
     aca:	28 2f       	mov	r18, r24
     acc:	22 95       	swap	r18
     ace:	2f 70       	andi	r18, 0x0F	; 15
	char lsb = column & 0b00001111;
	OLED_command(msb+0b00010000);
     ad0:	20 5f       	subi	r18, 0xF0	; 240
	OLED_home();
}	

void OLED_command(char c){
	volatile char* OLED_c = (char*) 0x1000;
	*OLED_c = c;
     ad2:	e0 e0       	ldi	r30, 0x00	; 0
     ad4:	f0 e1       	ldi	r31, 0x10	; 16
     ad6:	20 83       	st	Z, r18
     ad8:	90 83       	st	Z, r25
	char msb = column & 0b11110000;
	msb /= 0b10000;
	char lsb = column & 0b00001111;
	OLED_command(msb+0b00010000);
	OLED_command(lsb);
	current_column = column;
     ada:	80 93 bb 01 	sts	0x01BB, r24
     ade:	08 95       	ret

00000ae0 <OLED_home>:
		OLED_clear_page(i);
	}
}

void OLED_home(){
	OLED_go_to_page(0);
     ae0:	80 e0       	ldi	r24, 0x00	; 0
     ae2:	0e 94 47 05 	call	0xa8e	; 0xa8e <OLED_go_to_page>
	OLED_go_to_col(0);
     ae6:	80 e0       	ldi	r24, 0x00	; 0
     ae8:	0e 94 63 05 	call	0xac6	; 0xac6 <OLED_go_to_col>
     aec:	08 95       	ret

00000aee <OLED_init>:




void OLED_init(){
	MCUCR |= (1<<SRE);
     aee:	85 b7       	in	r24, 0x35	; 53
     af0:	80 68       	ori	r24, 0x80	; 128
     af2:	85 bf       	out	0x35, r24	; 53
	SFIOR |= (1<<XMM2);
     af4:	80 b7       	in	r24, 0x30	; 48
     af6:	80 62       	ori	r24, 0x20	; 32
     af8:	80 bf       	out	0x30, r24	; 48
	OLED_home();
}	

void OLED_command(char c){
	volatile char* OLED_c = (char*) 0x1000;
	*OLED_c = c;
     afa:	e0 e0       	ldi	r30, 0x00	; 0
     afc:	f0 e1       	ldi	r31, 0x10	; 16
     afe:	8e ea       	ldi	r24, 0xAE	; 174
     b00:	80 83       	st	Z, r24
     b02:	81 ea       	ldi	r24, 0xA1	; 161
     b04:	80 83       	st	Z, r24
     b06:	8a ed       	ldi	r24, 0xDA	; 218
     b08:	80 83       	st	Z, r24
     b0a:	82 e1       	ldi	r24, 0x12	; 18
     b0c:	80 83       	st	Z, r24
     b0e:	88 ec       	ldi	r24, 0xC8	; 200
     b10:	80 83       	st	Z, r24
     b12:	88 ea       	ldi	r24, 0xA8	; 168
     b14:	80 83       	st	Z, r24
     b16:	8f e3       	ldi	r24, 0x3F	; 63
     b18:	80 83       	st	Z, r24
     b1a:	85 ed       	ldi	r24, 0xD5	; 213
     b1c:	80 83       	st	Z, r24
     b1e:	80 e8       	ldi	r24, 0x80	; 128
     b20:	80 83       	st	Z, r24
     b22:	81 e8       	ldi	r24, 0x81	; 129
     b24:	80 83       	st	Z, r24
     b26:	80 e5       	ldi	r24, 0x50	; 80
     b28:	80 83       	st	Z, r24
     b2a:	89 ed       	ldi	r24, 0xD9	; 217
     b2c:	80 83       	st	Z, r24
     b2e:	81 e2       	ldi	r24, 0x21	; 33
     b30:	80 83       	st	Z, r24
     b32:	80 e2       	ldi	r24, 0x20	; 32
     b34:	80 83       	st	Z, r24
     b36:	82 e0       	ldi	r24, 0x02	; 2
     b38:	80 83       	st	Z, r24
     b3a:	8b ed       	ldi	r24, 0xDB	; 219
     b3c:	80 83       	st	Z, r24
     b3e:	80 e3       	ldi	r24, 0x30	; 48
     b40:	80 83       	st	Z, r24
     b42:	8d ea       	ldi	r24, 0xAD	; 173
     b44:	80 83       	st	Z, r24
     b46:	10 82       	st	Z, r1
     b48:	84 ea       	ldi	r24, 0xA4	; 164
     b4a:	80 83       	st	Z, r24
     b4c:	86 ea       	ldi	r24, 0xA6	; 166
     b4e:	80 83       	st	Z, r24
     b50:	8f ea       	ldi	r24, 0xAF	; 175
     b52:	80 83       	st	Z, r24
     b54:	80 eb       	ldi	r24, 0xB0	; 176
     b56:	80 83       	st	Z, r24
     b58:	10 82       	st	Z, r1
     b5a:	80 e1       	ldi	r24, 0x10	; 16
     b5c:	80 83       	st	Z, r24
	OLED_command(0xa6);    //set normal display
	OLED_command(0xaf);    // display on
	OLED_command(0xb0);		//Page start address
	OLED_command(0x00);		//Lower column start address
	OLED_command(0x10);		//Higher column start address.
	OLED_reset();
     b5e:	0e 94 59 05 	call	0xab2	; 0xab2 <OLED_reset>
	OLED_home();
     b62:	0e 94 70 05 	call	0xae0	; 0xae0 <OLED_home>
     b66:	08 95       	ret

00000b68 <OLED_pos>:
void OLED_home(){
	OLED_go_to_page(0);
	OLED_go_to_col(0);
}

void OLED_pos(char page, char column){
     b68:	cf 93       	push	r28
     b6a:	c6 2f       	mov	r28, r22
	OLED_go_to_page(page);
     b6c:	0e 94 47 05 	call	0xa8e	; 0xa8e <OLED_go_to_page>
	OLED_go_to_col(column);
     b70:	8c 2f       	mov	r24, r28
     b72:	0e 94 63 05 	call	0xac6	; 0xac6 <OLED_go_to_col>
}
     b76:	cf 91       	pop	r28
     b78:	08 95       	ret

00000b7a <OLED_clear_rest_of_line>:
	OLED_command(lsb);
	current_column = column;
}

void OLED_clear_rest_of_line(){
	for (int i = current_column; i < 128; i++ ){
     b7a:	80 91 bb 01 	lds	r24, 0x01BB
     b7e:	90 e0       	ldi	r25, 0x00	; 0
     b80:	80 38       	cpi	r24, 0x80	; 128
     b82:	91 05       	cpc	r25, r1
     b84:	3c f4       	brge	.+14     	; 0xb94 <OLED_clear_rest_of_line+0x1a>
	*OLED_c = c;
}

void OLED_data(char c){
	volatile char* OLED_c = (char*) 0x1200;
	*OLED_c = c; 
     b86:	e0 e0       	ldi	r30, 0x00	; 0
     b88:	f2 e1       	ldi	r31, 0x12	; 18
     b8a:	10 82       	st	Z, r1
	OLED_command(lsb);
	current_column = column;
}

void OLED_clear_rest_of_line(){
	for (int i = current_column; i < 128; i++ ){
     b8c:	01 96       	adiw	r24, 0x01	; 1
     b8e:	80 38       	cpi	r24, 0x80	; 128
     b90:	91 05       	cpc	r25, r1
     b92:	d9 f7       	brne	.-10     	; 0xb8a <OLED_clear_rest_of_line+0x10>
		OLED_data(0);
	}
	current_column = 0;
     b94:	10 92 bb 01 	sts	0x01BB, r1
     b98:	08 95       	ret

00000b9a <OLED_print>:
}

void OLED_print(char character){
	if (character == '\n'){
     b9a:	8a 30       	cpi	r24, 0x0A	; 10
     b9c:	41 f0       	breq	.+16     	; 0xbae <OLED_print+0x14>
		OLED_clear_rest_of_line();	
	}
	else{
		for (int i = 0; i < char_width; i++){
     b9e:	90 91 08 01 	lds	r25, 0x0108
     ba2:	49 2f       	mov	r20, r25
     ba4:	50 e0       	ldi	r21, 0x00	; 0
     ba6:	14 16       	cp	r1, r20
     ba8:	15 06       	cpc	r1, r21
     baa:	24 f0       	brlt	.+8      	; 0xbb4 <OLED_print+0x1a>
     bac:	25 c0       	rjmp	.+74     	; 0xbf8 <OLED_print+0x5e>
	current_column = 0;
}

void OLED_print(char character){
	if (character == '\n'){
		OLED_clear_rest_of_line();	
     bae:	0e 94 bd 05 	call	0xb7a	; 0xb7a <OLED_clear_rest_of_line>
     bb2:	08 95       	ret
	}
	else{
		for (int i = 0; i < char_width; i++){
     bb4:	20 e0       	ldi	r18, 0x00	; 0
     bb6:	30 e0       	ldi	r19, 0x00	; 0
			char byte = pgm_read_byte((font + (character-32)*char_width + i));
     bb8:	68 2f       	mov	r22, r24
     bba:	70 e0       	ldi	r23, 0x00	; 0
     bbc:	60 52       	subi	r22, 0x20	; 32
     bbe:	71 09       	sbc	r23, r1
	*OLED_c = c;
}

void OLED_data(char c){
	volatile char* OLED_c = (char*) 0x1200;
	*OLED_c = c; 
     bc0:	a0 e0       	ldi	r26, 0x00	; 0
     bc2:	b2 e1       	ldi	r27, 0x12	; 18
	if (character == '\n'){
		OLED_clear_rest_of_line();	
	}
	else{
		for (int i = 0; i < char_width; i++){
			char byte = pgm_read_byte((font + (character-32)*char_width + i));
     bc4:	46 9f       	mul	r20, r22
     bc6:	f0 01       	movw	r30, r0
     bc8:	47 9f       	mul	r20, r23
     bca:	f0 0d       	add	r31, r0
     bcc:	56 9f       	mul	r21, r22
     bce:	f0 0d       	add	r31, r0
     bd0:	11 24       	eor	r1, r1
     bd2:	e2 0f       	add	r30, r18
     bd4:	f3 1f       	adc	r31, r19
     bd6:	80 91 06 01 	lds	r24, 0x0106
     bda:	90 91 07 01 	lds	r25, 0x0107
     bde:	e8 0f       	add	r30, r24
     be0:	f9 1f       	adc	r31, r25
     be2:	e4 91       	lpm	r30, Z
	*OLED_c = c;
}

void OLED_data(char c){
	volatile char* OLED_c = (char*) 0x1200;
	*OLED_c = c; 
     be4:	ec 93       	st	X, r30
void OLED_print(char character){
	if (character == '\n'){
		OLED_clear_rest_of_line();	
	}
	else{
		for (int i = 0; i < char_width; i++){
     be6:	2f 5f       	subi	r18, 0xFF	; 255
     be8:	3f 4f       	sbci	r19, 0xFF	; 255
     bea:	90 91 08 01 	lds	r25, 0x0108
     bee:	49 2f       	mov	r20, r25
     bf0:	50 e0       	ldi	r21, 0x00	; 0
     bf2:	24 17       	cp	r18, r20
     bf4:	35 07       	cpc	r19, r21
     bf6:	34 f3       	brlt	.-52     	; 0xbc4 <OLED_print+0x2a>
			char byte = pgm_read_byte((font + (character-32)*char_width + i));
			OLED_data(byte);
		}
		if ((current_column+char_width)>127){
     bf8:	80 91 bb 01 	lds	r24, 0x01BB
     bfc:	48 0f       	add	r20, r24
     bfe:	51 1d       	adc	r21, r1
     c00:	40 38       	cpi	r20, 0x80	; 128
     c02:	51 05       	cpc	r21, r1
     c04:	1c f0       	brlt	.+6      	; 0xc0c <OLED_print+0x72>
			current_column = 0;
     c06:	10 92 bb 01 	sts	0x01BB, r1
     c0a:	08 95       	ret
		}
		else{
			current_column += char_width;
     c0c:	98 0f       	add	r25, r24
     c0e:	90 93 bb 01 	sts	0x01BB, r25
     c12:	08 95       	ret

00000c14 <OLED_print_string>:
		}
	}
}

void OLED_print_string(char string[]){
     c14:	ef 92       	push	r14
     c16:	ff 92       	push	r15
     c18:	0f 93       	push	r16
     c1a:	1f 93       	push	r17
     c1c:	cf 93       	push	r28
     c1e:	df 93       	push	r29
     c20:	8c 01       	movw	r16, r24
     c22:	7c 01       	movw	r14, r24
	for(int i = 0; i < strlen(string); i++){
     c24:	c0 e0       	ldi	r28, 0x00	; 0
     c26:	d0 e0       	ldi	r29, 0x00	; 0
     c28:	06 c0       	rjmp	.+12     	; 0xc36 <OLED_print_string+0x22>
		OLED_print(string[i]);
     c2a:	f7 01       	movw	r30, r14
     c2c:	81 91       	ld	r24, Z+
     c2e:	7f 01       	movw	r14, r30
     c30:	0e 94 cd 05 	call	0xb9a	; 0xb9a <OLED_print>
		}
	}
}

void OLED_print_string(char string[]){
	for(int i = 0; i < strlen(string); i++){
     c34:	21 96       	adiw	r28, 0x01	; 1
     c36:	f8 01       	movw	r30, r16
     c38:	01 90       	ld	r0, Z+
     c3a:	00 20       	and	r0, r0
     c3c:	e9 f7       	brne	.-6      	; 0xc38 <OLED_print_string+0x24>
     c3e:	31 97       	sbiw	r30, 0x01	; 1
     c40:	e0 1b       	sub	r30, r16
     c42:	f1 0b       	sbc	r31, r17
     c44:	ce 17       	cp	r28, r30
     c46:	df 07       	cpc	r29, r31
     c48:	80 f3       	brcs	.-32     	; 0xc2a <OLED_print_string+0x16>
		OLED_print(string[i]);
	}
}
     c4a:	df 91       	pop	r29
     c4c:	cf 91       	pop	r28
     c4e:	1f 91       	pop	r17
     c50:	0f 91       	pop	r16
     c52:	ff 90       	pop	r15
     c54:	ef 90       	pop	r14
     c56:	08 95       	ret

00000c58 <SPI_init>:
#include "SPI_driver.h"

void SPI_init(void){
	/* Set MOSI, SCK and SS output, all others input */
	DDRB = (1<<PB5)|(1<<PB7)|(1<<PB4);
     c58:	80 eb       	ldi	r24, 0xB0	; 176
     c5a:	87 bb       	out	0x17, r24	; 23
	/* Enable SPI, Master, set clock rate fck/16 */
	SPCR = (1<<SPE)|(1<<MSTR)|(1<<SPR0);
     c5c:	81 e5       	ldi	r24, 0x51	; 81
     c5e:	8d b9       	out	0x0d, r24	; 13
     c60:	08 95       	ret

00000c62 <SPI_transmit>:
}

void SPI_transmit(char cData){
	/* Start transmission */
	SPDR = cData;
     c62:	8f b9       	out	0x0f, r24	; 15
	/* Wait for transmission complete */
	while(!(SPSR & (1<<SPIF)));
     c64:	77 9b       	sbis	0x0e, 7	; 14
     c66:	fe cf       	rjmp	.-4      	; 0xc64 <SPI_transmit+0x2>
}
     c68:	08 95       	ret

00000c6a <SPI_receive>:

char SPI_receive(){
	SPI_transmit(0x00);
     c6a:	80 e0       	ldi	r24, 0x00	; 0
     c6c:	0e 94 31 06 	call	0xc62	; 0xc62 <SPI_transmit>
	return SPDR;
     c70:	8f b1       	in	r24, 0x0f	; 15
}
     c72:	08 95       	ret

00000c74 <SPI_enable>:

void SPI_enable(){
		PORTB &= ~(1<<PINB4);
     c74:	c4 98       	cbi	0x18, 4	; 24
     c76:	08 95       	ret

00000c78 <SPI_disable>:
}

void SPI_disable(){
	PORTB |= (1<<PINB4);
     c78:	c4 9a       	sbi	0x18, 4	; 24
     c7a:	08 95       	ret

00000c7c <main>:
#include "definitions.h"



int main(void)
{	
     c7c:	cf 93       	push	r28
     c7e:	df 93       	push	r29
     c80:	cd b7       	in	r28, 0x3d	; 61
     c82:	de b7       	in	r29, 0x3e	; 62
     c84:	27 97       	sbiw	r28, 0x07	; 7
     c86:	0f b6       	in	r0, 0x3f	; 63
     c88:	f8 94       	cli
     c8a:	de bf       	out	0x3e, r29	; 62
     c8c:	0f be       	out	0x3f, r0	; 63
     c8e:	cd bf       	out	0x3d, r28	; 61
	int ubrr = (F_CPU/16/9600)-1;
	UART_Init(ubrr);
     c90:	8f e1       	ldi	r24, 0x1F	; 31
     c92:	90 e0       	ldi	r25, 0x00	; 0
     c94:	0e 94 a3 06 	call	0xd46	; 0xd46 <UART_Init>
	can_init(MODE_NORMAL);
     c98:	80 e0       	ldi	r24, 0x00	; 0
     c9a:	0e 94 29 01 	call	0x252	; 0x252 <can_init>
	JOY_init();
     c9e:	0e 94 e1 04 	call	0x9c2	; 0x9c2 <JOY_init>
	OLED_init();
     ca2:	0e 94 77 05 	call	0xaee	; 0xaee <OLED_init>
	menuitem* current_menu = menu_init();
     ca6:	0e 94 20 03 	call	0x640	; 0x640 <menu_init>
     caa:	8c 01       	movw	r16, r24
	
	JOY_position_t pos;
	
	uint8_t settings[] = {	MAINMENU,  // Game mode
     cac:	19 82       	std	Y+1, r1	; 0x01
     cae:	1a 82       	std	Y+2, r1	; 0x02
     cb0:	81 e0       	ldi	r24, 0x01	; 1
     cb2:	8b 83       	std	Y+3, r24	; 0x03
							SPEEDCTRL, // Control type
							MULTICARD  // Joystick type
	};
	
	uint8_t time[] = { 0,0,0 };	
     cb4:	1c 82       	std	Y+4, r1	; 0x04
     cb6:	1d 82       	std	Y+5, r1	; 0x05
     cb8:	1e 82       	std	Y+6, r1	; 0x06
		
	uint8_t prev_dir = NEUTRAL;
     cba:	84 e0       	ldi	r24, 0x04	; 4
     cbc:	8f 83       	std	Y+7, r24	; 0x07
			//time[1] = msg_received.data[1];
			//time[2] = msg_received.data[2];
		//}
		
		
		switch (settings[0]){
     cbe:	89 81       	ldd	r24, Y+1	; 0x01
     cc0:	88 23       	and	r24, r24
     cc2:	19 f0       	breq	.+6      	; 0xcca <main+0x4e>
     cc4:	81 30       	cpi	r24, 0x01	; 1
     cc6:	79 f0       	breq	.+30     	; 0xce6 <main+0x6a>
     cc8:	fb cf       	rjmp	.-10     	; 0xcc0 <main+0x44>
			case MAINMENU:
				menu_print(current_menu);
     cca:	c8 01       	movw	r24, r16
     ccc:	0e 94 ed 03 	call	0x7da	; 0x7da <menu_print>
				current_menu = menu_move(current_menu, &prev_dir, settings);
     cd0:	ae 01       	movw	r20, r28
     cd2:	4f 5f       	subi	r20, 0xFF	; 255
     cd4:	5f 4f       	sbci	r21, 0xFF	; 255
     cd6:	be 01       	movw	r22, r28
     cd8:	69 5f       	subi	r22, 0xF9	; 249
     cda:	7f 4f       	sbci	r23, 0xFF	; 255
     cdc:	c8 01       	movw	r24, r16
     cde:	0e 94 37 04 	call	0x86e	; 0x86e <menu_move>
     ce2:	8c 01       	movw	r16, r24
				//printf("Setup: %d %d %d \n", settings[0], settings[1], settings[2]);
				break;
     ce4:	ec cf       	rjmp	.-40     	; 0xcbe <main+0x42>
			case SINGLEPLAYERMENU:
				menu_print_singleplayer(time);
     ce6:	ce 01       	movw	r24, r28
     ce8:	04 96       	adiw	r24, 0x04	; 4
     cea:	0e 94 95 04 	call	0x92a	; 0x92a <menu_print_singleplayer>
				if (JOY_button(0)){
     cee:	80 e0       	ldi	r24, 0x00	; 0
     cf0:	90 e0       	ldi	r25, 0x00	; 0
     cf2:	0e 94 ec 04 	call	0x9d8	; 0x9d8 <JOY_button>
     cf6:	81 11       	cpse	r24, r1
					settings[0] = MAINMENU;
     cf8:	19 82       	std	Y+1, r1	; 0x01
				}
				if (time[0] < 60){
     cfa:	8c 81       	ldd	r24, Y+4	; 0x04
     cfc:	8c 33       	cpi	r24, 0x3C	; 60
     cfe:	88 f4       	brcc	.+34     	; 0xd22 <main+0xa6>
					if (time[1] < 60){
     d00:	9d 81       	ldd	r25, Y+5	; 0x05
     d02:	9c 33       	cpi	r25, 0x3C	; 60
     d04:	50 f4       	brcc	.+20     	; 0xd1a <main+0x9e>
						if (time[2] < 100){
     d06:	8e 81       	ldd	r24, Y+6	; 0x06
     d08:	84 36       	cpi	r24, 0x64	; 100
     d0a:	18 f4       	brcc	.+6      	; 0xd12 <main+0x96>
							time[2]++;
     d0c:	8f 5f       	subi	r24, 0xFF	; 255
     d0e:	8e 83       	std	Y+6, r24	; 0x06
     d10:	0b c0       	rjmp	.+22     	; 0xd28 <main+0xac>
							} else {
							time[2] = 0;
     d12:	1e 82       	std	Y+6, r1	; 0x06
							time[1]++;
     d14:	9f 5f       	subi	r25, 0xFF	; 255
     d16:	9d 83       	std	Y+5, r25	; 0x05
     d18:	07 c0       	rjmp	.+14     	; 0xd28 <main+0xac>
						}
						} else{
						time[1] = 0;
     d1a:	1d 82       	std	Y+5, r1	; 0x05
						time[0]++;
     d1c:	8f 5f       	subi	r24, 0xFF	; 255
     d1e:	8c 83       	std	Y+4, r24	; 0x04
     d20:	03 c0       	rjmp	.+6      	; 0xd28 <main+0xac>
					}
					} else {
					time[0] = 0;
     d22:	1c 82       	std	Y+4, r1	; 0x04
					time[1] = 0;
     d24:	1d 82       	std	Y+5, r1	; 0x05
					time[2] = 0;
     d26:	1e 82       	std	Y+6, r1	; 0x06
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     d28:	8f ef       	ldi	r24, 0xFF	; 255
     d2a:	97 e1       	ldi	r25, 0x17	; 23
     d2c:	01 97       	sbiw	r24, 0x01	; 1
     d2e:	f1 f7       	brne	.-4      	; 0xd2c <main+0xb0>
     d30:	00 c0       	rjmp	.+0      	; 0xd32 <main+0xb6>
     d32:	00 00       	nop
     d34:	c4 cf       	rjmp	.-120    	; 0xcbe <main+0x42>

00000d36 <UART_Transmit>:
     d36:	5d 9b       	sbis	0x0b, 5	; 11
     d38:	fe cf       	rjmp	.-4      	; 0xd36 <UART_Transmit>
     d3a:	8c b9       	out	0x0c, r24	; 12
     d3c:	08 95       	ret

00000d3e <UART_Receive>:
     d3e:	5f 9b       	sbis	0x0b, 7	; 11
     d40:	fe cf       	rjmp	.-4      	; 0xd3e <UART_Receive>
     d42:	8c b1       	in	r24, 0x0c	; 12
     d44:	08 95       	ret

00000d46 <UART_Init>:
     d46:	90 bd       	out	0x20, r25	; 32
     d48:	89 b9       	out	0x09, r24	; 9
     d4a:	88 e1       	ldi	r24, 0x18	; 24
     d4c:	8a b9       	out	0x0a, r24	; 10
     d4e:	6f e9       	ldi	r22, 0x9F	; 159
     d50:	76 e0       	ldi	r23, 0x06	; 6
     d52:	8b e9       	ldi	r24, 0x9B	; 155
     d54:	96 e0       	ldi	r25, 0x06	; 6
     d56:	0e 94 fd 07 	call	0xffa	; 0xffa <fdevopen>
     d5a:	08 95       	ret

00000d5c <__divmodhi4>:
     d5c:	97 fb       	bst	r25, 7
     d5e:	07 2e       	mov	r0, r23
     d60:	16 f4       	brtc	.+4      	; 0xd66 <__divmodhi4+0xa>
     d62:	00 94       	com	r0
     d64:	07 d0       	rcall	.+14     	; 0xd74 <__divmodhi4_neg1>
     d66:	77 fd       	sbrc	r23, 7
     d68:	09 d0       	rcall	.+18     	; 0xd7c <__divmodhi4_neg2>
     d6a:	0e 94 c2 06 	call	0xd84	; 0xd84 <__udivmodhi4>
     d6e:	07 fc       	sbrc	r0, 7
     d70:	05 d0       	rcall	.+10     	; 0xd7c <__divmodhi4_neg2>
     d72:	3e f4       	brtc	.+14     	; 0xd82 <__divmodhi4_exit>

00000d74 <__divmodhi4_neg1>:
     d74:	90 95       	com	r25
     d76:	81 95       	neg	r24
     d78:	9f 4f       	sbci	r25, 0xFF	; 255
     d7a:	08 95       	ret

00000d7c <__divmodhi4_neg2>:
     d7c:	70 95       	com	r23
     d7e:	61 95       	neg	r22
     d80:	7f 4f       	sbci	r23, 0xFF	; 255

00000d82 <__divmodhi4_exit>:
     d82:	08 95       	ret

00000d84 <__udivmodhi4>:
     d84:	aa 1b       	sub	r26, r26
     d86:	bb 1b       	sub	r27, r27
     d88:	51 e1       	ldi	r21, 0x11	; 17
     d8a:	07 c0       	rjmp	.+14     	; 0xd9a <__udivmodhi4_ep>

00000d8c <__udivmodhi4_loop>:
     d8c:	aa 1f       	adc	r26, r26
     d8e:	bb 1f       	adc	r27, r27
     d90:	a6 17       	cp	r26, r22
     d92:	b7 07       	cpc	r27, r23
     d94:	10 f0       	brcs	.+4      	; 0xd9a <__udivmodhi4_ep>
     d96:	a6 1b       	sub	r26, r22
     d98:	b7 0b       	sbc	r27, r23

00000d9a <__udivmodhi4_ep>:
     d9a:	88 1f       	adc	r24, r24
     d9c:	99 1f       	adc	r25, r25
     d9e:	5a 95       	dec	r21
     da0:	a9 f7       	brne	.-22     	; 0xd8c <__udivmodhi4_loop>
     da2:	80 95       	com	r24
     da4:	90 95       	com	r25
     da6:	bc 01       	movw	r22, r24
     da8:	cd 01       	movw	r24, r26
     daa:	08 95       	ret

00000dac <malloc>:
     dac:	cf 93       	push	r28
     dae:	df 93       	push	r29
     db0:	82 30       	cpi	r24, 0x02	; 2
     db2:	91 05       	cpc	r25, r1
     db4:	10 f4       	brcc	.+4      	; 0xdba <malloc+0xe>
     db6:	82 e0       	ldi	r24, 0x02	; 2
     db8:	90 e0       	ldi	r25, 0x00	; 0
     dba:	e0 91 be 01 	lds	r30, 0x01BE
     dbe:	f0 91 bf 01 	lds	r31, 0x01BF
     dc2:	20 e0       	ldi	r18, 0x00	; 0
     dc4:	30 e0       	ldi	r19, 0x00	; 0
     dc6:	a0 e0       	ldi	r26, 0x00	; 0
     dc8:	b0 e0       	ldi	r27, 0x00	; 0
     dca:	30 97       	sbiw	r30, 0x00	; 0
     dcc:	39 f1       	breq	.+78     	; 0xe1c <malloc+0x70>
     dce:	40 81       	ld	r20, Z
     dd0:	51 81       	ldd	r21, Z+1	; 0x01
     dd2:	48 17       	cp	r20, r24
     dd4:	59 07       	cpc	r21, r25
     dd6:	b8 f0       	brcs	.+46     	; 0xe06 <malloc+0x5a>
     dd8:	48 17       	cp	r20, r24
     dda:	59 07       	cpc	r21, r25
     ddc:	71 f4       	brne	.+28     	; 0xdfa <malloc+0x4e>
     dde:	82 81       	ldd	r24, Z+2	; 0x02
     de0:	93 81       	ldd	r25, Z+3	; 0x03
     de2:	10 97       	sbiw	r26, 0x00	; 0
     de4:	29 f0       	breq	.+10     	; 0xdf0 <malloc+0x44>
     de6:	13 96       	adiw	r26, 0x03	; 3
     de8:	9c 93       	st	X, r25
     dea:	8e 93       	st	-X, r24
     dec:	12 97       	sbiw	r26, 0x02	; 2
     dee:	2c c0       	rjmp	.+88     	; 0xe48 <malloc+0x9c>
     df0:	90 93 bf 01 	sts	0x01BF, r25
     df4:	80 93 be 01 	sts	0x01BE, r24
     df8:	27 c0       	rjmp	.+78     	; 0xe48 <malloc+0x9c>
     dfa:	21 15       	cp	r18, r1
     dfc:	31 05       	cpc	r19, r1
     dfe:	31 f0       	breq	.+12     	; 0xe0c <malloc+0x60>
     e00:	42 17       	cp	r20, r18
     e02:	53 07       	cpc	r21, r19
     e04:	18 f0       	brcs	.+6      	; 0xe0c <malloc+0x60>
     e06:	a9 01       	movw	r20, r18
     e08:	db 01       	movw	r26, r22
     e0a:	01 c0       	rjmp	.+2      	; 0xe0e <malloc+0x62>
     e0c:	ef 01       	movw	r28, r30
     e0e:	9a 01       	movw	r18, r20
     e10:	bd 01       	movw	r22, r26
     e12:	df 01       	movw	r26, r30
     e14:	02 80       	ldd	r0, Z+2	; 0x02
     e16:	f3 81       	ldd	r31, Z+3	; 0x03
     e18:	e0 2d       	mov	r30, r0
     e1a:	d7 cf       	rjmp	.-82     	; 0xdca <malloc+0x1e>
     e1c:	21 15       	cp	r18, r1
     e1e:	31 05       	cpc	r19, r1
     e20:	f9 f0       	breq	.+62     	; 0xe60 <malloc+0xb4>
     e22:	28 1b       	sub	r18, r24
     e24:	39 0b       	sbc	r19, r25
     e26:	24 30       	cpi	r18, 0x04	; 4
     e28:	31 05       	cpc	r19, r1
     e2a:	80 f4       	brcc	.+32     	; 0xe4c <malloc+0xa0>
     e2c:	8a 81       	ldd	r24, Y+2	; 0x02
     e2e:	9b 81       	ldd	r25, Y+3	; 0x03
     e30:	61 15       	cp	r22, r1
     e32:	71 05       	cpc	r23, r1
     e34:	21 f0       	breq	.+8      	; 0xe3e <malloc+0x92>
     e36:	fb 01       	movw	r30, r22
     e38:	93 83       	std	Z+3, r25	; 0x03
     e3a:	82 83       	std	Z+2, r24	; 0x02
     e3c:	04 c0       	rjmp	.+8      	; 0xe46 <malloc+0x9a>
     e3e:	90 93 bf 01 	sts	0x01BF, r25
     e42:	80 93 be 01 	sts	0x01BE, r24
     e46:	fe 01       	movw	r30, r28
     e48:	32 96       	adiw	r30, 0x02	; 2
     e4a:	44 c0       	rjmp	.+136    	; 0xed4 <malloc+0x128>
     e4c:	fe 01       	movw	r30, r28
     e4e:	e2 0f       	add	r30, r18
     e50:	f3 1f       	adc	r31, r19
     e52:	81 93       	st	Z+, r24
     e54:	91 93       	st	Z+, r25
     e56:	22 50       	subi	r18, 0x02	; 2
     e58:	31 09       	sbc	r19, r1
     e5a:	39 83       	std	Y+1, r19	; 0x01
     e5c:	28 83       	st	Y, r18
     e5e:	3a c0       	rjmp	.+116    	; 0xed4 <malloc+0x128>
     e60:	20 91 bc 01 	lds	r18, 0x01BC
     e64:	30 91 bd 01 	lds	r19, 0x01BD
     e68:	23 2b       	or	r18, r19
     e6a:	41 f4       	brne	.+16     	; 0xe7c <malloc+0xd0>
     e6c:	20 91 02 01 	lds	r18, 0x0102
     e70:	30 91 03 01 	lds	r19, 0x0103
     e74:	30 93 bd 01 	sts	0x01BD, r19
     e78:	20 93 bc 01 	sts	0x01BC, r18
     e7c:	20 91 00 01 	lds	r18, 0x0100
     e80:	30 91 01 01 	lds	r19, 0x0101
     e84:	21 15       	cp	r18, r1
     e86:	31 05       	cpc	r19, r1
     e88:	41 f4       	brne	.+16     	; 0xe9a <malloc+0xee>
     e8a:	2d b7       	in	r18, 0x3d	; 61
     e8c:	3e b7       	in	r19, 0x3e	; 62
     e8e:	40 91 04 01 	lds	r20, 0x0104
     e92:	50 91 05 01 	lds	r21, 0x0105
     e96:	24 1b       	sub	r18, r20
     e98:	35 0b       	sbc	r19, r21
     e9a:	e0 91 bc 01 	lds	r30, 0x01BC
     e9e:	f0 91 bd 01 	lds	r31, 0x01BD
     ea2:	e2 17       	cp	r30, r18
     ea4:	f3 07       	cpc	r31, r19
     ea6:	a0 f4       	brcc	.+40     	; 0xed0 <malloc+0x124>
     ea8:	2e 1b       	sub	r18, r30
     eaa:	3f 0b       	sbc	r19, r31
     eac:	28 17       	cp	r18, r24
     eae:	39 07       	cpc	r19, r25
     eb0:	78 f0       	brcs	.+30     	; 0xed0 <malloc+0x124>
     eb2:	ac 01       	movw	r20, r24
     eb4:	4e 5f       	subi	r20, 0xFE	; 254
     eb6:	5f 4f       	sbci	r21, 0xFF	; 255
     eb8:	24 17       	cp	r18, r20
     eba:	35 07       	cpc	r19, r21
     ebc:	48 f0       	brcs	.+18     	; 0xed0 <malloc+0x124>
     ebe:	4e 0f       	add	r20, r30
     ec0:	5f 1f       	adc	r21, r31
     ec2:	50 93 bd 01 	sts	0x01BD, r21
     ec6:	40 93 bc 01 	sts	0x01BC, r20
     eca:	81 93       	st	Z+, r24
     ecc:	91 93       	st	Z+, r25
     ece:	02 c0       	rjmp	.+4      	; 0xed4 <malloc+0x128>
     ed0:	e0 e0       	ldi	r30, 0x00	; 0
     ed2:	f0 e0       	ldi	r31, 0x00	; 0
     ed4:	cf 01       	movw	r24, r30
     ed6:	df 91       	pop	r29
     ed8:	cf 91       	pop	r28
     eda:	08 95       	ret

00000edc <free>:
     edc:	cf 93       	push	r28
     ede:	df 93       	push	r29
     ee0:	00 97       	sbiw	r24, 0x00	; 0
     ee2:	09 f4       	brne	.+2      	; 0xee6 <free+0xa>
     ee4:	87 c0       	rjmp	.+270    	; 0xff4 <free+0x118>
     ee6:	fc 01       	movw	r30, r24
     ee8:	32 97       	sbiw	r30, 0x02	; 2
     eea:	13 82       	std	Z+3, r1	; 0x03
     eec:	12 82       	std	Z+2, r1	; 0x02
     eee:	c0 91 be 01 	lds	r28, 0x01BE
     ef2:	d0 91 bf 01 	lds	r29, 0x01BF
     ef6:	20 97       	sbiw	r28, 0x00	; 0
     ef8:	81 f4       	brne	.+32     	; 0xf1a <free+0x3e>
     efa:	20 81       	ld	r18, Z
     efc:	31 81       	ldd	r19, Z+1	; 0x01
     efe:	28 0f       	add	r18, r24
     f00:	39 1f       	adc	r19, r25
     f02:	80 91 bc 01 	lds	r24, 0x01BC
     f06:	90 91 bd 01 	lds	r25, 0x01BD
     f0a:	82 17       	cp	r24, r18
     f0c:	93 07       	cpc	r25, r19
     f0e:	79 f5       	brne	.+94     	; 0xf6e <free+0x92>
     f10:	f0 93 bd 01 	sts	0x01BD, r31
     f14:	e0 93 bc 01 	sts	0x01BC, r30
     f18:	6d c0       	rjmp	.+218    	; 0xff4 <free+0x118>
     f1a:	de 01       	movw	r26, r28
     f1c:	20 e0       	ldi	r18, 0x00	; 0
     f1e:	30 e0       	ldi	r19, 0x00	; 0
     f20:	ae 17       	cp	r26, r30
     f22:	bf 07       	cpc	r27, r31
     f24:	50 f4       	brcc	.+20     	; 0xf3a <free+0x5e>
     f26:	12 96       	adiw	r26, 0x02	; 2
     f28:	4d 91       	ld	r20, X+
     f2a:	5c 91       	ld	r21, X
     f2c:	13 97       	sbiw	r26, 0x03	; 3
     f2e:	9d 01       	movw	r18, r26
     f30:	41 15       	cp	r20, r1
     f32:	51 05       	cpc	r21, r1
     f34:	09 f1       	breq	.+66     	; 0xf78 <free+0x9c>
     f36:	da 01       	movw	r26, r20
     f38:	f3 cf       	rjmp	.-26     	; 0xf20 <free+0x44>
     f3a:	b3 83       	std	Z+3, r27	; 0x03
     f3c:	a2 83       	std	Z+2, r26	; 0x02
     f3e:	40 81       	ld	r20, Z
     f40:	51 81       	ldd	r21, Z+1	; 0x01
     f42:	84 0f       	add	r24, r20
     f44:	95 1f       	adc	r25, r21
     f46:	8a 17       	cp	r24, r26
     f48:	9b 07       	cpc	r25, r27
     f4a:	71 f4       	brne	.+28     	; 0xf68 <free+0x8c>
     f4c:	8d 91       	ld	r24, X+
     f4e:	9c 91       	ld	r25, X
     f50:	11 97       	sbiw	r26, 0x01	; 1
     f52:	84 0f       	add	r24, r20
     f54:	95 1f       	adc	r25, r21
     f56:	02 96       	adiw	r24, 0x02	; 2
     f58:	91 83       	std	Z+1, r25	; 0x01
     f5a:	80 83       	st	Z, r24
     f5c:	12 96       	adiw	r26, 0x02	; 2
     f5e:	8d 91       	ld	r24, X+
     f60:	9c 91       	ld	r25, X
     f62:	13 97       	sbiw	r26, 0x03	; 3
     f64:	93 83       	std	Z+3, r25	; 0x03
     f66:	82 83       	std	Z+2, r24	; 0x02
     f68:	21 15       	cp	r18, r1
     f6a:	31 05       	cpc	r19, r1
     f6c:	29 f4       	brne	.+10     	; 0xf78 <free+0x9c>
     f6e:	f0 93 bf 01 	sts	0x01BF, r31
     f72:	e0 93 be 01 	sts	0x01BE, r30
     f76:	3e c0       	rjmp	.+124    	; 0xff4 <free+0x118>
     f78:	d9 01       	movw	r26, r18
     f7a:	13 96       	adiw	r26, 0x03	; 3
     f7c:	fc 93       	st	X, r31
     f7e:	ee 93       	st	-X, r30
     f80:	12 97       	sbiw	r26, 0x02	; 2
     f82:	4d 91       	ld	r20, X+
     f84:	5d 91       	ld	r21, X+
     f86:	a4 0f       	add	r26, r20
     f88:	b5 1f       	adc	r27, r21
     f8a:	ea 17       	cp	r30, r26
     f8c:	fb 07       	cpc	r31, r27
     f8e:	79 f4       	brne	.+30     	; 0xfae <free+0xd2>
     f90:	80 81       	ld	r24, Z
     f92:	91 81       	ldd	r25, Z+1	; 0x01
     f94:	84 0f       	add	r24, r20
     f96:	95 1f       	adc	r25, r21
     f98:	02 96       	adiw	r24, 0x02	; 2
     f9a:	d9 01       	movw	r26, r18
     f9c:	11 96       	adiw	r26, 0x01	; 1
     f9e:	9c 93       	st	X, r25
     fa0:	8e 93       	st	-X, r24
     fa2:	82 81       	ldd	r24, Z+2	; 0x02
     fa4:	93 81       	ldd	r25, Z+3	; 0x03
     fa6:	13 96       	adiw	r26, 0x03	; 3
     fa8:	9c 93       	st	X, r25
     faa:	8e 93       	st	-X, r24
     fac:	12 97       	sbiw	r26, 0x02	; 2
     fae:	e0 e0       	ldi	r30, 0x00	; 0
     fb0:	f0 e0       	ldi	r31, 0x00	; 0
     fb2:	8a 81       	ldd	r24, Y+2	; 0x02
     fb4:	9b 81       	ldd	r25, Y+3	; 0x03
     fb6:	00 97       	sbiw	r24, 0x00	; 0
     fb8:	19 f0       	breq	.+6      	; 0xfc0 <free+0xe4>
     fba:	fe 01       	movw	r30, r28
     fbc:	ec 01       	movw	r28, r24
     fbe:	f9 cf       	rjmp	.-14     	; 0xfb2 <free+0xd6>
     fc0:	ce 01       	movw	r24, r28
     fc2:	02 96       	adiw	r24, 0x02	; 2
     fc4:	28 81       	ld	r18, Y
     fc6:	39 81       	ldd	r19, Y+1	; 0x01
     fc8:	82 0f       	add	r24, r18
     fca:	93 1f       	adc	r25, r19
     fcc:	20 91 bc 01 	lds	r18, 0x01BC
     fd0:	30 91 bd 01 	lds	r19, 0x01BD
     fd4:	28 17       	cp	r18, r24
     fd6:	39 07       	cpc	r19, r25
     fd8:	69 f4       	brne	.+26     	; 0xff4 <free+0x118>
     fda:	30 97       	sbiw	r30, 0x00	; 0
     fdc:	29 f4       	brne	.+10     	; 0xfe8 <free+0x10c>
     fde:	10 92 bf 01 	sts	0x01BF, r1
     fe2:	10 92 be 01 	sts	0x01BE, r1
     fe6:	02 c0       	rjmp	.+4      	; 0xfec <free+0x110>
     fe8:	13 82       	std	Z+3, r1	; 0x03
     fea:	12 82       	std	Z+2, r1	; 0x02
     fec:	d0 93 bd 01 	sts	0x01BD, r29
     ff0:	c0 93 bc 01 	sts	0x01BC, r28
     ff4:	df 91       	pop	r29
     ff6:	cf 91       	pop	r28
     ff8:	08 95       	ret

00000ffa <fdevopen>:
     ffa:	0f 93       	push	r16
     ffc:	1f 93       	push	r17
     ffe:	cf 93       	push	r28
    1000:	df 93       	push	r29
    1002:	ec 01       	movw	r28, r24
    1004:	8b 01       	movw	r16, r22
    1006:	00 97       	sbiw	r24, 0x00	; 0
    1008:	31 f4       	brne	.+12     	; 0x1016 <fdevopen+0x1c>
    100a:	61 15       	cp	r22, r1
    100c:	71 05       	cpc	r23, r1
    100e:	19 f4       	brne	.+6      	; 0x1016 <fdevopen+0x1c>
    1010:	80 e0       	ldi	r24, 0x00	; 0
    1012:	90 e0       	ldi	r25, 0x00	; 0
    1014:	38 c0       	rjmp	.+112    	; 0x1086 <fdevopen+0x8c>
    1016:	6e e0       	ldi	r22, 0x0E	; 14
    1018:	70 e0       	ldi	r23, 0x00	; 0
    101a:	81 e0       	ldi	r24, 0x01	; 1
    101c:	90 e0       	ldi	r25, 0x00	; 0
    101e:	0e 94 3c 0a 	call	0x1478	; 0x1478 <calloc>
    1022:	fc 01       	movw	r30, r24
    1024:	00 97       	sbiw	r24, 0x00	; 0
    1026:	a1 f3       	breq	.-24     	; 0x1010 <fdevopen+0x16>
    1028:	80 e8       	ldi	r24, 0x80	; 128
    102a:	83 83       	std	Z+3, r24	; 0x03
    102c:	01 15       	cp	r16, r1
    102e:	11 05       	cpc	r17, r1
    1030:	71 f0       	breq	.+28     	; 0x104e <fdevopen+0x54>
    1032:	13 87       	std	Z+11, r17	; 0x0b
    1034:	02 87       	std	Z+10, r16	; 0x0a
    1036:	81 e8       	ldi	r24, 0x81	; 129
    1038:	83 83       	std	Z+3, r24	; 0x03
    103a:	80 91 c0 01 	lds	r24, 0x01C0
    103e:	90 91 c1 01 	lds	r25, 0x01C1
    1042:	89 2b       	or	r24, r25
    1044:	21 f4       	brne	.+8      	; 0x104e <fdevopen+0x54>
    1046:	f0 93 c1 01 	sts	0x01C1, r31
    104a:	e0 93 c0 01 	sts	0x01C0, r30
    104e:	20 97       	sbiw	r28, 0x00	; 0
    1050:	c9 f0       	breq	.+50     	; 0x1084 <fdevopen+0x8a>
    1052:	d1 87       	std	Z+9, r29	; 0x09
    1054:	c0 87       	std	Z+8, r28	; 0x08
    1056:	83 81       	ldd	r24, Z+3	; 0x03
    1058:	82 60       	ori	r24, 0x02	; 2
    105a:	83 83       	std	Z+3, r24	; 0x03
    105c:	80 91 c2 01 	lds	r24, 0x01C2
    1060:	90 91 c3 01 	lds	r25, 0x01C3
    1064:	89 2b       	or	r24, r25
    1066:	71 f4       	brne	.+28     	; 0x1084 <fdevopen+0x8a>
    1068:	f0 93 c3 01 	sts	0x01C3, r31
    106c:	e0 93 c2 01 	sts	0x01C2, r30
    1070:	80 91 c4 01 	lds	r24, 0x01C4
    1074:	90 91 c5 01 	lds	r25, 0x01C5
    1078:	89 2b       	or	r24, r25
    107a:	21 f4       	brne	.+8      	; 0x1084 <fdevopen+0x8a>
    107c:	f0 93 c5 01 	sts	0x01C5, r31
    1080:	e0 93 c4 01 	sts	0x01C4, r30
    1084:	cf 01       	movw	r24, r30
    1086:	df 91       	pop	r29
    1088:	cf 91       	pop	r28
    108a:	1f 91       	pop	r17
    108c:	0f 91       	pop	r16
    108e:	08 95       	ret

00001090 <sprintf>:
    1090:	ae e0       	ldi	r26, 0x0E	; 14
    1092:	b0 e0       	ldi	r27, 0x00	; 0
    1094:	ee e4       	ldi	r30, 0x4E	; 78
    1096:	f8 e0       	ldi	r31, 0x08	; 8
    1098:	0c 94 13 0b 	jmp	0x1626	; 0x1626 <__prologue_saves__+0x1c>
    109c:	0d 89       	ldd	r16, Y+21	; 0x15
    109e:	1e 89       	ldd	r17, Y+22	; 0x16
    10a0:	86 e0       	ldi	r24, 0x06	; 6
    10a2:	8c 83       	std	Y+4, r24	; 0x04
    10a4:	1a 83       	std	Y+2, r17	; 0x02
    10a6:	09 83       	std	Y+1, r16	; 0x01
    10a8:	8f ef       	ldi	r24, 0xFF	; 255
    10aa:	9f e7       	ldi	r25, 0x7F	; 127
    10ac:	9e 83       	std	Y+6, r25	; 0x06
    10ae:	8d 83       	std	Y+5, r24	; 0x05
    10b0:	ae 01       	movw	r20, r28
    10b2:	47 5e       	subi	r20, 0xE7	; 231
    10b4:	5f 4f       	sbci	r21, 0xFF	; 255
    10b6:	6f 89       	ldd	r22, Y+23	; 0x17
    10b8:	78 8d       	ldd	r23, Y+24	; 0x18
    10ba:	ce 01       	movw	r24, r28
    10bc:	01 96       	adiw	r24, 0x01	; 1
    10be:	0e 94 6a 08 	call	0x10d4	; 0x10d4 <vfprintf>
    10c2:	ef 81       	ldd	r30, Y+7	; 0x07
    10c4:	f8 85       	ldd	r31, Y+8	; 0x08
    10c6:	e0 0f       	add	r30, r16
    10c8:	f1 1f       	adc	r31, r17
    10ca:	10 82       	st	Z, r1
    10cc:	2e 96       	adiw	r28, 0x0e	; 14
    10ce:	e4 e0       	ldi	r30, 0x04	; 4
    10d0:	0c 94 2f 0b 	jmp	0x165e	; 0x165e <__epilogue_restores__+0x1c>

000010d4 <vfprintf>:
    10d4:	ac e0       	ldi	r26, 0x0C	; 12
    10d6:	b0 e0       	ldi	r27, 0x00	; 0
    10d8:	e0 e7       	ldi	r30, 0x70	; 112
    10da:	f8 e0       	ldi	r31, 0x08	; 8
    10dc:	0c 94 05 0b 	jmp	0x160a	; 0x160a <__prologue_saves__>
    10e0:	7c 01       	movw	r14, r24
    10e2:	6b 01       	movw	r12, r22
    10e4:	8a 01       	movw	r16, r20
    10e6:	fc 01       	movw	r30, r24
    10e8:	17 82       	std	Z+7, r1	; 0x07
    10ea:	16 82       	std	Z+6, r1	; 0x06
    10ec:	83 81       	ldd	r24, Z+3	; 0x03
    10ee:	81 ff       	sbrs	r24, 1
    10f0:	bd c1       	rjmp	.+890    	; 0x146c <vfprintf+0x398>
    10f2:	ce 01       	movw	r24, r28
    10f4:	01 96       	adiw	r24, 0x01	; 1
    10f6:	4c 01       	movw	r8, r24
    10f8:	f7 01       	movw	r30, r14
    10fa:	93 81       	ldd	r25, Z+3	; 0x03
    10fc:	f6 01       	movw	r30, r12
    10fe:	93 fd       	sbrc	r25, 3
    1100:	85 91       	lpm	r24, Z+
    1102:	93 ff       	sbrs	r25, 3
    1104:	81 91       	ld	r24, Z+
    1106:	6f 01       	movw	r12, r30
    1108:	88 23       	and	r24, r24
    110a:	09 f4       	brne	.+2      	; 0x110e <vfprintf+0x3a>
    110c:	ab c1       	rjmp	.+854    	; 0x1464 <vfprintf+0x390>
    110e:	85 32       	cpi	r24, 0x25	; 37
    1110:	39 f4       	brne	.+14     	; 0x1120 <vfprintf+0x4c>
    1112:	93 fd       	sbrc	r25, 3
    1114:	85 91       	lpm	r24, Z+
    1116:	93 ff       	sbrs	r25, 3
    1118:	81 91       	ld	r24, Z+
    111a:	6f 01       	movw	r12, r30
    111c:	85 32       	cpi	r24, 0x25	; 37
    111e:	29 f4       	brne	.+10     	; 0x112a <vfprintf+0x56>
    1120:	b7 01       	movw	r22, r14
    1122:	90 e0       	ldi	r25, 0x00	; 0
    1124:	0e 94 75 0a 	call	0x14ea	; 0x14ea <fputc>
    1128:	e7 cf       	rjmp	.-50     	; 0x10f8 <vfprintf+0x24>
    112a:	51 2c       	mov	r5, r1
    112c:	31 2c       	mov	r3, r1
    112e:	20 e0       	ldi	r18, 0x00	; 0
    1130:	20 32       	cpi	r18, 0x20	; 32
    1132:	a0 f4       	brcc	.+40     	; 0x115c <vfprintf+0x88>
    1134:	8b 32       	cpi	r24, 0x2B	; 43
    1136:	69 f0       	breq	.+26     	; 0x1152 <vfprintf+0x7e>
    1138:	30 f4       	brcc	.+12     	; 0x1146 <vfprintf+0x72>
    113a:	80 32       	cpi	r24, 0x20	; 32
    113c:	59 f0       	breq	.+22     	; 0x1154 <vfprintf+0x80>
    113e:	83 32       	cpi	r24, 0x23	; 35
    1140:	69 f4       	brne	.+26     	; 0x115c <vfprintf+0x88>
    1142:	20 61       	ori	r18, 0x10	; 16
    1144:	2c c0       	rjmp	.+88     	; 0x119e <vfprintf+0xca>
    1146:	8d 32       	cpi	r24, 0x2D	; 45
    1148:	39 f0       	breq	.+14     	; 0x1158 <vfprintf+0x84>
    114a:	80 33       	cpi	r24, 0x30	; 48
    114c:	39 f4       	brne	.+14     	; 0x115c <vfprintf+0x88>
    114e:	21 60       	ori	r18, 0x01	; 1
    1150:	26 c0       	rjmp	.+76     	; 0x119e <vfprintf+0xca>
    1152:	22 60       	ori	r18, 0x02	; 2
    1154:	24 60       	ori	r18, 0x04	; 4
    1156:	23 c0       	rjmp	.+70     	; 0x119e <vfprintf+0xca>
    1158:	28 60       	ori	r18, 0x08	; 8
    115a:	21 c0       	rjmp	.+66     	; 0x119e <vfprintf+0xca>
    115c:	27 fd       	sbrc	r18, 7
    115e:	27 c0       	rjmp	.+78     	; 0x11ae <vfprintf+0xda>
    1160:	30 ed       	ldi	r19, 0xD0	; 208
    1162:	38 0f       	add	r19, r24
    1164:	3a 30       	cpi	r19, 0x0A	; 10
    1166:	78 f4       	brcc	.+30     	; 0x1186 <vfprintf+0xb2>
    1168:	26 ff       	sbrs	r18, 6
    116a:	06 c0       	rjmp	.+12     	; 0x1178 <vfprintf+0xa4>
    116c:	fa e0       	ldi	r31, 0x0A	; 10
    116e:	5f 9e       	mul	r5, r31
    1170:	30 0d       	add	r19, r0
    1172:	11 24       	eor	r1, r1
    1174:	53 2e       	mov	r5, r19
    1176:	13 c0       	rjmp	.+38     	; 0x119e <vfprintf+0xca>
    1178:	8a e0       	ldi	r24, 0x0A	; 10
    117a:	38 9e       	mul	r3, r24
    117c:	30 0d       	add	r19, r0
    117e:	11 24       	eor	r1, r1
    1180:	33 2e       	mov	r3, r19
    1182:	20 62       	ori	r18, 0x20	; 32
    1184:	0c c0       	rjmp	.+24     	; 0x119e <vfprintf+0xca>
    1186:	8e 32       	cpi	r24, 0x2E	; 46
    1188:	21 f4       	brne	.+8      	; 0x1192 <vfprintf+0xbe>
    118a:	26 fd       	sbrc	r18, 6
    118c:	6b c1       	rjmp	.+726    	; 0x1464 <vfprintf+0x390>
    118e:	20 64       	ori	r18, 0x40	; 64
    1190:	06 c0       	rjmp	.+12     	; 0x119e <vfprintf+0xca>
    1192:	8c 36       	cpi	r24, 0x6C	; 108
    1194:	11 f4       	brne	.+4      	; 0x119a <vfprintf+0xc6>
    1196:	20 68       	ori	r18, 0x80	; 128
    1198:	02 c0       	rjmp	.+4      	; 0x119e <vfprintf+0xca>
    119a:	88 36       	cpi	r24, 0x68	; 104
    119c:	41 f4       	brne	.+16     	; 0x11ae <vfprintf+0xda>
    119e:	f6 01       	movw	r30, r12
    11a0:	93 fd       	sbrc	r25, 3
    11a2:	85 91       	lpm	r24, Z+
    11a4:	93 ff       	sbrs	r25, 3
    11a6:	81 91       	ld	r24, Z+
    11a8:	6f 01       	movw	r12, r30
    11aa:	81 11       	cpse	r24, r1
    11ac:	c1 cf       	rjmp	.-126    	; 0x1130 <vfprintf+0x5c>
    11ae:	98 2f       	mov	r25, r24
    11b0:	9f 7d       	andi	r25, 0xDF	; 223
    11b2:	95 54       	subi	r25, 0x45	; 69
    11b4:	93 30       	cpi	r25, 0x03	; 3
    11b6:	28 f4       	brcc	.+10     	; 0x11c2 <vfprintf+0xee>
    11b8:	0c 5f       	subi	r16, 0xFC	; 252
    11ba:	1f 4f       	sbci	r17, 0xFF	; 255
    11bc:	ff e3       	ldi	r31, 0x3F	; 63
    11be:	f9 83       	std	Y+1, r31	; 0x01
    11c0:	0d c0       	rjmp	.+26     	; 0x11dc <vfprintf+0x108>
    11c2:	83 36       	cpi	r24, 0x63	; 99
    11c4:	31 f0       	breq	.+12     	; 0x11d2 <vfprintf+0xfe>
    11c6:	83 37       	cpi	r24, 0x73	; 115
    11c8:	71 f0       	breq	.+28     	; 0x11e6 <vfprintf+0x112>
    11ca:	83 35       	cpi	r24, 0x53	; 83
    11cc:	09 f0       	breq	.+2      	; 0x11d0 <vfprintf+0xfc>
    11ce:	5b c0       	rjmp	.+182    	; 0x1286 <vfprintf+0x1b2>
    11d0:	22 c0       	rjmp	.+68     	; 0x1216 <vfprintf+0x142>
    11d2:	f8 01       	movw	r30, r16
    11d4:	80 81       	ld	r24, Z
    11d6:	89 83       	std	Y+1, r24	; 0x01
    11d8:	0e 5f       	subi	r16, 0xFE	; 254
    11da:	1f 4f       	sbci	r17, 0xFF	; 255
    11dc:	44 24       	eor	r4, r4
    11de:	43 94       	inc	r4
    11e0:	51 2c       	mov	r5, r1
    11e2:	54 01       	movw	r10, r8
    11e4:	15 c0       	rjmp	.+42     	; 0x1210 <vfprintf+0x13c>
    11e6:	38 01       	movw	r6, r16
    11e8:	f2 e0       	ldi	r31, 0x02	; 2
    11ea:	6f 0e       	add	r6, r31
    11ec:	71 1c       	adc	r7, r1
    11ee:	f8 01       	movw	r30, r16
    11f0:	a0 80       	ld	r10, Z
    11f2:	b1 80       	ldd	r11, Z+1	; 0x01
    11f4:	26 ff       	sbrs	r18, 6
    11f6:	03 c0       	rjmp	.+6      	; 0x11fe <vfprintf+0x12a>
    11f8:	65 2d       	mov	r22, r5
    11fa:	70 e0       	ldi	r23, 0x00	; 0
    11fc:	02 c0       	rjmp	.+4      	; 0x1202 <vfprintf+0x12e>
    11fe:	6f ef       	ldi	r22, 0xFF	; 255
    1200:	7f ef       	ldi	r23, 0xFF	; 255
    1202:	c5 01       	movw	r24, r10
    1204:	2c 87       	std	Y+12, r18	; 0x0c
    1206:	0e 94 6a 0a 	call	0x14d4	; 0x14d4 <strnlen>
    120a:	2c 01       	movw	r4, r24
    120c:	83 01       	movw	r16, r6
    120e:	2c 85       	ldd	r18, Y+12	; 0x0c
    1210:	2f 77       	andi	r18, 0x7F	; 127
    1212:	22 2e       	mov	r2, r18
    1214:	17 c0       	rjmp	.+46     	; 0x1244 <vfprintf+0x170>
    1216:	38 01       	movw	r6, r16
    1218:	f2 e0       	ldi	r31, 0x02	; 2
    121a:	6f 0e       	add	r6, r31
    121c:	71 1c       	adc	r7, r1
    121e:	f8 01       	movw	r30, r16
    1220:	a0 80       	ld	r10, Z
    1222:	b1 80       	ldd	r11, Z+1	; 0x01
    1224:	26 ff       	sbrs	r18, 6
    1226:	03 c0       	rjmp	.+6      	; 0x122e <vfprintf+0x15a>
    1228:	65 2d       	mov	r22, r5
    122a:	70 e0       	ldi	r23, 0x00	; 0
    122c:	02 c0       	rjmp	.+4      	; 0x1232 <vfprintf+0x15e>
    122e:	6f ef       	ldi	r22, 0xFF	; 255
    1230:	7f ef       	ldi	r23, 0xFF	; 255
    1232:	c5 01       	movw	r24, r10
    1234:	2c 87       	std	Y+12, r18	; 0x0c
    1236:	0e 94 58 0a 	call	0x14b0	; 0x14b0 <strnlen_P>
    123a:	2c 01       	movw	r4, r24
    123c:	2c 85       	ldd	r18, Y+12	; 0x0c
    123e:	20 68       	ori	r18, 0x80	; 128
    1240:	22 2e       	mov	r2, r18
    1242:	83 01       	movw	r16, r6
    1244:	23 fc       	sbrc	r2, 3
    1246:	1b c0       	rjmp	.+54     	; 0x127e <vfprintf+0x1aa>
    1248:	83 2d       	mov	r24, r3
    124a:	90 e0       	ldi	r25, 0x00	; 0
    124c:	48 16       	cp	r4, r24
    124e:	59 06       	cpc	r5, r25
    1250:	b0 f4       	brcc	.+44     	; 0x127e <vfprintf+0x1aa>
    1252:	b7 01       	movw	r22, r14
    1254:	80 e2       	ldi	r24, 0x20	; 32
    1256:	90 e0       	ldi	r25, 0x00	; 0
    1258:	0e 94 75 0a 	call	0x14ea	; 0x14ea <fputc>
    125c:	3a 94       	dec	r3
    125e:	f4 cf       	rjmp	.-24     	; 0x1248 <vfprintf+0x174>
    1260:	f5 01       	movw	r30, r10
    1262:	27 fc       	sbrc	r2, 7
    1264:	85 91       	lpm	r24, Z+
    1266:	27 fe       	sbrs	r2, 7
    1268:	81 91       	ld	r24, Z+
    126a:	5f 01       	movw	r10, r30
    126c:	b7 01       	movw	r22, r14
    126e:	90 e0       	ldi	r25, 0x00	; 0
    1270:	0e 94 75 0a 	call	0x14ea	; 0x14ea <fputc>
    1274:	31 10       	cpse	r3, r1
    1276:	3a 94       	dec	r3
    1278:	f1 e0       	ldi	r31, 0x01	; 1
    127a:	4f 1a       	sub	r4, r31
    127c:	51 08       	sbc	r5, r1
    127e:	41 14       	cp	r4, r1
    1280:	51 04       	cpc	r5, r1
    1282:	71 f7       	brne	.-36     	; 0x1260 <vfprintf+0x18c>
    1284:	e5 c0       	rjmp	.+458    	; 0x1450 <vfprintf+0x37c>
    1286:	84 36       	cpi	r24, 0x64	; 100
    1288:	11 f0       	breq	.+4      	; 0x128e <vfprintf+0x1ba>
    128a:	89 36       	cpi	r24, 0x69	; 105
    128c:	39 f5       	brne	.+78     	; 0x12dc <vfprintf+0x208>
    128e:	f8 01       	movw	r30, r16
    1290:	27 ff       	sbrs	r18, 7
    1292:	07 c0       	rjmp	.+14     	; 0x12a2 <vfprintf+0x1ce>
    1294:	60 81       	ld	r22, Z
    1296:	71 81       	ldd	r23, Z+1	; 0x01
    1298:	82 81       	ldd	r24, Z+2	; 0x02
    129a:	93 81       	ldd	r25, Z+3	; 0x03
    129c:	0c 5f       	subi	r16, 0xFC	; 252
    129e:	1f 4f       	sbci	r17, 0xFF	; 255
    12a0:	08 c0       	rjmp	.+16     	; 0x12b2 <vfprintf+0x1de>
    12a2:	60 81       	ld	r22, Z
    12a4:	71 81       	ldd	r23, Z+1	; 0x01
    12a6:	88 27       	eor	r24, r24
    12a8:	77 fd       	sbrc	r23, 7
    12aa:	80 95       	com	r24
    12ac:	98 2f       	mov	r25, r24
    12ae:	0e 5f       	subi	r16, 0xFE	; 254
    12b0:	1f 4f       	sbci	r17, 0xFF	; 255
    12b2:	2f 76       	andi	r18, 0x6F	; 111
    12b4:	b2 2e       	mov	r11, r18
    12b6:	97 ff       	sbrs	r25, 7
    12b8:	09 c0       	rjmp	.+18     	; 0x12cc <vfprintf+0x1f8>
    12ba:	90 95       	com	r25
    12bc:	80 95       	com	r24
    12be:	70 95       	com	r23
    12c0:	61 95       	neg	r22
    12c2:	7f 4f       	sbci	r23, 0xFF	; 255
    12c4:	8f 4f       	sbci	r24, 0xFF	; 255
    12c6:	9f 4f       	sbci	r25, 0xFF	; 255
    12c8:	20 68       	ori	r18, 0x80	; 128
    12ca:	b2 2e       	mov	r11, r18
    12cc:	2a e0       	ldi	r18, 0x0A	; 10
    12ce:	30 e0       	ldi	r19, 0x00	; 0
    12d0:	a4 01       	movw	r20, r8
    12d2:	0e 94 a7 0a 	call	0x154e	; 0x154e <__ultoa_invert>
    12d6:	a8 2e       	mov	r10, r24
    12d8:	a8 18       	sub	r10, r8
    12da:	44 c0       	rjmp	.+136    	; 0x1364 <vfprintf+0x290>
    12dc:	85 37       	cpi	r24, 0x75	; 117
    12de:	29 f4       	brne	.+10     	; 0x12ea <vfprintf+0x216>
    12e0:	2f 7e       	andi	r18, 0xEF	; 239
    12e2:	b2 2e       	mov	r11, r18
    12e4:	2a e0       	ldi	r18, 0x0A	; 10
    12e6:	30 e0       	ldi	r19, 0x00	; 0
    12e8:	25 c0       	rjmp	.+74     	; 0x1334 <vfprintf+0x260>
    12ea:	f2 2f       	mov	r31, r18
    12ec:	f9 7f       	andi	r31, 0xF9	; 249
    12ee:	bf 2e       	mov	r11, r31
    12f0:	8f 36       	cpi	r24, 0x6F	; 111
    12f2:	c1 f0       	breq	.+48     	; 0x1324 <vfprintf+0x250>
    12f4:	18 f4       	brcc	.+6      	; 0x12fc <vfprintf+0x228>
    12f6:	88 35       	cpi	r24, 0x58	; 88
    12f8:	79 f0       	breq	.+30     	; 0x1318 <vfprintf+0x244>
    12fa:	b4 c0       	rjmp	.+360    	; 0x1464 <vfprintf+0x390>
    12fc:	80 37       	cpi	r24, 0x70	; 112
    12fe:	19 f0       	breq	.+6      	; 0x1306 <vfprintf+0x232>
    1300:	88 37       	cpi	r24, 0x78	; 120
    1302:	21 f0       	breq	.+8      	; 0x130c <vfprintf+0x238>
    1304:	af c0       	rjmp	.+350    	; 0x1464 <vfprintf+0x390>
    1306:	2f 2f       	mov	r18, r31
    1308:	20 61       	ori	r18, 0x10	; 16
    130a:	b2 2e       	mov	r11, r18
    130c:	b4 fe       	sbrs	r11, 4
    130e:	0d c0       	rjmp	.+26     	; 0x132a <vfprintf+0x256>
    1310:	8b 2d       	mov	r24, r11
    1312:	84 60       	ori	r24, 0x04	; 4
    1314:	b8 2e       	mov	r11, r24
    1316:	09 c0       	rjmp	.+18     	; 0x132a <vfprintf+0x256>
    1318:	24 ff       	sbrs	r18, 4
    131a:	0a c0       	rjmp	.+20     	; 0x1330 <vfprintf+0x25c>
    131c:	9f 2f       	mov	r25, r31
    131e:	96 60       	ori	r25, 0x06	; 6
    1320:	b9 2e       	mov	r11, r25
    1322:	06 c0       	rjmp	.+12     	; 0x1330 <vfprintf+0x25c>
    1324:	28 e0       	ldi	r18, 0x08	; 8
    1326:	30 e0       	ldi	r19, 0x00	; 0
    1328:	05 c0       	rjmp	.+10     	; 0x1334 <vfprintf+0x260>
    132a:	20 e1       	ldi	r18, 0x10	; 16
    132c:	30 e0       	ldi	r19, 0x00	; 0
    132e:	02 c0       	rjmp	.+4      	; 0x1334 <vfprintf+0x260>
    1330:	20 e1       	ldi	r18, 0x10	; 16
    1332:	32 e0       	ldi	r19, 0x02	; 2
    1334:	f8 01       	movw	r30, r16
    1336:	b7 fe       	sbrs	r11, 7
    1338:	07 c0       	rjmp	.+14     	; 0x1348 <vfprintf+0x274>
    133a:	60 81       	ld	r22, Z
    133c:	71 81       	ldd	r23, Z+1	; 0x01
    133e:	82 81       	ldd	r24, Z+2	; 0x02
    1340:	93 81       	ldd	r25, Z+3	; 0x03
    1342:	0c 5f       	subi	r16, 0xFC	; 252
    1344:	1f 4f       	sbci	r17, 0xFF	; 255
    1346:	06 c0       	rjmp	.+12     	; 0x1354 <vfprintf+0x280>
    1348:	60 81       	ld	r22, Z
    134a:	71 81       	ldd	r23, Z+1	; 0x01
    134c:	80 e0       	ldi	r24, 0x00	; 0
    134e:	90 e0       	ldi	r25, 0x00	; 0
    1350:	0e 5f       	subi	r16, 0xFE	; 254
    1352:	1f 4f       	sbci	r17, 0xFF	; 255
    1354:	a4 01       	movw	r20, r8
    1356:	0e 94 a7 0a 	call	0x154e	; 0x154e <__ultoa_invert>
    135a:	a8 2e       	mov	r10, r24
    135c:	a8 18       	sub	r10, r8
    135e:	fb 2d       	mov	r31, r11
    1360:	ff 77       	andi	r31, 0x7F	; 127
    1362:	bf 2e       	mov	r11, r31
    1364:	b6 fe       	sbrs	r11, 6
    1366:	0b c0       	rjmp	.+22     	; 0x137e <vfprintf+0x2aa>
    1368:	2b 2d       	mov	r18, r11
    136a:	2e 7f       	andi	r18, 0xFE	; 254
    136c:	a5 14       	cp	r10, r5
    136e:	50 f4       	brcc	.+20     	; 0x1384 <vfprintf+0x2b0>
    1370:	b4 fe       	sbrs	r11, 4
    1372:	0a c0       	rjmp	.+20     	; 0x1388 <vfprintf+0x2b4>
    1374:	b2 fc       	sbrc	r11, 2
    1376:	08 c0       	rjmp	.+16     	; 0x1388 <vfprintf+0x2b4>
    1378:	2b 2d       	mov	r18, r11
    137a:	2e 7e       	andi	r18, 0xEE	; 238
    137c:	05 c0       	rjmp	.+10     	; 0x1388 <vfprintf+0x2b4>
    137e:	7a 2c       	mov	r7, r10
    1380:	2b 2d       	mov	r18, r11
    1382:	03 c0       	rjmp	.+6      	; 0x138a <vfprintf+0x2b6>
    1384:	7a 2c       	mov	r7, r10
    1386:	01 c0       	rjmp	.+2      	; 0x138a <vfprintf+0x2b6>
    1388:	75 2c       	mov	r7, r5
    138a:	24 ff       	sbrs	r18, 4
    138c:	0d c0       	rjmp	.+26     	; 0x13a8 <vfprintf+0x2d4>
    138e:	fe 01       	movw	r30, r28
    1390:	ea 0d       	add	r30, r10
    1392:	f1 1d       	adc	r31, r1
    1394:	80 81       	ld	r24, Z
    1396:	80 33       	cpi	r24, 0x30	; 48
    1398:	11 f4       	brne	.+4      	; 0x139e <vfprintf+0x2ca>
    139a:	29 7e       	andi	r18, 0xE9	; 233
    139c:	09 c0       	rjmp	.+18     	; 0x13b0 <vfprintf+0x2dc>
    139e:	22 ff       	sbrs	r18, 2
    13a0:	06 c0       	rjmp	.+12     	; 0x13ae <vfprintf+0x2da>
    13a2:	73 94       	inc	r7
    13a4:	73 94       	inc	r7
    13a6:	04 c0       	rjmp	.+8      	; 0x13b0 <vfprintf+0x2dc>
    13a8:	82 2f       	mov	r24, r18
    13aa:	86 78       	andi	r24, 0x86	; 134
    13ac:	09 f0       	breq	.+2      	; 0x13b0 <vfprintf+0x2dc>
    13ae:	73 94       	inc	r7
    13b0:	23 fd       	sbrc	r18, 3
    13b2:	13 c0       	rjmp	.+38     	; 0x13da <vfprintf+0x306>
    13b4:	20 ff       	sbrs	r18, 0
    13b6:	06 c0       	rjmp	.+12     	; 0x13c4 <vfprintf+0x2f0>
    13b8:	5a 2c       	mov	r5, r10
    13ba:	73 14       	cp	r7, r3
    13bc:	18 f4       	brcc	.+6      	; 0x13c4 <vfprintf+0x2f0>
    13be:	53 0c       	add	r5, r3
    13c0:	57 18       	sub	r5, r7
    13c2:	73 2c       	mov	r7, r3
    13c4:	73 14       	cp	r7, r3
    13c6:	68 f4       	brcc	.+26     	; 0x13e2 <vfprintf+0x30e>
    13c8:	b7 01       	movw	r22, r14
    13ca:	80 e2       	ldi	r24, 0x20	; 32
    13cc:	90 e0       	ldi	r25, 0x00	; 0
    13ce:	2c 87       	std	Y+12, r18	; 0x0c
    13d0:	0e 94 75 0a 	call	0x14ea	; 0x14ea <fputc>
    13d4:	73 94       	inc	r7
    13d6:	2c 85       	ldd	r18, Y+12	; 0x0c
    13d8:	f5 cf       	rjmp	.-22     	; 0x13c4 <vfprintf+0x2f0>
    13da:	73 14       	cp	r7, r3
    13dc:	10 f4       	brcc	.+4      	; 0x13e2 <vfprintf+0x30e>
    13de:	37 18       	sub	r3, r7
    13e0:	01 c0       	rjmp	.+2      	; 0x13e4 <vfprintf+0x310>
    13e2:	31 2c       	mov	r3, r1
    13e4:	24 ff       	sbrs	r18, 4
    13e6:	12 c0       	rjmp	.+36     	; 0x140c <vfprintf+0x338>
    13e8:	b7 01       	movw	r22, r14
    13ea:	80 e3       	ldi	r24, 0x30	; 48
    13ec:	90 e0       	ldi	r25, 0x00	; 0
    13ee:	2c 87       	std	Y+12, r18	; 0x0c
    13f0:	0e 94 75 0a 	call	0x14ea	; 0x14ea <fputc>
    13f4:	2c 85       	ldd	r18, Y+12	; 0x0c
    13f6:	22 ff       	sbrs	r18, 2
    13f8:	17 c0       	rjmp	.+46     	; 0x1428 <vfprintf+0x354>
    13fa:	21 ff       	sbrs	r18, 1
    13fc:	03 c0       	rjmp	.+6      	; 0x1404 <vfprintf+0x330>
    13fe:	88 e5       	ldi	r24, 0x58	; 88
    1400:	90 e0       	ldi	r25, 0x00	; 0
    1402:	02 c0       	rjmp	.+4      	; 0x1408 <vfprintf+0x334>
    1404:	88 e7       	ldi	r24, 0x78	; 120
    1406:	90 e0       	ldi	r25, 0x00	; 0
    1408:	b7 01       	movw	r22, r14
    140a:	0c c0       	rjmp	.+24     	; 0x1424 <vfprintf+0x350>
    140c:	82 2f       	mov	r24, r18
    140e:	86 78       	andi	r24, 0x86	; 134
    1410:	59 f0       	breq	.+22     	; 0x1428 <vfprintf+0x354>
    1412:	21 fd       	sbrc	r18, 1
    1414:	02 c0       	rjmp	.+4      	; 0x141a <vfprintf+0x346>
    1416:	80 e2       	ldi	r24, 0x20	; 32
    1418:	01 c0       	rjmp	.+2      	; 0x141c <vfprintf+0x348>
    141a:	8b e2       	ldi	r24, 0x2B	; 43
    141c:	27 fd       	sbrc	r18, 7
    141e:	8d e2       	ldi	r24, 0x2D	; 45
    1420:	b7 01       	movw	r22, r14
    1422:	90 e0       	ldi	r25, 0x00	; 0
    1424:	0e 94 75 0a 	call	0x14ea	; 0x14ea <fputc>
    1428:	a5 14       	cp	r10, r5
    142a:	38 f4       	brcc	.+14     	; 0x143a <vfprintf+0x366>
    142c:	b7 01       	movw	r22, r14
    142e:	80 e3       	ldi	r24, 0x30	; 48
    1430:	90 e0       	ldi	r25, 0x00	; 0
    1432:	0e 94 75 0a 	call	0x14ea	; 0x14ea <fputc>
    1436:	5a 94       	dec	r5
    1438:	f7 cf       	rjmp	.-18     	; 0x1428 <vfprintf+0x354>
    143a:	aa 94       	dec	r10
    143c:	f4 01       	movw	r30, r8
    143e:	ea 0d       	add	r30, r10
    1440:	f1 1d       	adc	r31, r1
    1442:	80 81       	ld	r24, Z
    1444:	b7 01       	movw	r22, r14
    1446:	90 e0       	ldi	r25, 0x00	; 0
    1448:	0e 94 75 0a 	call	0x14ea	; 0x14ea <fputc>
    144c:	a1 10       	cpse	r10, r1
    144e:	f5 cf       	rjmp	.-22     	; 0x143a <vfprintf+0x366>
    1450:	33 20       	and	r3, r3
    1452:	09 f4       	brne	.+2      	; 0x1456 <vfprintf+0x382>
    1454:	51 ce       	rjmp	.-862    	; 0x10f8 <vfprintf+0x24>
    1456:	b7 01       	movw	r22, r14
    1458:	80 e2       	ldi	r24, 0x20	; 32
    145a:	90 e0       	ldi	r25, 0x00	; 0
    145c:	0e 94 75 0a 	call	0x14ea	; 0x14ea <fputc>
    1460:	3a 94       	dec	r3
    1462:	f6 cf       	rjmp	.-20     	; 0x1450 <vfprintf+0x37c>
    1464:	f7 01       	movw	r30, r14
    1466:	86 81       	ldd	r24, Z+6	; 0x06
    1468:	97 81       	ldd	r25, Z+7	; 0x07
    146a:	02 c0       	rjmp	.+4      	; 0x1470 <vfprintf+0x39c>
    146c:	8f ef       	ldi	r24, 0xFF	; 255
    146e:	9f ef       	ldi	r25, 0xFF	; 255
    1470:	2c 96       	adiw	r28, 0x0c	; 12
    1472:	e2 e1       	ldi	r30, 0x12	; 18
    1474:	0c 94 21 0b 	jmp	0x1642	; 0x1642 <__epilogue_restores__>

00001478 <calloc>:
    1478:	0f 93       	push	r16
    147a:	1f 93       	push	r17
    147c:	cf 93       	push	r28
    147e:	df 93       	push	r29
    1480:	86 9f       	mul	r24, r22
    1482:	80 01       	movw	r16, r0
    1484:	87 9f       	mul	r24, r23
    1486:	10 0d       	add	r17, r0
    1488:	96 9f       	mul	r25, r22
    148a:	10 0d       	add	r17, r0
    148c:	11 24       	eor	r1, r1
    148e:	c8 01       	movw	r24, r16
    1490:	0e 94 d6 06 	call	0xdac	; 0xdac <malloc>
    1494:	ec 01       	movw	r28, r24
    1496:	00 97       	sbiw	r24, 0x00	; 0
    1498:	29 f0       	breq	.+10     	; 0x14a4 <calloc+0x2c>
    149a:	a8 01       	movw	r20, r16
    149c:	60 e0       	ldi	r22, 0x00	; 0
    149e:	70 e0       	ldi	r23, 0x00	; 0
    14a0:	0e 94 63 0a 	call	0x14c6	; 0x14c6 <memset>
    14a4:	ce 01       	movw	r24, r28
    14a6:	df 91       	pop	r29
    14a8:	cf 91       	pop	r28
    14aa:	1f 91       	pop	r17
    14ac:	0f 91       	pop	r16
    14ae:	08 95       	ret

000014b0 <strnlen_P>:
    14b0:	fc 01       	movw	r30, r24
    14b2:	05 90       	lpm	r0, Z+
    14b4:	61 50       	subi	r22, 0x01	; 1
    14b6:	70 40       	sbci	r23, 0x00	; 0
    14b8:	01 10       	cpse	r0, r1
    14ba:	d8 f7       	brcc	.-10     	; 0x14b2 <strnlen_P+0x2>
    14bc:	80 95       	com	r24
    14be:	90 95       	com	r25
    14c0:	8e 0f       	add	r24, r30
    14c2:	9f 1f       	adc	r25, r31
    14c4:	08 95       	ret

000014c6 <memset>:
    14c6:	dc 01       	movw	r26, r24
    14c8:	01 c0       	rjmp	.+2      	; 0x14cc <memset+0x6>
    14ca:	6d 93       	st	X+, r22
    14cc:	41 50       	subi	r20, 0x01	; 1
    14ce:	50 40       	sbci	r21, 0x00	; 0
    14d0:	e0 f7       	brcc	.-8      	; 0x14ca <memset+0x4>
    14d2:	08 95       	ret

000014d4 <strnlen>:
    14d4:	fc 01       	movw	r30, r24
    14d6:	61 50       	subi	r22, 0x01	; 1
    14d8:	70 40       	sbci	r23, 0x00	; 0
    14da:	01 90       	ld	r0, Z+
    14dc:	01 10       	cpse	r0, r1
    14de:	d8 f7       	brcc	.-10     	; 0x14d6 <strnlen+0x2>
    14e0:	80 95       	com	r24
    14e2:	90 95       	com	r25
    14e4:	8e 0f       	add	r24, r30
    14e6:	9f 1f       	adc	r25, r31
    14e8:	08 95       	ret

000014ea <fputc>:
    14ea:	0f 93       	push	r16
    14ec:	1f 93       	push	r17
    14ee:	cf 93       	push	r28
    14f0:	df 93       	push	r29
    14f2:	18 2f       	mov	r17, r24
    14f4:	09 2f       	mov	r16, r25
    14f6:	eb 01       	movw	r28, r22
    14f8:	8b 81       	ldd	r24, Y+3	; 0x03
    14fa:	81 fd       	sbrc	r24, 1
    14fc:	03 c0       	rjmp	.+6      	; 0x1504 <fputc+0x1a>
    14fe:	8f ef       	ldi	r24, 0xFF	; 255
    1500:	9f ef       	ldi	r25, 0xFF	; 255
    1502:	20 c0       	rjmp	.+64     	; 0x1544 <fputc+0x5a>
    1504:	82 ff       	sbrs	r24, 2
    1506:	10 c0       	rjmp	.+32     	; 0x1528 <fputc+0x3e>
    1508:	4e 81       	ldd	r20, Y+6	; 0x06
    150a:	5f 81       	ldd	r21, Y+7	; 0x07
    150c:	2c 81       	ldd	r18, Y+4	; 0x04
    150e:	3d 81       	ldd	r19, Y+5	; 0x05
    1510:	42 17       	cp	r20, r18
    1512:	53 07       	cpc	r21, r19
    1514:	7c f4       	brge	.+30     	; 0x1534 <fputc+0x4a>
    1516:	e8 81       	ld	r30, Y
    1518:	f9 81       	ldd	r31, Y+1	; 0x01
    151a:	9f 01       	movw	r18, r30
    151c:	2f 5f       	subi	r18, 0xFF	; 255
    151e:	3f 4f       	sbci	r19, 0xFF	; 255
    1520:	39 83       	std	Y+1, r19	; 0x01
    1522:	28 83       	st	Y, r18
    1524:	10 83       	st	Z, r17
    1526:	06 c0       	rjmp	.+12     	; 0x1534 <fputc+0x4a>
    1528:	e8 85       	ldd	r30, Y+8	; 0x08
    152a:	f9 85       	ldd	r31, Y+9	; 0x09
    152c:	81 2f       	mov	r24, r17
    152e:	09 95       	icall
    1530:	89 2b       	or	r24, r25
    1532:	29 f7       	brne	.-54     	; 0x14fe <fputc+0x14>
    1534:	2e 81       	ldd	r18, Y+6	; 0x06
    1536:	3f 81       	ldd	r19, Y+7	; 0x07
    1538:	2f 5f       	subi	r18, 0xFF	; 255
    153a:	3f 4f       	sbci	r19, 0xFF	; 255
    153c:	3f 83       	std	Y+7, r19	; 0x07
    153e:	2e 83       	std	Y+6, r18	; 0x06
    1540:	81 2f       	mov	r24, r17
    1542:	90 2f       	mov	r25, r16
    1544:	df 91       	pop	r29
    1546:	cf 91       	pop	r28
    1548:	1f 91       	pop	r17
    154a:	0f 91       	pop	r16
    154c:	08 95       	ret

0000154e <__ultoa_invert>:
    154e:	fa 01       	movw	r30, r20
    1550:	aa 27       	eor	r26, r26
    1552:	28 30       	cpi	r18, 0x08	; 8
    1554:	51 f1       	breq	.+84     	; 0x15aa <__ultoa_invert+0x5c>
    1556:	20 31       	cpi	r18, 0x10	; 16
    1558:	81 f1       	breq	.+96     	; 0x15ba <__ultoa_invert+0x6c>
    155a:	e8 94       	clt
    155c:	6f 93       	push	r22
    155e:	6e 7f       	andi	r22, 0xFE	; 254
    1560:	6e 5f       	subi	r22, 0xFE	; 254
    1562:	7f 4f       	sbci	r23, 0xFF	; 255
    1564:	8f 4f       	sbci	r24, 0xFF	; 255
    1566:	9f 4f       	sbci	r25, 0xFF	; 255
    1568:	af 4f       	sbci	r26, 0xFF	; 255
    156a:	b1 e0       	ldi	r27, 0x01	; 1
    156c:	3e d0       	rcall	.+124    	; 0x15ea <__ultoa_invert+0x9c>
    156e:	b4 e0       	ldi	r27, 0x04	; 4
    1570:	3c d0       	rcall	.+120    	; 0x15ea <__ultoa_invert+0x9c>
    1572:	67 0f       	add	r22, r23
    1574:	78 1f       	adc	r23, r24
    1576:	89 1f       	adc	r24, r25
    1578:	9a 1f       	adc	r25, r26
    157a:	a1 1d       	adc	r26, r1
    157c:	68 0f       	add	r22, r24
    157e:	79 1f       	adc	r23, r25
    1580:	8a 1f       	adc	r24, r26
    1582:	91 1d       	adc	r25, r1
    1584:	a1 1d       	adc	r26, r1
    1586:	6a 0f       	add	r22, r26
    1588:	71 1d       	adc	r23, r1
    158a:	81 1d       	adc	r24, r1
    158c:	91 1d       	adc	r25, r1
    158e:	a1 1d       	adc	r26, r1
    1590:	20 d0       	rcall	.+64     	; 0x15d2 <__ultoa_invert+0x84>
    1592:	09 f4       	brne	.+2      	; 0x1596 <__ultoa_invert+0x48>
    1594:	68 94       	set
    1596:	3f 91       	pop	r19
    1598:	2a e0       	ldi	r18, 0x0A	; 10
    159a:	26 9f       	mul	r18, r22
    159c:	11 24       	eor	r1, r1
    159e:	30 19       	sub	r19, r0
    15a0:	30 5d       	subi	r19, 0xD0	; 208
    15a2:	31 93       	st	Z+, r19
    15a4:	de f6       	brtc	.-74     	; 0x155c <__ultoa_invert+0xe>
    15a6:	cf 01       	movw	r24, r30
    15a8:	08 95       	ret
    15aa:	46 2f       	mov	r20, r22
    15ac:	47 70       	andi	r20, 0x07	; 7
    15ae:	40 5d       	subi	r20, 0xD0	; 208
    15b0:	41 93       	st	Z+, r20
    15b2:	b3 e0       	ldi	r27, 0x03	; 3
    15b4:	0f d0       	rcall	.+30     	; 0x15d4 <__ultoa_invert+0x86>
    15b6:	c9 f7       	brne	.-14     	; 0x15aa <__ultoa_invert+0x5c>
    15b8:	f6 cf       	rjmp	.-20     	; 0x15a6 <__ultoa_invert+0x58>
    15ba:	46 2f       	mov	r20, r22
    15bc:	4f 70       	andi	r20, 0x0F	; 15
    15be:	40 5d       	subi	r20, 0xD0	; 208
    15c0:	4a 33       	cpi	r20, 0x3A	; 58
    15c2:	18 f0       	brcs	.+6      	; 0x15ca <__ultoa_invert+0x7c>
    15c4:	49 5d       	subi	r20, 0xD9	; 217
    15c6:	31 fd       	sbrc	r19, 1
    15c8:	40 52       	subi	r20, 0x20	; 32
    15ca:	41 93       	st	Z+, r20
    15cc:	02 d0       	rcall	.+4      	; 0x15d2 <__ultoa_invert+0x84>
    15ce:	a9 f7       	brne	.-22     	; 0x15ba <__ultoa_invert+0x6c>
    15d0:	ea cf       	rjmp	.-44     	; 0x15a6 <__ultoa_invert+0x58>
    15d2:	b4 e0       	ldi	r27, 0x04	; 4
    15d4:	a6 95       	lsr	r26
    15d6:	97 95       	ror	r25
    15d8:	87 95       	ror	r24
    15da:	77 95       	ror	r23
    15dc:	67 95       	ror	r22
    15de:	ba 95       	dec	r27
    15e0:	c9 f7       	brne	.-14     	; 0x15d4 <__ultoa_invert+0x86>
    15e2:	00 97       	sbiw	r24, 0x00	; 0
    15e4:	61 05       	cpc	r22, r1
    15e6:	71 05       	cpc	r23, r1
    15e8:	08 95       	ret
    15ea:	9b 01       	movw	r18, r22
    15ec:	ac 01       	movw	r20, r24
    15ee:	0a 2e       	mov	r0, r26
    15f0:	06 94       	lsr	r0
    15f2:	57 95       	ror	r21
    15f4:	47 95       	ror	r20
    15f6:	37 95       	ror	r19
    15f8:	27 95       	ror	r18
    15fa:	ba 95       	dec	r27
    15fc:	c9 f7       	brne	.-14     	; 0x15f0 <__ultoa_invert+0xa2>
    15fe:	62 0f       	add	r22, r18
    1600:	73 1f       	adc	r23, r19
    1602:	84 1f       	adc	r24, r20
    1604:	95 1f       	adc	r25, r21
    1606:	a0 1d       	adc	r26, r0
    1608:	08 95       	ret

0000160a <__prologue_saves__>:
    160a:	2f 92       	push	r2
    160c:	3f 92       	push	r3
    160e:	4f 92       	push	r4
    1610:	5f 92       	push	r5
    1612:	6f 92       	push	r6
    1614:	7f 92       	push	r7
    1616:	8f 92       	push	r8
    1618:	9f 92       	push	r9
    161a:	af 92       	push	r10
    161c:	bf 92       	push	r11
    161e:	cf 92       	push	r12
    1620:	df 92       	push	r13
    1622:	ef 92       	push	r14
    1624:	ff 92       	push	r15
    1626:	0f 93       	push	r16
    1628:	1f 93       	push	r17
    162a:	cf 93       	push	r28
    162c:	df 93       	push	r29
    162e:	cd b7       	in	r28, 0x3d	; 61
    1630:	de b7       	in	r29, 0x3e	; 62
    1632:	ca 1b       	sub	r28, r26
    1634:	db 0b       	sbc	r29, r27
    1636:	0f b6       	in	r0, 0x3f	; 63
    1638:	f8 94       	cli
    163a:	de bf       	out	0x3e, r29	; 62
    163c:	0f be       	out	0x3f, r0	; 63
    163e:	cd bf       	out	0x3d, r28	; 61
    1640:	09 94       	ijmp

00001642 <__epilogue_restores__>:
    1642:	2a 88       	ldd	r2, Y+18	; 0x12
    1644:	39 88       	ldd	r3, Y+17	; 0x11
    1646:	48 88       	ldd	r4, Y+16	; 0x10
    1648:	5f 84       	ldd	r5, Y+15	; 0x0f
    164a:	6e 84       	ldd	r6, Y+14	; 0x0e
    164c:	7d 84       	ldd	r7, Y+13	; 0x0d
    164e:	8c 84       	ldd	r8, Y+12	; 0x0c
    1650:	9b 84       	ldd	r9, Y+11	; 0x0b
    1652:	aa 84       	ldd	r10, Y+10	; 0x0a
    1654:	b9 84       	ldd	r11, Y+9	; 0x09
    1656:	c8 84       	ldd	r12, Y+8	; 0x08
    1658:	df 80       	ldd	r13, Y+7	; 0x07
    165a:	ee 80       	ldd	r14, Y+6	; 0x06
    165c:	fd 80       	ldd	r15, Y+5	; 0x05
    165e:	0c 81       	ldd	r16, Y+4	; 0x04
    1660:	1b 81       	ldd	r17, Y+3	; 0x03
    1662:	aa 81       	ldd	r26, Y+2	; 0x02
    1664:	b9 81       	ldd	r27, Y+1	; 0x01
    1666:	ce 0f       	add	r28, r30
    1668:	d1 1d       	adc	r29, r1
    166a:	0f b6       	in	r0, 0x3f	; 63
    166c:	f8 94       	cli
    166e:	de bf       	out	0x3e, r29	; 62
    1670:	0f be       	out	0x3f, r0	; 63
    1672:	cd bf       	out	0x3d, r28	; 61
    1674:	ed 01       	movw	r28, r26
    1676:	08 95       	ret

00001678 <_exit>:
    1678:	f8 94       	cli

0000167a <__stop_program>:
    167a:	ff cf       	rjmp	.-2      	; 0x167a <__stop_program>
